# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _libcolgraph
else:
    import _libcolgraph

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class GraphVertexIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    it = property(_libcolgraph.GraphVertexIterator_it_get, _libcolgraph.GraphVertexIterator_it_set)
    len = property(_libcolgraph.GraphVertexIterator_len_get, _libcolgraph.GraphVertexIterator_len_set)

    def __iter__(self):
        return _libcolgraph.GraphVertexIterator___iter__(self)

    def __next__(self):
        return _libcolgraph.GraphVertexIterator___next__(self)

    def __init__(self):
        _libcolgraph.GraphVertexIterator_swiginit(self, _libcolgraph.new_GraphVertexIterator())
    __swig_destroy__ = _libcolgraph.delete_GraphVertexIterator

# Register GraphVertexIterator in _libcolgraph:
_libcolgraph.GraphVertexIterator_swigregister(GraphVertexIterator)

class Graph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    vertices = property(_libcolgraph.Graph_vertices_get, _libcolgraph.Graph_vertices_set)

    def __init__(self):
        _libcolgraph.Graph_swiginit(self, _libcolgraph.new_Graph())
    __swig_destroy__ = _libcolgraph.delete_Graph

    def load_txt(self, path):
        return _libcolgraph.Graph_load_txt(self, path)

    def size(self):
        return _libcolgraph.Graph_size(self)

    def add_vertex(self, name):
        return _libcolgraph.Graph_add_vertex(self, name)

    def get_vertex(self, name):
        return _libcolgraph.Graph_get_vertex(self, name)

    def get_vertices(self):
        return _libcolgraph.Graph_get_vertices(self)

    def __iter__(self):
        return _libcolgraph.Graph___iter__(self)

# Register Graph in _libcolgraph:
_libcolgraph.Graph_swigregister(Graph)

class BaseGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _libcolgraph.BaseGraph_swiginit(self, _libcolgraph.new_BaseGraph())
    __swig_destroy__ = _libcolgraph.delete_BaseGraph

# Register BaseGraph in _libcolgraph:
_libcolgraph.BaseGraph_swigregister(BaseGraph)

class ColoringGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _libcolgraph.ColoringGraph_swiginit(self, _libcolgraph.new_ColoringGraph())
    __swig_destroy__ = _libcolgraph.delete_ColoringGraph

# Register ColoringGraph in _libcolgraph:
_libcolgraph.ColoringGraph_swigregister(ColoringGraph)

NAME = _libcolgraph.NAME
COLOR = _libcolgraph.COLOR
class Vertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libcolgraph.Vertex_swiginit(self, _libcolgraph.new_Vertex(*args))
    __swig_destroy__ = _libcolgraph.delete_Vertex

    def get_name(self):
        return _libcolgraph.Vertex_get_name(self)

    def add_neighbor(self, other):
        return _libcolgraph.Vertex_add_neighbor(self, other)

    def get_neighbors(self):
        return _libcolgraph.Vertex_get_neighbors(self)

# Register Vertex in _libcolgraph:
_libcolgraph.Vertex_swigregister(Vertex)

class ColoringVertex(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _libcolgraph.ColoringVertex_swiginit(self, _libcolgraph.new_ColoringVertex())
    __swig_destroy__ = _libcolgraph.delete_ColoringVertex

# Register ColoringVertex in _libcolgraph:
_libcolgraph.ColoringVertex_swigregister(ColoringVertex)



