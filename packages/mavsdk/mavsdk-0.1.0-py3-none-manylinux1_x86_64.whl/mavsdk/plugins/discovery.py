# -*- coding: utf-8 -*-
from .._base import AsyncBase
from ..generated import discovery_pb2, discovery_pb2_grpc
from enum import Enum


class SystemInfo:
    """ Generated by dcsdkgen """

    

    def __init__(
            self,
            uuid,
            address,
            port,
            is_core_instance):
        """ Initializes the SystemInfo object """
        self.uuid = uuid
        self.address = address
        self.port = port
        self.is_core_instance = is_core_instance

    def __equals__(self, to_compare):
        """ Checks if two SystemInfo are the same """
        try:
            # Try to compare - this likely fails when it is compared to a non
            # SystemInfo object
            return \
                (self.uuid == to_compare.uuid) and \
                (self.address == to_compare.address) and \
                (self.port == to_compare.port) and \
                (self.is_core_instance == to_compare.is_core_instance)

        except AttributeError:
            return False

    def __str__(self):
        """ SystemInfo in string representation """
        struct_repr = ", ".join([
                "uuid: " + str(self.uuid),
                "address: " + str(self.address),
                "port: " + str(self.port),
                "is_core_instance: " + str(self.is_core_instance)
                ])

        return f"SystemInfo: [{struct_repr}]"

    @staticmethod
    def translate_from_rpc(rpcSystemInfo):
        """ Translates a gRPC struct to the SDK equivalent """
        return SystemInfo(
                
                rpcSystemInfo.uuid,
                
                
                rpcSystemInfo.address,
                
                
                rpcSystemInfo.port,
                
                
                rpcSystemInfo.is_core_instance
                )

    def translate_to_rpc(self, rpcSystemInfo):
        """ Translates this SDK object into its gRPC equivalent """

        
        
            
        rpcSystemInfo.uuid = self.uuid
            
        
        
        
            
        rpcSystemInfo.address = self.address
            
        
        
        
            
        rpcSystemInfo.port = self.port
            
        
        
        
            
        rpcSystemInfo.is_core_instance = self.is_core_instance
            
        
        




class Discovery(AsyncBase):
    """ Generated by dcsdkgen - DronecodeSDK Discovery API """

    # Plugin name
    name = "Discovery"

    def _setup_stub(self, channel):
        """ Setups the api stub """
        self._stub = discovery_pb2_grpc.DiscoveryServiceStub(channel)

    

    async def discovered_systems(self):
        """ Generated by dcsdkgen """
        request = discovery_pb2.SubscribeDiscoveredSystemsRequest()
        discovered_systems_stream = self._stub.SubscribeDiscoveredSystems(request)

        try:
            async for response in discovered_systems_stream:
                

            
                yield SystemInfo.translate_from_rpc(response.system_info)
        finally:
            discovered_systems_stream.cancel()