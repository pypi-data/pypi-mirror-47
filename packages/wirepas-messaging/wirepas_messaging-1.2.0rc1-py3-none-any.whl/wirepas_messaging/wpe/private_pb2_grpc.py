# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from wirepas_messaging.wpe import private_pb2 as wirepas__messaging_dot_wpe_dot_private__pb2
from wirepas_messaging.wpe import public_pb2 as wirepas__messaging_dot_wpe_dot_public__pb2


class core_managerStub(object):
  """*
  Core manager's service definition.

  This service handles the location requests coming in from the network. It
  has a similar interface as the flow manager.


  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stop = channel.unary_unary(
        '/wirepas.wpe.private.core_manager/stop',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.status = channel.unary_unary(
        '/wirepas.wpe.private.core_manager/status',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.locate = channel.unary_unary(
        '/wirepas.wpe.private.core_manager/locate',
        request_serializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.FromString,
        )
    self.configure = channel.stream_unary(
        '/wirepas.wpe.private.core_manager/configure',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )


class core_managerServicer(object):
  """*
  Core manager's service definition.

  This service handles the location requests coming in from the network. It
  has a similar interface as the flow manager.


  """

  def stop(self, request, context):
    """/ used to stop the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def status(self, request, context):
    """/ used to query the status of the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def locate(self, request, context):
    """/ receives an infrastructure message and caches the information
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def configure(self, request_iterator, context):
    """/ talks with the core to request a new positioning for the reporter
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_core_managerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stop': grpc.unary_unary_rpc_method_handler(
          servicer.stop,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'locate': grpc.unary_unary_rpc_method_handler(
          servicer.locate,
          request_deserializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.SerializeToString,
      ),
      'configure': grpc.stream_unary_rpc_method_handler(
          servicer.configure,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'wirepas.wpe.private.core_manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class data_managerStub(object):
  """*
  Data manager's service definition.

  This is a reference service able to read from one or multiple sources of
  data, such as databases and files.

  You should consider extending this service if you want to build your own
  API wrapper and provide data into the flow manager.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.stop = channel.unary_unary(
        '/wirepas.wpe.private.data_manager/stop',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.status = channel.unary_unary(
        '/wirepas.wpe.private.data_manager/status',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.configure = channel.stream_unary(
        '/wirepas.wpe.private.data_manager/configure',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.fetch = channel.unary_unary(
        '/wirepas.wpe.private.data_manager/fetch',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.FromString,
        )
    self.nodes = channel.unary_stream(
        '/wirepas.wpe.private.data_manager/nodes',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.FromString,
        )
    self.areas = channel.unary_stream(
        '/wirepas.wpe.private.data_manager/areas',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Area.FromString,
        )
    self.insert = channel.stream_unary(
        '/wirepas.wpe.private.data_manager/insert',
        request_serializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )
    self.purge = channel.stream_unary(
        '/wirepas.wpe.private.data_manager/purge',
        request_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.SerializeToString,
        response_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.FromString,
        )


class data_managerServicer(object):
  """*
  Data manager's service definition.

  This is a reference service able to read from one or multiple sources of
  data, such as databases and files.

  You should consider extending this service if you want to build your own
  API wrapper and provide data into the flow manager.
  """

  def stop(self, request, context):
    """/ used to stop the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def status(self, request, context):
    """/ used to query the status of the service
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def configure(self, request_iterator, context):
    """/ updates internal state
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def fetch(self, request, context):
    """/ retrieves infrasctructure data
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def nodes(self, request, context):
    """retrieves information for one or multiple nodes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def areas(self, request, context):
    """retrieves information for one or multiple nodes
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def insert(self, request_iterator, context):
    """/ stores the data provided
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def purge(self, request_iterator, context):
    """/ cleans out any information regarding a specific node
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_data_managerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'stop': grpc.unary_unary_rpc_method_handler(
          servicer.stop,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'status': grpc.unary_unary_rpc_method_handler(
          servicer.status,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'configure': grpc.stream_unary_rpc_method_handler(
          servicer.configure,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'fetch': grpc.unary_unary_rpc_method_handler(
          servicer.fetch,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.ConfigurationData.SerializeToString,
      ),
      'nodes': grpc.unary_stream_rpc_method_handler(
          servicer.nodes,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Node.SerializeToString,
      ),
      'areas': grpc.unary_stream_rpc_method_handler(
          servicer.areas,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Area.SerializeToString,
      ),
      'insert': grpc.stream_unary_rpc_method_handler(
          servicer.insert,
          request_deserializer=wirepas__messaging_dot_wpe_dot_private__pb2.PositionReport.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
      'purge': grpc.stream_unary_rpc_method_handler(
          servicer.purge,
          request_deserializer=wirepas__messaging_dot_wpe_dot_public__pb2.Query.FromString,
          response_serializer=wirepas__messaging_dot_wpe_dot_public__pb2.Status.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'wirepas.wpe.private.data_manager', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
