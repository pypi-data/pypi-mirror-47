# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# This is a schema file for yapyseq sequences.

# This file a "yamale" schema, used to validate another yaml file.
# For more information, check the project page of the python module yamale
# https://github.com/23andMe/Yamale

# TODO: implement sub-sequences

# ------------------------------------------------------------------------------
# First document is the schema
# ------------------------------------------------------------------------------
---
sequence:

  constants: map(required=False)

  nodes: >
    list(include('function_node'),
         include('variable_node'),
         include('stop_node'),
         include('other_transitional_node'))

# ------------------------------------------------------------------------------
# Second document contains includes for the first document
# ------------------------------------------------------------------------------
---
function_node:
  type: enum('function', required=True)
  id: int(required=True)  # unique id of the node
  name: str(required=False)  # name of the node
  function: str(required=True)  # name of the function to run
  arguments: map(required=False)  # args to give to the function
  timeout: num(required=False)  # timeout of the function, in sec
  return: str(required=False)  # variable in which returned object must be stored
  transitions: list(include('transition'), required=True)  # transitions of this node
  wrappers: list(str(), map(), required=False)  # wrappers around this node

variable_node:
  type: enum('variable', required=True)
  id: int(required=True)  # unique id of the node
  name: str(required=False)  # name of the node
  variables: map(required=True)  # variables and their assignations
  transitions: list(include('transition'), required=True)

stop_node:
  type: enum('stop', required=True)
  id: int(required=True)  # unique id of the node
  name: str(required=False)  # name of the node

other_transitional_node:
  type: enum('start', 'parallel_split', 'parallel_sync', required=True)
  id: int(required=True)  # unique id of the node
  name: str(required=False)  # name of the node
  transitions: list(include('transition'), required=True)

transition:
  target: int(required=True)  # unique id of the target
  condition: str(required=False)  # condition expression TODO: make a custom Validator for conditions (see doc of yamale)
