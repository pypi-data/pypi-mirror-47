from openhltest_client.base import Base


class FrameRate(Base):
	"""Configure the total stream rate.
	The vendor must ensure that the rate configured will be what goes out on the wire for the streams generated by this aggregate.
	i.e., 100% line rate / 10 vendor generated streams = 10% line rate per stream
	"""
	YANG_NAME = 'frame-rate'
	YANG_KEYWORD = 'container'
	YANG_KEY = None
	YANG_PROPERTY_MAP = {"PercentLineRate": "percent-line-rate", "Bps": "bps", "FramesPerSecond": "frames-per-second", "RateType": "rate-type"}
	YANG_ACTIONS = []

	def __init__(self, parent):
		super(FrameRate, self).__init__(parent)

	@property
	def RateType(self):
		"""Type of rate unit.

		Getter Returns:
			BPS | KBPS | MPBS | FRAMES_PER_SECOND | INTER_PACKET_GAP | PERCENT_LINE_RATE

		Setter Allows:
			BPS | KBPS | MPBS | FRAMES_PER_SECOND | INTER_PACKET_GAP | PERCENT_LINE_RATE

		Setter Raises:
			ValueError
			InvalidValueError
		"""
		return self._get_value('rate-type')

	@property
	def Bps(self):
		"""Bits per second.

		Getter Returns:
			uint64

		Setter Allows:
			uint64

		Setter Raises:
			ValueError
			InvalidValueError
		"""
		return self._get_value('bps')

	@property
	def FramesPerSecond(self):
		"""Number of frames per second

		Getter Returns:
			uint32

		Setter Allows:
			uint32

		Setter Raises:
			ValueError
			InvalidValueError
		"""
		return self._get_value('frames-per-second')

	@property
	def PercentLineRate(self):
		"""Percentage of line rate

		Getter Returns:
			decimal64

		Setter Allows:
			decimal64

		Setter Raises:
			ValueError
			InvalidValueError
		"""
		return self._get_value('percent-line-rate')

	def update(self, RateType=None, Bps=None, FramesPerSecond=None, PercentLineRate=None):
		"""Update the current instance of the `frame-rate` resource

		Args:
			RateType (enumeration): Type of rate unit.
			Bps (uint64): Bits per second.
			FramesPerSecond (uint32): Number of frames per second
			PercentLineRate (decimal64): Percentage of line rate
		"""
		return self._update(locals())

