# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from .. import utilities, tables

class Cluster(pulumi.CustomResource):
    arn: pulumi.Output[str]
    """
    Amazon Resource Name (ARN) of the MSK cluster.
    """
    bootstrap_brokers: pulumi.Output[str]
    """
    A comma separated list of one or more hostname:port pairs of kafka brokers suitable to boostrap connectivity to the kafka cluster.
    * `encryption_info.0.encryption_at_rest_kms_key_arn` - The ARN of the KMS key used for encryption at rest of the broker data volumes.
    """
    broker_node_group_info: pulumi.Output[dict]
    """
    Nested data for configuring the broker nodes of the Kafka cluster.
    """
    cluster_name: pulumi.Output[str]
    """
    Name of the MSK cluster.
    """
    encryption_info: pulumi.Output[dict]
    """
    Nested data for specifying encryption at rest info.  See below.
    """
    enhanced_monitoring: pulumi.Output[str]
    """
    Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
    """
    kafka_version: pulumi.Output[str]
    """
    Specify the desired Kafka software version.
    """
    number_of_broker_nodes: pulumi.Output[float]
    """
    The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
    """
    tags: pulumi.Output[dict]
    """
    A mapping of tags to assign to the resource
    """
    zookeeper_connect_string: pulumi.Output[str]
    """
    A comma separated list of one or more IP:port pairs to use to connect to the Apache Zookeeper cluster.
    """
    def __init__(__self__, resource_name, opts=None, broker_node_group_info=None, cluster_name=None, encryption_info=None, enhanced_monitoring=None, kafka_version=None, number_of_broker_nodes=None, tags=None, __name__=None, __opts__=None):
        """
        Manages AWS Managed Streaming for Kafka cluster
        
        > **NOTE:** This AWS service is in Preview and may change before General Availability release. Backwards compatibility is not guaranteed between Terraform AWS Provider releases.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[dict] broker_node_group_info: Nested data for configuring the broker nodes of the Kafka cluster.
        :param pulumi.Input[str] cluster_name: Name of the MSK cluster.
        :param pulumi.Input[dict] encryption_info: Nested data for specifying encryption at rest info.  See below.
        :param pulumi.Input[str] enhanced_monitoring: Specify the desired enhanced MSK CloudWatch monitoring level.  See [Monitoring Amazon MSK with Amazon CloudWatch](https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html)
        :param pulumi.Input[str] kafka_version: Specify the desired Kafka software version.
        :param pulumi.Input[float] number_of_broker_nodes: The desired total number of broker nodes in the kafka cluster.  It must be a multiple of the number of specified client subnets.
        :param pulumi.Input[dict] tags: A mapping of tags to assign to the resource
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if broker_node_group_info is None:
            raise TypeError("Missing required property 'broker_node_group_info'")
        __props__['broker_node_group_info'] = broker_node_group_info

        if cluster_name is None:
            raise TypeError("Missing required property 'cluster_name'")
        __props__['cluster_name'] = cluster_name

        __props__['encryption_info'] = encryption_info

        __props__['enhanced_monitoring'] = enhanced_monitoring

        if kafka_version is None:
            raise TypeError("Missing required property 'kafka_version'")
        __props__['kafka_version'] = kafka_version

        if number_of_broker_nodes is None:
            raise TypeError("Missing required property 'number_of_broker_nodes'")
        __props__['number_of_broker_nodes'] = number_of_broker_nodes

        __props__['tags'] = tags

        __props__['arn'] = None
        __props__['bootstrap_brokers'] = None
        __props__['zookeeper_connect_string'] = None

        super(Cluster, __self__).__init__(
            'aws:msk/cluster:Cluster',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

