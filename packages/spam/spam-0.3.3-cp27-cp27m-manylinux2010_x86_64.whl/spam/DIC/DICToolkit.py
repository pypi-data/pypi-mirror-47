# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _DICToolkit
else:
    import _DICToolkit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def computeDICoperators(computeDICoperators_nz1, computeDICoperators_nz2, computeDICoperators_nz2gz, computeDICoperators_nz2gy, computeDICoperators_nz2gx, computeDICoperators_twelve1, computeDICoperators_twelve3):
    return _DICToolkit.computeDICoperators(computeDICoperators_nz1, computeDICoperators_nz2, computeDICoperators_nz2gz, computeDICoperators_nz2gy, computeDICoperators_nz2gx, computeDICoperators_twelve1, computeDICoperators_twelve3)

def computeDICoperatorsGM(computeDICoperatorsGM_nz1, computeDICoperatorsGM_nz2, computeDICoperatorsGM_nz2gz, computeDICoperatorsGM_nz2gy, computeDICoperatorsGM_nz2gx, computeDICoperatorsGM_binsF, computeDICoperatorsGM_nPeaks, computeDICoperatorsGM_twelve1, computeDICoperatorsGM_twelve3):
    return _DICToolkit.computeDICoperatorsGM(computeDICoperatorsGM_nz1, computeDICoperatorsGM_nz2, computeDICoperatorsGM_nz2gz, computeDICoperatorsGM_nz2gy, computeDICoperatorsGM_nz2gx, computeDICoperatorsGM_binsF, computeDICoperatorsGM_nPeaks, computeDICoperatorsGM_twelve1, computeDICoperatorsGM_twelve3)

def computeDICoperatorsLL(computeDICoperatorsLL_nz1, computeDICoperatorsLL_nz2, computeDICoperatorsLL_nz2gz, computeDICoperatorsLL_nz2gy, computeDICoperatorsLL_nz2gx, computeDICoperatorsLL_nBinsA, computeDICoperatorsLL_nBinsC, computeDICoperatorsLL_twelve1, computeDICoperatorsLL_twelve3):
    return _DICToolkit.computeDICoperatorsLL(computeDICoperatorsLL_nz1, computeDICoperatorsLL_nz2, computeDICoperatorsLL_nz2gz, computeDICoperatorsLL_nz2gy, computeDICoperatorsLL_nz2gx, computeDICoperatorsLL_nBinsA, computeDICoperatorsLL_nBinsC, computeDICoperatorsLL_twelve1, computeDICoperatorsLL_twelve3)

def computeDICglobalMatrix(computeDICglobalMatrix_nz1, cgmFour, computeDICglobalMatrix_ConneSize, computeDICglobalMatrix_nodesSize, computeDICglobalMatrix_dof1):
    return _DICToolkit.computeDICglobalMatrix(computeDICglobalMatrix_nz1, cgmFour, computeDICglobalMatrix_ConneSize, computeDICglobalMatrix_nodesSize, computeDICglobalMatrix_dof1)

def computeDICglobalVector(computeDICglobalVector_nz1, cgvFour, computeDICglobalVector_nz3, computeDICglobalVector_nz4, computeDICglobalVector_ConneSize, computeDICglobalVector_nodesSize, computeDICglobalVector_dof3):
    return _DICToolkit.computeDICglobalVector(computeDICglobalVector_nz1, cgvFour, computeDICglobalVector_nz3, computeDICglobalVector_nz4, computeDICglobalVector_ConneSize, computeDICglobalVector_nodesSize, computeDICglobalVector_dof3)

def applyMeshTransformation(applyMeshTransformation_nz1, applyMeshTransformation_nz2, applyMeshTransformation_nz3, applyMeshTransformation_ConneSize, applyMeshTransformation_nodesSize, applyMeshTransformation_three):
    return _DICToolkit.applyMeshTransformation(applyMeshTransformation_nz1, applyMeshTransformation_nz2, applyMeshTransformation_nz3, applyMeshTransformation_ConneSize, applyMeshTransformation_nodesSize, applyMeshTransformation_three)

def applyPhiC(applyPhiC_nz1, applyPhiC_nz2, applyPhiC_fourA, applyPhiC_threeB, applyPhiC_interpOrder):
    return _DICToolkit.applyPhiC(applyPhiC_nz1, applyPhiC_nz2, applyPhiC_fourA, applyPhiC_threeB, applyPhiC_interpOrder)

def binningFloat(binningFloat_nz1, binningFloat_nz2, binningFloat_three, binningFloat_binning):
    return _DICToolkit.binningFloat(binningFloat_nz1, binningFloat_nz2, binningFloat_three, binningFloat_binning)

def binningUInt(binningUInt_nz1, binningUInt_nz2, binningUInt_three, binningUInt_binning):
    return _DICToolkit.binningUInt(binningUInt_nz1, binningUInt_nz2, binningUInt_three, binningUInt_binning)

def binningChar(binningChar_nz1, binningChar_nz2, binningChar_three, binningChar_binning):
    return _DICToolkit.binningChar(binningChar_nz1, binningChar_nz2, binningChar_three, binningChar_binning)

def pixelSearchC(pixelSearch_im1z, pixelSearch_im2z, pixelSearch_startPosN, pixelSearch_searchRangeN, pixelSearch_n1):
    return _DICToolkit.pixelSearchC(pixelSearch_im1z, pixelSearch_im2z, pixelSearch_startPosN, pixelSearch_searchRangeN, pixelSearch_n1)

def computeGMresidualAndPhase(computeGMresidualAndPhase_nz1, computeGMresidualAndPhase_nz2, computeGMresidualAndPhase_binsF, computeGMresidualAndPhase_nPeaks, computeGMresidualAndPhase_nz3, computeGMresidualAndPhase_nz4):
    return _DICToolkit.computeGMresidualAndPhase(computeGMresidualAndPhase_nz1, computeGMresidualAndPhase_nz2, computeGMresidualAndPhase_binsF, computeGMresidualAndPhase_nPeaks, computeGMresidualAndPhase_nz3, computeGMresidualAndPhase_nz4)


