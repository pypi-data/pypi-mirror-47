# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _measurementsToolkit
else:
    import _measurementsToolkit

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _measurementsToolkit.delete_SwigPyIterator

    def value(self):
        return _measurementsToolkit.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _measurementsToolkit.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _measurementsToolkit.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _measurementsToolkit.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _measurementsToolkit.SwigPyIterator_equal(self, x)

    def copy(self):
        return _measurementsToolkit.SwigPyIterator_copy(self)

    def next(self):
        return _measurementsToolkit.SwigPyIterator_next(self)

    def __next__(self):
        return _measurementsToolkit.SwigPyIterator___next__(self)

    def previous(self):
        return _measurementsToolkit.SwigPyIterator_previous(self)

    def advance(self, n):
        return _measurementsToolkit.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _measurementsToolkit.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _measurementsToolkit.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _measurementsToolkit.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _measurementsToolkit.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _measurementsToolkit.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _measurementsToolkit.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _measurementsToolkit:
_measurementsToolkit.SwigPyIterator_swigregister(SwigPyIterator)

class VectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorFloat___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorFloat___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorFloat___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorFloat_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorFloat_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorFloat_empty(self)

    def size(self):
        return _measurementsToolkit.VectorFloat_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorFloat_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorFloat_begin(self)

    def end(self):
        return _measurementsToolkit.VectorFloat_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorFloat_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorFloat_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorFloat_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorFloat_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorFloat_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorFloat_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorFloat_swiginit(self, _measurementsToolkit.new_VectorFloat(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorFloat_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorFloat_front(self)

    def back(self):
        return _measurementsToolkit.VectorFloat_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorFloat_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorFloat_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorFloat_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorFloat_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorFloat

# Register VectorFloat in _measurementsToolkit:
_measurementsToolkit.VectorFloat_swigregister(VectorFloat)

class VectorVectorFloat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorVectorFloat_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorVectorFloat___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorVectorFloat___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorVectorFloat___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorVectorFloat___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorVectorFloat___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorVectorFloat___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorVectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorVectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorVectorFloat___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorVectorFloat_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorVectorFloat_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorVectorFloat_empty(self)

    def size(self):
        return _measurementsToolkit.VectorVectorFloat_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorVectorFloat_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorVectorFloat_begin(self)

    def end(self):
        return _measurementsToolkit.VectorVectorFloat_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorVectorFloat_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorVectorFloat_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorVectorFloat_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorVectorFloat_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorVectorFloat_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorVectorFloat_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorVectorFloat_swiginit(self, _measurementsToolkit.new_VectorVectorFloat(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorVectorFloat_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorVectorFloat_front(self)

    def back(self):
        return _measurementsToolkit.VectorVectorFloat_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorVectorFloat_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorVectorFloat_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorVectorFloat_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorVectorFloat_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorVectorFloat_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorVectorFloat

# Register VectorVectorFloat in _measurementsToolkit:
_measurementsToolkit.VectorVectorFloat_swigregister(VectorVectorFloat)

class VectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorDouble___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorDouble___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorDouble___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorDouble_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorDouble_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorDouble_empty(self)

    def size(self):
        return _measurementsToolkit.VectorDouble_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorDouble_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorDouble_begin(self)

    def end(self):
        return _measurementsToolkit.VectorDouble_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorDouble_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorDouble_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorDouble_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorDouble_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorDouble_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorDouble_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorDouble_swiginit(self, _measurementsToolkit.new_VectorDouble(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorDouble_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorDouble_front(self)

    def back(self):
        return _measurementsToolkit.VectorDouble_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorDouble_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorDouble_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorDouble_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorDouble_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorDouble

# Register VectorDouble in _measurementsToolkit:
_measurementsToolkit.VectorDouble_swigregister(VectorDouble)

class VectorVectorDouble(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorVectorDouble_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorVectorDouble___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorVectorDouble___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorVectorDouble___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorVectorDouble___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorVectorDouble___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorVectorDouble___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorVectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorVectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorVectorDouble___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorVectorDouble_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorVectorDouble_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorVectorDouble_empty(self)

    def size(self):
        return _measurementsToolkit.VectorVectorDouble_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorVectorDouble_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorVectorDouble_begin(self)

    def end(self):
        return _measurementsToolkit.VectorVectorDouble_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorVectorDouble_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorVectorDouble_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorVectorDouble_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorVectorDouble_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorVectorDouble_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorVectorDouble_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorVectorDouble_swiginit(self, _measurementsToolkit.new_VectorVectorDouble(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorVectorDouble_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorVectorDouble_front(self)

    def back(self):
        return _measurementsToolkit.VectorVectorDouble_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorVectorDouble_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorVectorDouble_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorVectorDouble_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorVectorDouble_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorVectorDouble_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorVectorDouble

# Register VectorVectorDouble in _measurementsToolkit:
_measurementsToolkit.VectorVectorDouble_swigregister(VectorVectorDouble)

class VectorUnsigned(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorUnsigned_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorUnsigned___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorUnsigned___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorUnsigned___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorUnsigned___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorUnsigned___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorUnsigned___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorUnsigned___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorUnsigned___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorUnsigned___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorUnsigned_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorUnsigned_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorUnsigned_empty(self)

    def size(self):
        return _measurementsToolkit.VectorUnsigned_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorUnsigned_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorUnsigned_begin(self)

    def end(self):
        return _measurementsToolkit.VectorUnsigned_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorUnsigned_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorUnsigned_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorUnsigned_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorUnsigned_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorUnsigned_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorUnsigned_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorUnsigned_swiginit(self, _measurementsToolkit.new_VectorUnsigned(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorUnsigned_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorUnsigned_front(self)

    def back(self):
        return _measurementsToolkit.VectorUnsigned_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorUnsigned_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorUnsigned_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorUnsigned_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorUnsigned_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorUnsigned_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorUnsigned

# Register VectorUnsigned in _measurementsToolkit:
_measurementsToolkit.VectorUnsigned_swigregister(VectorUnsigned)

class VectorVectorUnsigned(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _measurementsToolkit.VectorVectorUnsigned_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _measurementsToolkit.VectorVectorUnsigned___nonzero__(self)

    def __bool__(self):
        return _measurementsToolkit.VectorVectorUnsigned___bool__(self)

    def __len__(self):
        return _measurementsToolkit.VectorVectorUnsigned___len__(self)

    def __getslice__(self, i, j):
        return _measurementsToolkit.VectorVectorUnsigned___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _measurementsToolkit.VectorVectorUnsigned___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned___delitem__(self, *args)

    def __getitem__(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned___getitem__(self, *args)

    def __setitem__(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned___setitem__(self, *args)

    def pop(self):
        return _measurementsToolkit.VectorVectorUnsigned_pop(self)

    def append(self, x):
        return _measurementsToolkit.VectorVectorUnsigned_append(self, x)

    def empty(self):
        return _measurementsToolkit.VectorVectorUnsigned_empty(self)

    def size(self):
        return _measurementsToolkit.VectorVectorUnsigned_size(self)

    def swap(self, v):
        return _measurementsToolkit.VectorVectorUnsigned_swap(self, v)

    def begin(self):
        return _measurementsToolkit.VectorVectorUnsigned_begin(self)

    def end(self):
        return _measurementsToolkit.VectorVectorUnsigned_end(self)

    def rbegin(self):
        return _measurementsToolkit.VectorVectorUnsigned_rbegin(self)

    def rend(self):
        return _measurementsToolkit.VectorVectorUnsigned_rend(self)

    def clear(self):
        return _measurementsToolkit.VectorVectorUnsigned_clear(self)

    def get_allocator(self):
        return _measurementsToolkit.VectorVectorUnsigned_get_allocator(self)

    def pop_back(self):
        return _measurementsToolkit.VectorVectorUnsigned_pop_back(self)

    def erase(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned_erase(self, *args)

    def __init__(self, *args):
        _measurementsToolkit.VectorVectorUnsigned_swiginit(self, _measurementsToolkit.new_VectorVectorUnsigned(*args))

    def push_back(self, x):
        return _measurementsToolkit.VectorVectorUnsigned_push_back(self, x)

    def front(self):
        return _measurementsToolkit.VectorVectorUnsigned_front(self)

    def back(self):
        return _measurementsToolkit.VectorVectorUnsigned_back(self)

    def assign(self, n, x):
        return _measurementsToolkit.VectorVectorUnsigned_assign(self, n, x)

    def resize(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned_resize(self, *args)

    def insert(self, *args):
        return _measurementsToolkit.VectorVectorUnsigned_insert(self, *args)

    def reserve(self, n):
        return _measurementsToolkit.VectorVectorUnsigned_reserve(self, n)

    def capacity(self):
        return _measurementsToolkit.VectorVectorUnsigned_capacity(self)
    __swig_destroy__ = _measurementsToolkit.delete_VectorVectorUnsigned

# Register VectorVectorUnsigned in _measurementsToolkit:
_measurementsToolkit.VectorVectorUnsigned_swigregister(VectorVectorUnsigned)


def computeCorrelationFunction(vol, output, stepCentre, nthreads):
    return _measurementsToolkit.computeCorrelationFunction(vol, output, stepCentre, nthreads)

def porosityFieldBinary(porosityFieldBinaryVolSizeZ, porosityFieldBinaryN, porosityFieldBinaryNtwo, porosityFieldBinaryNthree):
    return _measurementsToolkit.porosityFieldBinary(porosityFieldBinaryVolSizeZ, porosityFieldBinaryN, porosityFieldBinaryNtwo, porosityFieldBinaryNthree)

def computeCurvatures(faces, verts):
    return _measurementsToolkit.computeCurvatures(faces, verts)


