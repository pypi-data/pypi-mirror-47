swagger: "2.0"
info:
  description: "Documentation for the SaGe API"
  version: "1.0.0"
  title: "SaGe API"
  contact:
    email: "sage@univ-nantes.fr"
  license:
    name: "MIT"
    url: "https://github.com/sage-org/sage-engine/blob/master/LICENSE"
basePath: "/"
tags:
- name: "sparql"
  description: "Evaluate SPARQL queries using the SaGe preemptive SPARQL query server"
  externalDocs:
    description: "See more"
    url: "http://sage.univ-nantes.fr/"
- name: "void"
  description: "Get VoID descriptions"
  externalDocs:
    description: "See more"
    url: "https://www.w3.org/TR/void/"
- name: "miscellaneous"
  description: "Miscellaneous operations"
schemes:
- "http"
paths:
  /sparql:
    get:
      tags:
      - "sparql"
      summary: "Execute a SPARQL query using a GET query"
      description: "Execute a SPARQL query using the preemptive SPARQL query server"
      produces:
      - "application/json"
      - "application/sparql-results+json"
      - "application/sparql-results+xml"
      parameters:
      - name: "query"
        in: "query"
        required: true
        type: "string"
        description: |
          The SPARQL query to execute.
          Only the following features of SPARQL queries are supported by the SaGe server:
            - *Triple patterns*
            - *Basic Graph patterns*
            - *Union* clauses
            - *Graph* clauses
            - *Filter* clauses, with only basic unary and binary operations (=, <, +, -, etc).

          **Example value:**
          ```
          SELECT ?person ?label WHERE {
            ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> .
            ?person <http://www.w3.org/2000/01/rdf-schema#label> ?label .
          }
          ```
      - name: "default-graph-uri"
        in: "query"
        required: true
        type: "string"
        description: |
          The URI of the default RDF graph queried.

          **Example value:**
          ```
          http://sage.univ-nantes.fr/sparql/dbpedia-2016-04
          ```
      - name: "next"
        in: "query"
        required: false
        description: "(Optional) A next link used to resume query execution from a saved state."
        type: "string"
        default: null
      responses:
        200:
          description: "Successful operation"
          examples:
            application/json: |
              {
                "bindings": [
                  { "?bob": "http://example.org#Sponge_Bob" },
                  { "?bob": "http://example.org#Bob_Lennon"}
                ],
                "hasNext": true,
                "next": "xRVCiMKAj9zCgI==",
                "pageSize": 2
              }
            application/sparql-results+json: |
              {
                "head": {
                    "vars": [ "bob" ],
                    "hasNext": true,
                    "next": "xRVCiMKAj9zCgI==",
                    "pageSize": 2
                },
                "results": {
                  "bindings": [
                    { "bob": {
                        "type": "uri",
                        "value": "http://example.org#Sponge_Bob"
                      }
                    }
                    { "bob": {
                        "type": "uri",
                        "value": "http://example.org#Bob_Lennon"
                      }
                    }
                  ]
                }
              }
        500:
          description: "Invalid query"
    post:
      tags:
      - "sparql"
      summary: "Execute a SPARQL query using a POST query"
      description: "Execute a SPARQL query using the preemptive SPARQL query server"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/sparql-results+json"
      - "application/sparql-results+xml"
      parameters:
      - name: "body"
        in: "body"
        description: |
          SPARQL query to execute with a default RDF Graph/Dataset.
          The body of the POST query can contains the following parameters:
            - **query** (required): The SPARQL query to execute.
            - **defaultGraph** (required): The URI of the default RDF graph queried
            - **next** (optinal): A next link used to resume query execution from a saved state.

          Only the following features of SPARQL queries are supported by the SaGe server:
            - *Triple patterns*
            - *Basic Graph patterns*
            - *Union* clauses
            - *Graph* clauses
            - *Filter* clauses, with only basic unary and binary operations (=, <, +, -, etc).
        schema:
          type: object
          required:
            - query
            - defaultGraph
          properties:
            query:
              type: "string"
              description: "The SPARQL query to execute"
              example: |
                SELECT ?person ?label WHERE {
                  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Actor> .
                  ?person <http://www.w3.org/2000/01/rdf-schema#label> ?label .
                }
            defaultGraph:
              description: "The URI of the default RDF graph queried"
              type: "string"
              example: "http://sage.univ-nantes.fr/sparql/dbpedia-2016-04"
            next:
              description: "(Optional) A next link used to resume query execution from a saved state"
              type: "string"
              example: null
      responses:
        200:
          description: "Successful operation"
          examples:
            application/json: |
              {
                "bindings": [
                  { "?bob": "http://example.org#Sponge_Bob" },
                  { "?bob": "http://example.org#Bob_Lennon"}
                ],
                "hasNext": true,
                "next": "xRVCiMKAj9zCgI==",
                "pageSize": 2
              }
            application/sparql-results+json: |
              {
                "head": {
                    "vars": [ "bob" ],
                    "hasNext": true,
                    "next": "xRVCiMKAj9zCgI==",
                    "pageSize": 2
                },
                "results": {
                  "bindings": [
                    { "bob": {
                        "type": "uri",
                        "value": "http://example.org#Sponge_Bob"
                      }
                    }
                    { "bob": {
                        "type": "uri",
                        "value": "http://example.org#Bob_Lennon"
                      }
                    }
                  ]
                }
              }
        500:
          description: "Invalid query"
  /void/:
    get:
      tags:
      - "void"
      summary: "Get the Server VoID description"
      description: "Get the VoID description of the SaGe server"
      produces:
      - "application/xml"
      - "application/n-triples"
      - "application/json"
      - "text/turtle"
      responses:
        200:
          description: "Successful operation"
        500:
          description: "Invalid query"
  /void/{dataset}:
    get:
      tags:
      - "void"
      summary: "Get the VoID description of a RDF Dataset"
      description: "Get the VoID description of a RDF Dataset hosted by the SaGe server"
      produces:
      - "application/xml"
      - "application/n-triples"
      - "application/json"
      - "text/turtle"
      parameters:
      - name: "dataset"
        in: "path"
        description: "Name of the RDF dataset"
        required: true
        type: "string"
      responses:
        200:
          description: "Successful operation"
        500:
          description: "Invalid query"
  /api/:
    get:
      tags:
      - "miscellaneous"
      summary: "Get the Server OpenAPI specification"
      description: "Get the Server OpenAPI specification"
      produces:
      - "text/yaml"
      responses:
        200:
          description: "Successful operation"
externalDocs:
  description: "Find out more about SaGe"
  url: "http://sage.univ-nantes.fr"
