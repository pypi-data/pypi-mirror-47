Metadata-Version: 2.1
Name: djangoarticle
Version: 1.0.0
Summary: Djangoarticle: Django Reusable app to Publish Articles.
Home-page: https://github.com/bhojrampawar/djangoarticle
Author: Bhojram pawar
Author-email: bhojrampawar@hotmail.com
License: MIT
Platform: UNKNOWN
Classifier: Environment :: Web Environment
Classifier: Framework :: Django
Classifier: Framework :: Django :: 2.2
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: Dynamic Content
Description-Content-Type: text/markdown
Requires-Dist: Django
Requires-Dist: django-tinymce4-lite
Requires-Dist: djangorestframework
Requires-Dist: Pillow

## Djangoarticle : Django Reusable app to Publish Articles.

**Djangoarticle** is a **Reusable Django app** which provides a full featured Article Model. The Djangoarticle's Article Model is rich features and powerful enough to start a **Blog** and **News website**, without installation of any 3rd party packages.
___


## Installation :
You can install **Djangoarticle** from PyPI using **pip**.

``` pip install djangoarticle ```
___


## Configuration :
***1. Open the ```settings.py``` module of your project, And put djangoarticle into ```INSTALLED_APPS```.***
```python
INSTALLED_APPS = (
    ...
    'tinymce',
    'taggit',
    'djangoarticle',
)
```

***2. Open the ```urls.py``` module of your project, And include djangoarticle URLs.***
```python
urlpatterns = [
    ...
    re_path(r'^article/', include('djangoarticle.urls')),
    ...
]
```

***3. Setup the Templates for djangoarticle.***
>> ***Important Note***: Djangoarticle App is a part of Djangoengine project. And if you want to access UI part of Djangoarticle App, You need to configure some Reusable/global templates to your django project or you can create your own templates, It's very easy.
```python
TEMPLATES = [
    ...
    ...
    'DIRS': [os.path.join(BASE_DIR, 'templates'),],
    ...
    ...
]
```

>For security reasons we separate reusable/global djangoadmin and djangotheme templates.

Create the ```templates``` folder inside ```BASE_DIR``` and Then create both ```djangotheme``` and ```djangoadmin``` folders inside the templates folder.
Then download the djangotheme templates and put them inside ```djangotheme``` folder.
then download the djangoadmin templates and put them inside the ```djangoadmin``` folder.

***4. Static files configuration.***
Open your ```settings.py``` module and Configure Static files and media files or you can can use your own configuration.
```python
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static-local'),)
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static-root', 'stat')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static-root', 'media')
```
>>For security reasons we separate reusable/global djangoadmin and djangotheme static files.

Create the ```static-local``` folder inside ```BASE_DIR```, Then create both ```djangotheme``` and ```djangoadmin``` folders inside that ```static-local``` folder.
Then download the djangotheme static files and put them inside ```djangotheme``` folder. And also download the djangoadmin static files and put them inside the ```djangoadmin``` folder.
___


## Complete the Djangoarticle setup by running the following command one by one in the sequence.
```python
python manage.py makemigrations
python manage.py migrate
python manage.py collectstatic
python manage.py runserver
```

