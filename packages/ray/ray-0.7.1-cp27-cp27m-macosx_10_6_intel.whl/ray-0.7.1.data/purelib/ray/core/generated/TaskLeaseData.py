# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskLeaseData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskLeaseData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskLeaseData()
        x.Init(buf, n + offset)
        return x

    # TaskLeaseData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskLeaseData
    def NodeManagerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskLeaseData
    def AcquiredAt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TaskLeaseData
    def Timeout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

def TaskLeaseDataStart(builder): builder.StartObject(3)
def TaskLeaseDataAddNodeManagerId(builder, nodeManagerId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(nodeManagerId), 0)
def TaskLeaseDataAddAcquiredAt(builder, acquiredAt): builder.PrependInt64Slot(1, acquiredAt, 0)
def TaskLeaseDataAddTimeout(builder, timeout): builder.PrependInt64Slot(2, timeout, 0)
def TaskLeaseDataEnd(builder): return builder.EndObject()
