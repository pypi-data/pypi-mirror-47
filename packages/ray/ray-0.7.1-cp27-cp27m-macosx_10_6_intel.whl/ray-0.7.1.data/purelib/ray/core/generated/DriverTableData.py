# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class DriverTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDriverTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DriverTableData()
        x.Init(buf, n + offset)
        return x

    # DriverTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DriverTableData
    def DriverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DriverTableData
    def IsDead(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def DriverTableDataStart(builder): builder.StartObject(2)
def DriverTableDataAddDriverId(builder, driverId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(driverId), 0)
def DriverTableDataAddIsDead(builder, isDead): builder.PrependBoolSlot(1, isDead, 0)
def DriverTableDataEnd(builder): return builder.EndObject()
