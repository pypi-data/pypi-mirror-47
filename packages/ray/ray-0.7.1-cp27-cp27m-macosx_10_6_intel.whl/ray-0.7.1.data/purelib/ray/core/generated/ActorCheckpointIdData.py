# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ActorCheckpointIdData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsActorCheckpointIdData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ActorCheckpointIdData()
        x.Init(buf, n + offset)
        return x

    # ActorCheckpointIdData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ActorCheckpointIdData
    def ActorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorCheckpointIdData
    def CheckpointIds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorCheckpointIdData
    def Timestamps(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ActorCheckpointIdData
    def TimestampsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int64Flags, o)
        return 0

    # ActorCheckpointIdData
    def TimestampsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ActorCheckpointIdDataStart(builder): builder.StartObject(3)
def ActorCheckpointIdDataAddActorId(builder, actorId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actorId), 0)
def ActorCheckpointIdDataAddCheckpointIds(builder, checkpointIds): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(checkpointIds), 0)
def ActorCheckpointIdDataAddTimestamps(builder, timestamps): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(timestamps), 0)
def ActorCheckpointIdDataStartTimestampsVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ActorCheckpointIdDataEnd(builder): return builder.EndObject()
