# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskTableTestAndUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskTableTestAndUpdate(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskTableTestAndUpdate()
        x.Init(buf, n + offset)
        return x

    # TaskTableTestAndUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskTableTestAndUpdate
    def TestRayletId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskTableTestAndUpdate
    def TestStateBitmask(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskTableTestAndUpdate
    def UpdateState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def TaskTableTestAndUpdateStart(builder): builder.StartObject(3)
def TaskTableTestAndUpdateAddTestRayletId(builder, testRayletId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(testRayletId), 0)
def TaskTableTestAndUpdateAddTestStateBitmask(builder, testStateBitmask): builder.PrependInt32Slot(1, testStateBitmask, 0)
def TaskTableTestAndUpdateAddUpdateState(builder, updateState): builder.PrependInt32Slot(2, updateState, 0)
def TaskTableTestAndUpdateEnd(builder): return builder.EndObject()
