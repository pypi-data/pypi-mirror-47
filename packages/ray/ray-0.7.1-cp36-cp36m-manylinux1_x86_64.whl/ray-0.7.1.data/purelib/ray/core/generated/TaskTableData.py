# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskTableData()
        x.Init(buf, n + offset)
        return x

    # TaskTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskTableData
    def SchedulingState(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskTableData
    def RayletId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskTableData
    def ExecutionDependencies(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskTableData
    def SpillbackCount(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # TaskTableData
    def TaskInfo(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskTableData
    def Updated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

def TaskTableDataStart(builder): builder.StartObject(6)
def TaskTableDataAddSchedulingState(builder, schedulingState): builder.PrependInt32Slot(0, schedulingState, 0)
def TaskTableDataAddRayletId(builder, rayletId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(rayletId), 0)
def TaskTableDataAddExecutionDependencies(builder, executionDependencies): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(executionDependencies), 0)
def TaskTableDataAddSpillbackCount(builder, spillbackCount): builder.PrependInt64Slot(3, spillbackCount, 0)
def TaskTableDataAddTaskInfo(builder, taskInfo): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(taskInfo), 0)
def TaskTableDataAddUpdated(builder, updated): builder.PrependBoolSlot(5, updated, 0)
def TaskTableDataEnd(builder): return builder.EndObject()
