# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ProfileEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsProfileEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ProfileEvent()
        x.Init(buf, n + offset)
        return x

    # ProfileEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ProfileEvent
    def EventType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ProfileEvent
    def StartTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ProfileEvent
    def EndTime(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # ProfileEvent
    def ExtraData(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ProfileEventStart(builder): builder.StartObject(4)
def ProfileEventAddEventType(builder, eventType): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(eventType), 0)
def ProfileEventAddStartTime(builder, startTime): builder.PrependFloat64Slot(1, startTime, 0.0)
def ProfileEventAddEndTime(builder, endTime): builder.PrependFloat64Slot(2, endTime, 0.0)
def ProfileEventAddExtraData(builder, extraData): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(extraData), 0)
def ProfileEventEnd(builder): return builder.EndObject()
