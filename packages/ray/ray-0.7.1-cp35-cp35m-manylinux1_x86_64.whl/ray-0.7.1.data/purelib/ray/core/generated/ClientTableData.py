# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ClientTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsClientTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ClientTableData()
        x.Init(buf, n + offset)
        return x

    # ClientTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ClientTableData
    def ClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ClientTableData
    def NodeManagerAddress(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ClientTableData
    def RayletSocketName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ClientTableData
    def ObjectStoreSocketName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ClientTableData
    def NodeManagerPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClientTableData
    def ObjectManagerPort(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClientTableData
    def EntryType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ClientTableData
    def ResourcesTotalLabel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # ClientTableData
    def ResourcesTotalLabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ClientTableData
    def ResourcesTotalCapacity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # ClientTableData
    def ResourcesTotalCapacityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # ClientTableData
    def ResourcesTotalCapacityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ClientTableDataStart(builder): builder.StartObject(9)
def ClientTableDataAddClientId(builder, clientId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientId), 0)
def ClientTableDataAddNodeManagerAddress(builder, nodeManagerAddress): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeManagerAddress), 0)
def ClientTableDataAddRayletSocketName(builder, rayletSocketName): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(rayletSocketName), 0)
def ClientTableDataAddObjectStoreSocketName(builder, objectStoreSocketName): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(objectStoreSocketName), 0)
def ClientTableDataAddNodeManagerPort(builder, nodeManagerPort): builder.PrependInt32Slot(4, nodeManagerPort, 0)
def ClientTableDataAddObjectManagerPort(builder, objectManagerPort): builder.PrependInt32Slot(5, objectManagerPort, 0)
def ClientTableDataAddEntryType(builder, entryType): builder.PrependInt32Slot(6, entryType, 0)
def ClientTableDataAddResourcesTotalLabel(builder, resourcesTotalLabel): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesTotalLabel), 0)
def ClientTableDataStartResourcesTotalLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ClientTableDataAddResourcesTotalCapacity(builder, resourcesTotalCapacity): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesTotalCapacity), 0)
def ClientTableDataStartResourcesTotalCapacityVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def ClientTableDataEnd(builder): return builder.EndObject()
