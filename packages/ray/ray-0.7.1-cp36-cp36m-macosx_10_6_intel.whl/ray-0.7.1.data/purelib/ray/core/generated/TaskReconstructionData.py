# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskReconstructionData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskReconstructionData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskReconstructionData()
        x.Init(buf, n + offset)
        return x

    # TaskReconstructionData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskReconstructionData
    def NumReconstructions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskReconstructionData
    def NodeManagerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TaskReconstructionDataStart(builder): builder.StartObject(2)
def TaskReconstructionDataAddNumReconstructions(builder, numReconstructions): builder.PrependInt32Slot(0, numReconstructions, 0)
def TaskReconstructionDataAddNodeManagerId(builder, nodeManagerId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(nodeManagerId), 0)
def TaskReconstructionDataEnd(builder): return builder.EndObject()
