# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ActorTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsActorTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ActorTableData()
        x.Init(buf, n + offset)
        return x

    # ActorTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ActorTableData
    def ActorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorTableData
    def ActorCreationDummyObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorTableData
    def DriverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorTableData
    def NodeManagerId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ActorTableData
    def State(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ActorTableData
    def MaxReconstructions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ActorTableData
    def RemainingReconstructions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ActorTableDataStart(builder): builder.StartObject(7)
def ActorTableDataAddActorId(builder, actorId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(actorId), 0)
def ActorTableDataAddActorCreationDummyObjectId(builder, actorCreationDummyObjectId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(actorCreationDummyObjectId), 0)
def ActorTableDataAddDriverId(builder, driverId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(driverId), 0)
def ActorTableDataAddNodeManagerId(builder, nodeManagerId): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(nodeManagerId), 0)
def ActorTableDataAddState(builder, state): builder.PrependInt32Slot(4, state, 0)
def ActorTableDataAddMaxReconstructions(builder, maxReconstructions): builder.PrependInt32Slot(5, maxReconstructions, 0)
def ActorTableDataAddRemainingReconstructions(builder, remainingReconstructions): builder.PrependInt32Slot(6, remainingReconstructions, 0)
def ActorTableDataEnd(builder): return builder.EndObject()
