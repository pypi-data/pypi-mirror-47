# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class TaskInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTaskInfo(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TaskInfo()
        x.Init(buf, n + offset)
        return x

    # TaskInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TaskInfo
    def DriverId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def TaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def ParentTaskId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def ParentCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskInfo
    def ActorCreationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def ActorCreationDummyObjectId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def MaxActorReconstructions(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskInfo
    def ActorId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def ActorHandleId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def ActorCounter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskInfo
    def NewActorHandles(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TaskInfo
    def Args(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Arg import Arg
            obj = Arg()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskInfo
    def ArgsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskInfo
    def NumReturns(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskInfo
    def RequiredResources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ResourcePair import ResourcePair
            obj = ResourcePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskInfo
    def RequiredResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskInfo
    def RequiredPlacementResources(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ResourcePair import ResourcePair
            obj = ResourcePair()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TaskInfo
    def RequiredPlacementResourcesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TaskInfo
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TaskInfo
    def FunctionDescriptor(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TaskInfo
    def FunctionDescriptorLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def TaskInfoStart(builder): builder.StartObject(17)
def TaskInfoAddDriverId(builder, driverId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(driverId), 0)
def TaskInfoAddTaskId(builder, taskId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(taskId), 0)
def TaskInfoAddParentTaskId(builder, parentTaskId): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(parentTaskId), 0)
def TaskInfoAddParentCounter(builder, parentCounter): builder.PrependInt32Slot(3, parentCounter, 0)
def TaskInfoAddActorCreationId(builder, actorCreationId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(actorCreationId), 0)
def TaskInfoAddActorCreationDummyObjectId(builder, actorCreationDummyObjectId): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(actorCreationDummyObjectId), 0)
def TaskInfoAddMaxActorReconstructions(builder, maxActorReconstructions): builder.PrependInt32Slot(6, maxActorReconstructions, 0)
def TaskInfoAddActorId(builder, actorId): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(actorId), 0)
def TaskInfoAddActorHandleId(builder, actorHandleId): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(actorHandleId), 0)
def TaskInfoAddActorCounter(builder, actorCounter): builder.PrependInt32Slot(9, actorCounter, 0)
def TaskInfoAddNewActorHandles(builder, newActorHandles): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(newActorHandles), 0)
def TaskInfoAddArgs(builder, args): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(args), 0)
def TaskInfoStartArgsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskInfoAddNumReturns(builder, numReturns): builder.PrependInt32Slot(12, numReturns, 0)
def TaskInfoAddRequiredResources(builder, requiredResources): builder.PrependUOffsetTRelativeSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(requiredResources), 0)
def TaskInfoStartRequiredResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskInfoAddRequiredPlacementResources(builder, requiredPlacementResources): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(requiredPlacementResources), 0)
def TaskInfoStartRequiredPlacementResourcesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskInfoAddLanguage(builder, language): builder.PrependInt32Slot(15, language, 0)
def TaskInfoAddFunctionDescriptor(builder, functionDescriptor): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(functionDescriptor), 0)
def TaskInfoStartFunctionDescriptorVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TaskInfoEnd(builder): return builder.EndObject()
