# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class HeartbeatTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsHeartbeatTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = HeartbeatTableData()
        x.Init(buf, n + offset)
        return x

    # HeartbeatTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # HeartbeatTableData
    def ClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # HeartbeatTableData
    def ResourcesAvailableLabel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # HeartbeatTableData
    def ResourcesAvailableLabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeartbeatTableData
    def ResourcesAvailableCapacity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # HeartbeatTableData
    def ResourcesAvailableCapacityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # HeartbeatTableData
    def ResourcesAvailableCapacityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeartbeatTableData
    def ResourcesTotalLabel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # HeartbeatTableData
    def ResourcesTotalLabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeartbeatTableData
    def ResourcesTotalCapacity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # HeartbeatTableData
    def ResourcesTotalCapacityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # HeartbeatTableData
    def ResourcesTotalCapacityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeartbeatTableData
    def ResourceLoadLabel(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # HeartbeatTableData
    def ResourceLoadLabelLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # HeartbeatTableData
    def ResourceLoadCapacity(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # HeartbeatTableData
    def ResourceLoadCapacityAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # HeartbeatTableData
    def ResourceLoadCapacityLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def HeartbeatTableDataStart(builder): builder.StartObject(7)
def HeartbeatTableDataAddClientId(builder, clientId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientId), 0)
def HeartbeatTableDataAddResourcesAvailableLabel(builder, resourcesAvailableLabel): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesAvailableLabel), 0)
def HeartbeatTableDataStartResourcesAvailableLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HeartbeatTableDataAddResourcesAvailableCapacity(builder, resourcesAvailableCapacity): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesAvailableCapacity), 0)
def HeartbeatTableDataStartResourcesAvailableCapacityVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def HeartbeatTableDataAddResourcesTotalLabel(builder, resourcesTotalLabel): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesTotalLabel), 0)
def HeartbeatTableDataStartResourcesTotalLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HeartbeatTableDataAddResourcesTotalCapacity(builder, resourcesTotalCapacity): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(resourcesTotalCapacity), 0)
def HeartbeatTableDataStartResourcesTotalCapacityVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def HeartbeatTableDataAddResourceLoadLabel(builder, resourceLoadLabel): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(resourceLoadLabel), 0)
def HeartbeatTableDataStartResourceLoadLabelVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def HeartbeatTableDataAddResourceLoadCapacity(builder, resourceLoadCapacity): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(resourceLoadCapacity), 0)
def HeartbeatTableDataStartResourceLoadCapacityVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def HeartbeatTableDataEnd(builder): return builder.EndObject()
