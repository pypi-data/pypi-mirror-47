# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class FunctionTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFunctionTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FunctionTableData()
        x.Init(buf, n + offset)
        return x

    # FunctionTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FunctionTableData
    def Language(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # FunctionTableData
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # FunctionTableData
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def FunctionTableDataStart(builder): builder.StartObject(3)
def FunctionTableDataAddLanguage(builder, language): builder.PrependInt32Slot(0, language, 0)
def FunctionTableDataAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def FunctionTableDataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def FunctionTableDataEnd(builder): return builder.EndObject()
