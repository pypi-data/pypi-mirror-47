# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers

class ObjectTableData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsObjectTableData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ObjectTableData()
        x.Init(buf, n + offset)
        return x

    # ObjectTableData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ObjectTableData
    def ObjectSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ObjectTableData
    def Manager(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ObjectTableDataStart(builder): builder.StartObject(2)
def ObjectTableDataAddObjectSize(builder, objectSize): builder.PrependInt64Slot(0, objectSize, 0)
def ObjectTableDataAddManager(builder, manager): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(manager), 0)
def ObjectTableDataEnd(builder): return builder.EndObject()
