# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from hydro_serving_grpc.manager import serving_pb2 as hydro__serving__grpc_dot_manager_dot_serving__pb2


class ServingDiscoveryStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.watch = channel.stream_stream(
        '/hydrosphere.discovery.ServingDiscovery/watch',
        request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
        response_deserializer=hydro__serving__grpc_dot_manager_dot_serving__pb2.WatchResp.FromString,
        )


class ServingDiscoveryServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def watch(self, request_iterator, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServingDiscoveryServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'watch': grpc.stream_stream_rpc_method_handler(
          servicer.watch,
          request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
          response_serializer=hydro__serving__grpc_dot_manager_dot_serving__pb2.WatchResp.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'hydrosphere.discovery.ServingDiscovery', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
