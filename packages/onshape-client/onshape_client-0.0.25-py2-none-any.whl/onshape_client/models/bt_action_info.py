# coding: utf-8

"""
    Onshape REST API

    The Onshape REST API consumed by all clients.  # noqa: E501

    OpenAPI spec version: 1.93
    Contact: api-support@onshape.zendesk.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class BTActionInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'method': 'str',
        'tooltip': 'str',
        'is_approver_action': 'bool',
        'show_if_approvers': 'bool',
        'show_if_no_approvers': 'bool',
        'always_allow': 'bool',
        'label': 'str',
        'action': 'str',
        'ui_hint': 'str',
        'is_admin_override': 'bool'
    }

    attribute_map = {
        'method': 'method',
        'tooltip': 'tooltip',
        'is_approver_action': 'isApproverAction',
        'show_if_approvers': 'showIfApprovers',
        'show_if_no_approvers': 'showIfNoApprovers',
        'always_allow': 'alwaysAllow',
        'label': 'label',
        'action': 'action',
        'ui_hint': 'uiHint',
        'is_admin_override': 'isAdminOverride'
    }

    def __init__(self, method=None, tooltip=None, is_approver_action=None, show_if_approvers=None, show_if_no_approvers=None, always_allow=None, label=None, action=None, ui_hint=None, is_admin_override=None):  # noqa: E501
        """BTActionInfo - a model defined in OpenAPI"""  # noqa: E501

        self._method = None
        self._tooltip = None
        self._is_approver_action = None
        self._show_if_approvers = None
        self._show_if_no_approvers = None
        self._always_allow = None
        self._label = None
        self._action = None
        self._ui_hint = None
        self._is_admin_override = None
        self.discriminator = None

        if method is not None:
            self.method = method
        if tooltip is not None:
            self.tooltip = tooltip
        if is_approver_action is not None:
            self.is_approver_action = is_approver_action
        if show_if_approvers is not None:
            self.show_if_approvers = show_if_approvers
        if show_if_no_approvers is not None:
            self.show_if_no_approvers = show_if_no_approvers
        if always_allow is not None:
            self.always_allow = always_allow
        if label is not None:
            self.label = label
        if action is not None:
            self.action = action
        if ui_hint is not None:
            self.ui_hint = ui_hint
        if is_admin_override is not None:
            self.is_admin_override = is_admin_override

    @property
    def method(self):
        """Gets the method of this BTActionInfo.  # noqa: E501


        :return: The method of this BTActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this BTActionInfo.


        :param method: The method of this BTActionInfo.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def tooltip(self):
        """Gets the tooltip of this BTActionInfo.  # noqa: E501


        :return: The tooltip of this BTActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._tooltip

    @tooltip.setter
    def tooltip(self, tooltip):
        """Sets the tooltip of this BTActionInfo.


        :param tooltip: The tooltip of this BTActionInfo.  # noqa: E501
        :type: str
        """

        self._tooltip = tooltip

    @property
    def is_approver_action(self):
        """Gets the is_approver_action of this BTActionInfo.  # noqa: E501


        :return: The is_approver_action of this BTActionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_approver_action

    @is_approver_action.setter
    def is_approver_action(self, is_approver_action):
        """Sets the is_approver_action of this BTActionInfo.


        :param is_approver_action: The is_approver_action of this BTActionInfo.  # noqa: E501
        :type: bool
        """

        self._is_approver_action = is_approver_action

    @property
    def show_if_approvers(self):
        """Gets the show_if_approvers of this BTActionInfo.  # noqa: E501


        :return: The show_if_approvers of this BTActionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._show_if_approvers

    @show_if_approvers.setter
    def show_if_approvers(self, show_if_approvers):
        """Sets the show_if_approvers of this BTActionInfo.


        :param show_if_approvers: The show_if_approvers of this BTActionInfo.  # noqa: E501
        :type: bool
        """

        self._show_if_approvers = show_if_approvers

    @property
    def show_if_no_approvers(self):
        """Gets the show_if_no_approvers of this BTActionInfo.  # noqa: E501


        :return: The show_if_no_approvers of this BTActionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._show_if_no_approvers

    @show_if_no_approvers.setter
    def show_if_no_approvers(self, show_if_no_approvers):
        """Sets the show_if_no_approvers of this BTActionInfo.


        :param show_if_no_approvers: The show_if_no_approvers of this BTActionInfo.  # noqa: E501
        :type: bool
        """

        self._show_if_no_approvers = show_if_no_approvers

    @property
    def always_allow(self):
        """Gets the always_allow of this BTActionInfo.  # noqa: E501


        :return: The always_allow of this BTActionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._always_allow

    @always_allow.setter
    def always_allow(self, always_allow):
        """Sets the always_allow of this BTActionInfo.


        :param always_allow: The always_allow of this BTActionInfo.  # noqa: E501
        :type: bool
        """

        self._always_allow = always_allow

    @property
    def label(self):
        """Gets the label of this BTActionInfo.  # noqa: E501


        :return: The label of this BTActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BTActionInfo.


        :param label: The label of this BTActionInfo.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def action(self):
        """Gets the action of this BTActionInfo.  # noqa: E501


        :return: The action of this BTActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this BTActionInfo.


        :param action: The action of this BTActionInfo.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def ui_hint(self):
        """Gets the ui_hint of this BTActionInfo.  # noqa: E501


        :return: The ui_hint of this BTActionInfo.  # noqa: E501
        :rtype: str
        """
        return self._ui_hint

    @ui_hint.setter
    def ui_hint(self, ui_hint):
        """Sets the ui_hint of this BTActionInfo.


        :param ui_hint: The ui_hint of this BTActionInfo.  # noqa: E501
        :type: str
        """

        self._ui_hint = ui_hint

    @property
    def is_admin_override(self):
        """Gets the is_admin_override of this BTActionInfo.  # noqa: E501


        :return: The is_admin_override of this BTActionInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin_override

    @is_admin_override.setter
    def is_admin_override(self, is_admin_override):
        """Sets the is_admin_override of this BTActionInfo.


        :param is_admin_override: The is_admin_override of this BTActionInfo.  # noqa: E501
        :type: bool
        """

        self._is_admin_override = is_admin_override

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BTActionInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
