.. _plasmapy-install:

*******************
Installing PlasmaPy
*******************

.. note::

   If you would like to contribute to PlasmaPy, please refer to the
   instructions on :ref:`installing PlasmaPy for development
   <install-plasmapy-dev>`.

.. _install-requirements:

Requirements
============

PlasmaPy requires Python version 3.6 or newer, and is not compatible
with Python 2.7.  PlasmaPy requires the following packages for
installation:

- `NumPy <http://www.numpy.org/>`_ 1.13 or newer
- `SciPy <https://www.scipy.org/>`_ 0.19 or newer
- `Astropy <http://www.astropy.org/>`_ 2.0 or newer
- `Cython <http://cython.org/>`_ 0.27.2 or newer
- `colorama <https://pypi.org/project/colorama/>`_ 0.3 or newer

PlasmaPy also uses the following optional dependencies:

- `matplotlib <https://matplotlib.org/>`_ 2.0 or newer
- `h5py <https://www.h5py.org/>`_ 2.8 or newer
- `mpmath <http://mpmath.org/>`_ 1.0 or newer
- `lmfit <https://lmfit.github.io/lmfit-py/>`_ 0.9.7 or newer

PlasmaPy can be installed with all of the optional dependencies via
`pip install plasmapy[optional]`.

.. _create-conda-env:

Creating a conda environment
============================

We highly recommend installing PlasmaPy from a Python environment
created using `conda <https://conda.io/docs/>`_.  Conda allows us to
create and switch between Python environments that are isolated from
each other and the system installation (in contrast to `this xkcd
<https://xkcd.com/1987/>`_), while also simplifying the distribution of
binary and compiled dependencies.

After `installing conda <https://conda.io/docs/user-guide/install/>`_,
create a PlasmaPy environment by running:

.. code:: bash

    conda create -n plasmapy python=3.7 numpy scipy astropy matplotlib cython h5py lmfit mpmath colorama -c conda-forge

To activate this environment, run:

.. code:: bash

   conda activate plasmapy

Once the environment is activated, then you may proceed with
installation.

Installation
============

.. note::

   We recommend that new users :ref:`create a conda environment
   <create-conda-env>`.

.. _install-pip:

Installation with pip
---------------------

To install the most recent release of PlasmaPy `on PyPI`_ with `pip
<https://pip.pypa.io/en/stable/>`_ into an existing Python environment
alongside all optional dependencies, run

.. code:: bash

   pip install plasmapy[optional]

To install a minimal set of dependencies (which does not guarantee that
everything will run and may result in `ImportError`s, skip `[all]` and run
simply

.. code:: bash

    pip install plasmapy

.. _install-conda:

Installation with conda
-----------------------

We’re not on conda just yet, but we’re working on it!

Conda installs all dependencies by default.

Building and installing from source code
========================================

Prerequisites
-------------

Building PlasmaPy from source requires a C compiler such as
`gcc <https://gcc.gnu.org/>`_ so that code generated by
`Cython <http://cython.org/>`_ may be compiled.

Obtaining source code
---------------------

Stable release
^^^^^^^^^^^^^^

The source code for the most recent stable release of PlasmaPy can be
`downloaded from PyPI <https://pypi.org/project/plasmapy/>`_.

Development version on GitHub
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If you have `git <https://git-scm.com/>`_ installed on your computer,
you may clone `PlasmaPy's GitHub repository`_ and access source code
from the most recent development version by running:

.. code:: bash

   git clone https://github.com/PlasmaPy/PlasmaPy.git

The above command uses HTTPS, which is the default protocol and more
straightforward to set up.  If you have `set up an SSH key`_, then an
equivalent and more secure command is:

.. code:: bash

   git clone git@github.com:PlasmaPy/PlasmaPy.git

If you do not have git installed on your computer, then you may download
the most recent source code from `PlasmaPy's GitHub repository`_ by
selecting "Clone or Download", which will give you the option to
download a zip file.

.. note::

   The :ref:`contributing-to-plasmapy` guide has instructions on how to
   fork a repository so that you may make pull requests.

Building and installing
-----------------------

In the top level directory, run

.. code:: bash

   python setup.py install

or

.. code:: bash

   pip install .

Testing a source code build
---------------------------

Testing PlasmaPy requires:

- `pytest <https://docs.pytest.org/>`_

In the top level directory, run

.. code:: bash

   python setup.py test

Building documentation
----------------------

Building and testing PlasmaPy documentation requires the following
packages:

- `Sphinx <http://www.sphinx-doc.org/>`_
- `sphinx-gallery <https://sphinx-gallery.readthedocs.io/>`_
- `sphinx_rtd_theme <https://sphinx-rtd-theme.readthedocs.io/>`_
- `sphinx-automodapi <http://sphinx-automodapi.readthedocs.io/>`_
- `pillow <https://pillow.readthedocs.io/>`_
- `numpydoc <http://numpydoc.readthedocs.io/>`_

To build the documentation, run the following command in the top level
directory of the repository:

.. code:: bash

   python setup.py build_docs

The HTML files built by this command will be placed in the
``docs/_build/html`` subdirectory and can be read using a web browser.

.. _PlasmaPy's GitHub repository: https://github.com/PlasmaPy/PlasmaPy
.. _set up an SSH key: https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/
.. _on PyPI: https://pypi.org/project/plasmapy/
