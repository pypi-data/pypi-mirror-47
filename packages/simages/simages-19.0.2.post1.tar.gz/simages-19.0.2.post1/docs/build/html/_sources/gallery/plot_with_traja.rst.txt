.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_gallery_plot_with_traja.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_with_traja.py:


Plotting with simages
-------------------
`simages  <https://simages.readthedocs.io>`_ is a Python
library providing a selection of easy-to-use spatial visualizations. It is
built on top of pandas and is designed to work with a range of libraries.
For more details on the library refer to its documentation.
First we'll load in data using simages.

.. code-block:: python

    import simages

    df = simages.TrajaDataFrame({"x": [0, 1, 2, 3, 4], "y": [1, 3, 2, 4, 5]})




.. code-block:: pytb

    Traceback (most recent call last):
      File "/Users/justinshenk/anaconda3/lib/python3.7/site-packages/sphinx_gallery/gen_rst.py", line 394, in _memory_usage
        out = func()
      File "/Users/justinshenk/anaconda3/lib/python3.7/site-packages/sphinx_gallery/gen_rst.py", line 382, in __call__
        exec(self.code, self.globals)
      File "/Users/justinshenk/Projects/simages/docs/examples/plot_with_traja.py", line 12, in <module>
        df = simages.TrajaDataFrame({"x": [0, 1, 2, 3, 4], "y": [1, 3, 2, 4, 5]})
    AttributeError: module 'simages' has no attribute 'TrajaDataFrame'




Plotting with Traja
===================

We start out by plotting a basic sime series trajectory using the ``simages``
accessor and :meth:`~simages.main.TrajaAccessor.plot`` method.


.. code-block:: python

    df.simages.plot()


Generate Random Walks
=====================

Also, random walks can be generated using :meth:`~simages.utils.generate`.


.. code-block:: python

    df = simages.generate(n=1000, fps=30)
    df.simages.plot()


Traja can re-scale data with any units


.. code-block:: python


    df.simages.scale(100)
    df.spatial_units = "cm"
    df.simages.plot()


Rediscretize step lengths
=========================

:meth:`~simages.utils.rediscretize` method allows resampling the trajectory
into an arbitrary step length ``R``.
.. note::

  This can also be achieved using `simages.utils.rediscretize(trj, step_length)`


.. code-block:: python

    rt = df.simages.rediscretize(R=5000)
    rt.simages.plot()


Resample step time
=========================

:meth:`~simages.utils.resample_time` method allows resampling the trajectory by
time into `step_time`.
.. note::

  This can also be achieved using `simages.utils.resample_time(trj, step_time)`


.. code-block:: python

    resampled = df.simages.resample_time(step_time="2s")
    resampled.simages.plot()


Calculate derivatives
=====================

Derivatives can be calculated with ``derivatives`` and histograms can be
plotted using pandas built-in :meth:`~pandas.DataFrame.hist>` method.


.. code-block:: python

    derivs = df.simages.get_derivatives()
    speed = derivs["speed"]
    speed.hist()


Again, these are just some of the plots you can make with Traja. There are
several other possibilities not covered in this brief introduction. For more
examples, refer to the
`Gallery <https://simages.readthedocs.io/en/latest/gallery/index.html>`_ in the
simages  documentation.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.051 seconds)


.. _sphx_glr_download_gallery_plot_with_traja.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_with_traja.py <plot_with_traja.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_with_traja.ipynb <plot_with_traja.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
