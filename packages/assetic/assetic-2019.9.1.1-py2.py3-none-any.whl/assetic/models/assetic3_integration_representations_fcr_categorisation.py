# coding: utf-8

"""
    Assetic Integration API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

##from assetic.models.assetic3_integration_representations_cause_code import Assetic3IntegrationRepresentationsCauseCode  # noqa: F401,E501
##from assetic.models.assetic3_integration_representations_failure_code import Assetic3IntegrationRepresentationsFailureCode  # noqa: F401,E501
##from assetic.models.assetic3_integration_representations_remedy_code import Assetic3IntegrationRepresentationsRemedyCode  # noqa: F401,E501
##from assetic.models.web_api_hal_embedded_resource import WebApiHalEmbeddedResource  # noqa: F401,E501
##from assetic.models.web_api_hal_link import WebApiHalLink  # noqa: F401,E501


class Assetic3IntegrationRepresentationsFCRCategorisation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'description': 'str',
        'asset_types': 'list[str]',
        'maintenance_types': 'list[str]',
        'cause_codes': 'list[Assetic3IntegrationRepresentationsCauseCode]',
        'failure_codes': 'list[Assetic3IntegrationRepresentationsFailureCode]',
        'remedy_codes': 'list[Assetic3IntegrationRepresentationsRemedyCode]',
        'links': 'list[WebApiHalLink]',
        'embedded': 'list[WebApiHalEmbeddedResource]'
    }

    attribute_map = {
        'id': 'Id',
        'description': 'Description',
        'asset_types': 'AssetTypes',
        'maintenance_types': 'MaintenanceTypes',
        'cause_codes': 'CauseCodes',
        'failure_codes': 'FailureCodes',
        'remedy_codes': 'RemedyCodes',
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, id=None, description=None, asset_types=None, maintenance_types=None, cause_codes=None, failure_codes=None, remedy_codes=None, links=None, embedded=None):  # noqa: E501
        """Assetic3IntegrationRepresentationsFCRCategorisation - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._description = None
        self._asset_types = None
        self._maintenance_types = None
        self._cause_codes = None
        self._failure_codes = None
        self._remedy_codes = None
        self._links = None
        self._embedded = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if description is not None:
            self.description = description
        if asset_types is not None:
            self.asset_types = asset_types
        if maintenance_types is not None:
            self.maintenance_types = maintenance_types
        if cause_codes is not None:
            self.cause_codes = cause_codes
        if failure_codes is not None:
            self.failure_codes = failure_codes
        if remedy_codes is not None:
            self.remedy_codes = remedy_codes
        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def id(self):
        """Gets the id of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The id of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param id: The id of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def description(self):
        """Gets the description of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The description of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param description: The description of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def asset_types(self):
        """Gets the asset_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The asset_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[str]
        """
        return self._asset_types

    @asset_types.setter
    def asset_types(self, asset_types):
        """Sets the asset_types of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param asset_types: The asset_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[str]
        """

        self._asset_types = asset_types

    @property
    def maintenance_types(self):
        """Gets the maintenance_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The maintenance_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[str]
        """
        return self._maintenance_types

    @maintenance_types.setter
    def maintenance_types(self, maintenance_types):
        """Sets the maintenance_types of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param maintenance_types: The maintenance_types of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[str]
        """

        self._maintenance_types = maintenance_types

    @property
    def cause_codes(self):
        """Gets the cause_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The cause_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[Assetic3IntegrationRepresentationsCauseCode]
        """
        return self._cause_codes

    @cause_codes.setter
    def cause_codes(self, cause_codes):
        """Sets the cause_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param cause_codes: The cause_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[Assetic3IntegrationRepresentationsCauseCode]
        """

        self._cause_codes = cause_codes

    @property
    def failure_codes(self):
        """Gets the failure_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The failure_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[Assetic3IntegrationRepresentationsFailureCode]
        """
        return self._failure_codes

    @failure_codes.setter
    def failure_codes(self, failure_codes):
        """Sets the failure_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param failure_codes: The failure_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[Assetic3IntegrationRepresentationsFailureCode]
        """

        self._failure_codes = failure_codes

    @property
    def remedy_codes(self):
        """Gets the remedy_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The remedy_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[Assetic3IntegrationRepresentationsRemedyCode]
        """
        return self._remedy_codes

    @remedy_codes.setter
    def remedy_codes(self, remedy_codes):
        """Sets the remedy_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param remedy_codes: The remedy_codes of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[Assetic3IntegrationRepresentationsRemedyCode]
        """

        self._remedy_codes = remedy_codes

    @property
    def links(self):
        """Gets the links of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The links of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[WebApiHalLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param links: The links of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[WebApiHalLink]
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501


        :return: The embedded of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :rtype: list[WebApiHalEmbeddedResource]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Assetic3IntegrationRepresentationsFCRCategorisation.


        :param embedded: The embedded of this Assetic3IntegrationRepresentationsFCRCategorisation.  # noqa: E501
        :type: list[WebApiHalEmbeddedResource]
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Assetic3IntegrationRepresentationsFCRCategorisation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Assetic3IntegrationRepresentationsFCRCategorisation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
