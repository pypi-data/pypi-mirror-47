# Stubs for pytypegen.core (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from dataclasses import dataclass
import json
from dataclasses import Field
from django.http import JsonResponse as DjangoJsonResponse
from django.views import View
from enum import Enum
from typing import Any, Callable, ClassVar, Dict, List, Type, TypeVar, Union

T = TypeVar('T', bound='Contract')

class Undefined: ...

class JsonResponse(DjangoJsonResponse):
    data: Any = ...
    def __init__(self, data: Any, *args: Any, **kwargs: Any) -> None: ...

class InstructorView(View):
    permission_classes: list = ...
    routes: Dict[str, Type[RequestResolver]]
    def get(self, request: Any, endpoint: str=...) -> JsonResponse: ...
    def post(self, request: Any, endpoint: str, *args: Any, **kwargs: Any) -> JsonResponse: ...

class Verbs(Enum):
    DELETE: Any = ...
    MERGE_APPEND: Any = ...
    MERGE_PREPEND: Any = ...
    OVERWRITE: Any = ...

def is_subclass(obj: Any, cls: Any): ...

@dataclass
class Contract:
    def asdict(self) -> dict: ...
    @classmethod
    def get_fields(cls: Type[Contract]) -> Dict[str, Field]: ...
    @classmethod
    def to_typescript_interface(cls: Type[Contract]) -> str: ...
    @classmethod
    def load_from_dict(cls: Type[T], data: dict) -> T: ...
    def __init__(self) -> None: ...

@dataclass
class Operation(Contract):
    verb: Verbs
    entity_type: Enum
    target_value: Any
    @classmethod
    def MERGE_APPEND(cls: Any, entity_type: Enum, target_value: Any) -> Operation: ...
    @classmethod
    def MERGE_PREPEND(cls: Any, entity_type: Enum, target_value: Any) -> Operation: ...
    @classmethod
    def DELETE(cls: Any, entity_type: Enum, target_value: Any) -> Operation: ...
    @classmethod
    def OVERWRITE(cls: Any, entity_type: Enum, target_value: Any) -> Operation: ...
    def __init__(self, verb: Any, entity_type: Any, target_value: Any) -> None: ...

class InstructionEncoder(json.JSONEncoder):
    def default(self, obj: Any) -> Any: ...

@dataclass
class Instruction(Contract):
    operations: List[Operation]
    errors: Any = ...
    redirect: str = ...
    def serialize(self) -> dict: ...
    def __init__(self, operations: Any, errors: Any, redirect: Any) -> None: ...

class RequestResolver:
    resolve: Callable
    pre_action: ClassVar[str] = ...
    callback: ClassVar[str] = ...
    use_jwt_authentication: ClassVar[bool] = ...
    request: Any = ...
    def __init__(self, request: Any, data: dict) -> None: ...
    data: Any = ...
    def clean_request_data(self) -> None: ...
    def __init_subclass__(cls, **kwargs: Any) -> None: ...
    def authenticate(self) -> None: ...

class EntityTypes(Enum):
    jwt_auth_token: Any = ...

def is_field_required(field: Field) -> bool: ...

TYPE_MAP: Any

def python_type_to_typescript(python_type: type) -> str: ...
def field_to_typescript(field: Field) -> str: ...

@dataclass
class ReduxAction(Contract):
    name: str
    contract: Type[Contract]
    pre_action: str = ...
    callback: str = ...
    def to_typescript_function(self): ...
    def __init__(self, name: Any, contract: Any, pre_action: Any, callback: Any) -> None: ...

def contract_to_redux_action_creator(contract: Type[Contract], function_name: str, *, callback: Any=..., pre_action: Any=...) -> str: ...
def enum_to_typescript(enum_class: Type[Enum]) -> str: ...
def contracts_to_typescript(contracts: List[Union[Type[Contract], Type[Enum]]]) -> str: ...
