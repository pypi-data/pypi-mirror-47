_P5_INSTANCE = None

{% for f_name in function_names %}
def {{ f_name }}(*args):
    return _P5_INSTANCE.{{ f_name }}(*args)
{% endfor %}

{% for v_name in variables_names %}{{ v_name }} = None
{% endfor %}
def pre_draw(p5_instance, draw_func):
    """
    We need to run this before the actual draw to insert and update p5 env variables
    """
    global {% for v_name in variables_names %}{{ v_name }}{% if not loop.last %}, {% endif %}{% endfor %}

    {% for v_name in variables_names %}{{ v_name }} = p5_instance.{{ v_name }}
    {% endfor %}
    return draw_func()


def global_p5_injection(p5_sketch):
    """
    Injects the p5js's skecth instance as a global variable to setup and draw functions
    """

    def decorator(f):

        def wrapper():
            global _P5_INSTANCE
            _P5_INSTANCE = p5_sketch
            return pre_draw(_P5_INSTANCE, f)
        return wrapper

    return decorator


def start_p5(setup_func, draw_func):
    """
    This is the entrypoint function. It accepts 2 parameters:

    - setup_func: a Python setup callable
    - draw_func: a Python draw callable

    This method gets the p5js's sketch instance and injects them
    """

    def sketch_setup(p5_sketch):
        p5_sketch.setup = global_p5_injection(p5_sketch)(setup_func)
        p5_sketch.draw = global_p5_injection(p5_sketch)(draw_func)

    return __new__ (p5(sketch_setup, 'sketch-holder'))
