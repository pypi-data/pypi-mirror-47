# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkSingleImageCostFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSingleImageCostFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkSingleImageCostFunctionPython
            return _itkSingleImageCostFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSingleImageCostFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSingleImageCostFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSingleImageCostFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCostFunctionsPython
import vnl_least_squares_functionPython
import vnl_vectorPython
import stdcomplexPython
import pyBasePython
import vnl_matrixPython
import itkArray2DPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import itkOptimizerParametersPython
import itkArrayPython
import ITKCommonBasePython
import itkCostFunctionPython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkImageRegionPython
import itkIndexPython
import itkOffsetPython
import itkSizePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkSymmetricSecondRankTensorPython
import itkRGBAPixelPython
import itkInterpolateImageFunctionPython
import itkImageFunctionBasePython
import itkFunctionBasePython
import itkContinuousIndexPython

def itkSingleImageCostFunctionIF3_New():
  return itkSingleImageCostFunctionIF3.New()


def itkSingleImageCostFunctionIUS3_New():
  return itkSingleImageCostFunctionIUS3.New()


def itkSingleImageCostFunctionIUC3_New():
  return itkSingleImageCostFunctionIUC3.New()


def itkSingleImageCostFunctionISS3_New():
  return itkSingleImageCostFunctionISS3.New()


def itkSingleImageCostFunctionIF2_New():
  return itkSingleImageCostFunctionIF2.New()


def itkSingleImageCostFunctionIUS2_New():
  return itkSingleImageCostFunctionIUS2.New()


def itkSingleImageCostFunctionIUC2_New():
  return itkSingleImageCostFunctionIUC2.New()


def itkSingleImageCostFunctionISS2_New():
  return itkSingleImageCostFunctionISS2.New()

class itkSingleImageCostFunctionIF2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIF2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIF2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIF2 self) -> itkSingleImageCostFunctionIF2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIF2 self, itkInterpolateImageFunctionIF2D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIF2 self) -> itkInterpolateImageFunctionIF2D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIF2 self, itkImageF2 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIF2 self) -> itkImageF2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIF2 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIF2 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIF2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIF2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIF2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIF2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIF2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIF2

        Create a new object of the class itkSingleImageCostFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIF2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIF2.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Clone, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetInterpolator, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetInterpolator, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetImage, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetImage, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetDerivativeThreshold, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_GetDerivativeThreshold, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_Initialize, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMinimize, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_SetMaximize, None, itkSingleImageCostFunctionIF2)
itkSingleImageCostFunctionIF2_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_swigregister
itkSingleImageCostFunctionIF2_swigregister(itkSingleImageCostFunctionIF2)

def itkSingleImageCostFunctionIF2___New_orig__():
    """itkSingleImageCostFunctionIF2___New_orig__() -> itkSingleImageCostFunctionIF2_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2___New_orig__()

def itkSingleImageCostFunctionIF2_cast(obj):
    """itkSingleImageCostFunctionIF2_cast(itkLightObject obj) -> itkSingleImageCostFunctionIF2"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF2_cast(obj)

class itkSingleImageCostFunctionIF3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIF3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIF3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIF3 self) -> itkSingleImageCostFunctionIF3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIF3 self, itkInterpolateImageFunctionIF3D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIF3 self) -> itkInterpolateImageFunctionIF3D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIF3 self, itkImageF3 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIF3 self) -> itkImageF3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIF3 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIF3 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIF3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIF3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIF3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIF3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIF3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIF3

        Create a new object of the class itkSingleImageCostFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIF3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIF3.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Clone, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetInterpolator, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetInterpolator, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetImage, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetImage, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetDerivativeThreshold, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_GetDerivativeThreshold, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_Initialize, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMinimize, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_SetMaximize, None, itkSingleImageCostFunctionIF3)
itkSingleImageCostFunctionIF3_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_swigregister
itkSingleImageCostFunctionIF3_swigregister(itkSingleImageCostFunctionIF3)

def itkSingleImageCostFunctionIF3___New_orig__():
    """itkSingleImageCostFunctionIF3___New_orig__() -> itkSingleImageCostFunctionIF3_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3___New_orig__()

def itkSingleImageCostFunctionIF3_cast(obj):
    """itkSingleImageCostFunctionIF3_cast(itkLightObject obj) -> itkSingleImageCostFunctionIF3"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIF3_cast(obj)

class itkSingleImageCostFunctionISS2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionISS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionISS2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionISS2 self) -> itkSingleImageCostFunctionISS2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionISS2 self, itkInterpolateImageFunctionISS2D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionISS2 self) -> itkInterpolateImageFunctionISS2D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionISS2 self, itkImageSS2 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionISS2 self) -> itkImageSS2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionISS2 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionISS2 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionISS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionISS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionISS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionISS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionISS2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionISS2

        Create a new object of the class itkSingleImageCostFunctionISS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionISS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionISS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionISS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionISS2.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Clone, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetInterpolator, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetInterpolator, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetImage, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetImage, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetDerivativeThreshold, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_GetDerivativeThreshold, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_Initialize, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMinimize, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_SetMaximize, None, itkSingleImageCostFunctionISS2)
itkSingleImageCostFunctionISS2_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_swigregister
itkSingleImageCostFunctionISS2_swigregister(itkSingleImageCostFunctionISS2)

def itkSingleImageCostFunctionISS2___New_orig__():
    """itkSingleImageCostFunctionISS2___New_orig__() -> itkSingleImageCostFunctionISS2_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2___New_orig__()

def itkSingleImageCostFunctionISS2_cast(obj):
    """itkSingleImageCostFunctionISS2_cast(itkLightObject obj) -> itkSingleImageCostFunctionISS2"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS2_cast(obj)

class itkSingleImageCostFunctionISS3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionISS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionISS3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionISS3 self) -> itkSingleImageCostFunctionISS3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionISS3 self, itkInterpolateImageFunctionISS3D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionISS3 self) -> itkInterpolateImageFunctionISS3D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionISS3 self, itkImageSS3 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionISS3 self) -> itkImageSS3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionISS3 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionISS3 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionISS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionISS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionISS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionISS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionISS3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionISS3

        Create a new object of the class itkSingleImageCostFunctionISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionISS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionISS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionISS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionISS3.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Clone, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetInterpolator, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetInterpolator, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetImage, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetImage, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetDerivativeThreshold, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_GetDerivativeThreshold, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_Initialize, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMinimize, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_SetMaximize, None, itkSingleImageCostFunctionISS3)
itkSingleImageCostFunctionISS3_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_swigregister
itkSingleImageCostFunctionISS3_swigregister(itkSingleImageCostFunctionISS3)

def itkSingleImageCostFunctionISS3___New_orig__():
    """itkSingleImageCostFunctionISS3___New_orig__() -> itkSingleImageCostFunctionISS3_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3___New_orig__()

def itkSingleImageCostFunctionISS3_cast(obj):
    """itkSingleImageCostFunctionISS3_cast(itkLightObject obj) -> itkSingleImageCostFunctionISS3"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionISS3_cast(obj)

class itkSingleImageCostFunctionIUC2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIUC2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIUC2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIUC2 self) -> itkSingleImageCostFunctionIUC2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIUC2 self, itkInterpolateImageFunctionIUC2D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIUC2 self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIUC2 self, itkImageUC2 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIUC2 self) -> itkImageUC2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIUC2 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIUC2 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIUC2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIUC2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIUC2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUC2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIUC2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUC2

        Create a new object of the class itkSingleImageCostFunctionIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUC2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIUC2.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Clone, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetInterpolator, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetInterpolator, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetImage, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetImage, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetDerivativeThreshold, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_GetDerivativeThreshold, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_Initialize, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMinimize, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_SetMaximize, None, itkSingleImageCostFunctionIUC2)
itkSingleImageCostFunctionIUC2_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_swigregister
itkSingleImageCostFunctionIUC2_swigregister(itkSingleImageCostFunctionIUC2)

def itkSingleImageCostFunctionIUC2___New_orig__():
    """itkSingleImageCostFunctionIUC2___New_orig__() -> itkSingleImageCostFunctionIUC2_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2___New_orig__()

def itkSingleImageCostFunctionIUC2_cast(obj):
    """itkSingleImageCostFunctionIUC2_cast(itkLightObject obj) -> itkSingleImageCostFunctionIUC2"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC2_cast(obj)

class itkSingleImageCostFunctionIUC3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIUC3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIUC3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIUC3 self) -> itkSingleImageCostFunctionIUC3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIUC3 self, itkInterpolateImageFunctionIUC3D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIUC3 self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIUC3 self, itkImageUC3 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIUC3 self) -> itkImageUC3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIUC3 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIUC3 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIUC3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIUC3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIUC3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUC3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIUC3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUC3

        Create a new object of the class itkSingleImageCostFunctionIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUC3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIUC3.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Clone, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetInterpolator, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetInterpolator, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetImage, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetImage, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetDerivativeThreshold, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_GetDerivativeThreshold, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_Initialize, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMinimize, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_SetMaximize, None, itkSingleImageCostFunctionIUC3)
itkSingleImageCostFunctionIUC3_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_swigregister
itkSingleImageCostFunctionIUC3_swigregister(itkSingleImageCostFunctionIUC3)

def itkSingleImageCostFunctionIUC3___New_orig__():
    """itkSingleImageCostFunctionIUC3___New_orig__() -> itkSingleImageCostFunctionIUC3_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3___New_orig__()

def itkSingleImageCostFunctionIUC3_cast(obj):
    """itkSingleImageCostFunctionIUC3_cast(itkLightObject obj) -> itkSingleImageCostFunctionIUC3"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUC3_cast(obj)

class itkSingleImageCostFunctionIUS2(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIUS2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIUS2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIUS2 self) -> itkSingleImageCostFunctionIUS2_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIUS2 self, itkInterpolateImageFunctionIUS2D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIUS2 self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIUS2 self, itkImageUS2 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIUS2 self) -> itkImageUS2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIUS2 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIUS2 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIUS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIUS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIUS2 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUS2

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIUS2"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUS2

        Create a new object of the class itkSingleImageCostFunctionIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUS2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIUS2.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Clone, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetInterpolator, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetInterpolator, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetImage, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetImage, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetDerivativeThreshold, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_GetDerivativeThreshold, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_Initialize, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMinimize, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_SetMaximize, None, itkSingleImageCostFunctionIUS2)
itkSingleImageCostFunctionIUS2_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_swigregister
itkSingleImageCostFunctionIUS2_swigregister(itkSingleImageCostFunctionIUS2)

def itkSingleImageCostFunctionIUS2___New_orig__():
    """itkSingleImageCostFunctionIUS2___New_orig__() -> itkSingleImageCostFunctionIUS2_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2___New_orig__()

def itkSingleImageCostFunctionIUS2_cast(obj):
    """itkSingleImageCostFunctionIUS2_cast(itkLightObject obj) -> itkSingleImageCostFunctionIUS2"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS2_cast(obj)

class itkSingleImageCostFunctionIUS3(ITKCostFunctionsPython.itkSingleValuedCostFunction):
    """Proxy of C++ itkSingleImageCostFunctionIUS3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def __New_orig__():
        """__New_orig__() -> itkSingleImageCostFunctionIUS3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self):
        """Clone(itkSingleImageCostFunctionIUS3 self) -> itkSingleImageCostFunctionIUS3_Pointer"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Clone(self)


    def SetInterpolator(self, _arg):
        """SetInterpolator(itkSingleImageCostFunctionIUS3 self, itkInterpolateImageFunctionIUS3D _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetInterpolator(self, _arg)


    def GetInterpolator(self):
        """GetInterpolator(itkSingleImageCostFunctionIUS3 self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetInterpolator(self)


    def SetImage(self, _arg):
        """SetImage(itkSingleImageCostFunctionIUS3 self, itkImageUS3 _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetImage(self, _arg)


    def GetImage(self):
        """GetImage(itkSingleImageCostFunctionIUS3 self) -> itkImageUS3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetImage(self)


    def SetDerivativeThreshold(self, _arg):
        """SetDerivativeThreshold(itkSingleImageCostFunctionIUS3 self, double const _arg)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetDerivativeThreshold(self, _arg)


    def GetDerivativeThreshold(self):
        """GetDerivativeThreshold(itkSingleImageCostFunctionIUS3 self) -> double const &"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetDerivativeThreshold(self)


    def Initialize(self):
        """Initialize(itkSingleImageCostFunctionIUS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Initialize(self)


    def SetMinimize(self):
        """SetMinimize(itkSingleImageCostFunctionIUS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMinimize(self)


    def SetMaximize(self):
        """SetMaximize(itkSingleImageCostFunctionIUS3 self)"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMaximize(self)

    __swig_destroy__ = _itkSingleImageCostFunctionPython.delete_itkSingleImageCostFunctionIUS3

    def cast(obj):
        """cast(itkLightObject obj) -> itkSingleImageCostFunctionIUS3"""
        return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkSingleImageCostFunctionIUS3

        Create a new object of the class itkSingleImageCostFunctionIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSingleImageCostFunctionIUS3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkSingleImageCostFunctionIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleImageCostFunctionIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleImageCostFunctionIUS3.Clone = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Clone, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.SetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetInterpolator, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.GetInterpolator = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetInterpolator, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.SetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetImage, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.GetImage = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetImage, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.SetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetDerivativeThreshold, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.GetDerivativeThreshold = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_GetDerivativeThreshold, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.Initialize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_Initialize, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.SetMinimize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMinimize, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3.SetMaximize = new_instancemethod(_itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_SetMaximize, None, itkSingleImageCostFunctionIUS3)
itkSingleImageCostFunctionIUS3_swigregister = _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_swigregister
itkSingleImageCostFunctionIUS3_swigregister(itkSingleImageCostFunctionIUS3)

def itkSingleImageCostFunctionIUS3___New_orig__():
    """itkSingleImageCostFunctionIUS3___New_orig__() -> itkSingleImageCostFunctionIUS3_Pointer"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3___New_orig__()

def itkSingleImageCostFunctionIUS3_cast(obj):
    """itkSingleImageCostFunctionIUS3_cast(itkLightObject obj) -> itkSingleImageCostFunctionIUS3"""
    return _itkSingleImageCostFunctionPython.itkSingleImageCostFunctionIUS3_cast(obj)



