# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CellsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cells_delete_worksheet_columns(self, name, sheet_name, column_index, columns, update_reference, **kwargs):
        """
        Delete worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_columns(name, sheet_name, column_index, columns, update_reference, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param int columns: The columns. (required)
        :param bool update_reference: The update reference. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_delete_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, update_reference, **kwargs)
        else:
            (data) = self.cells_delete_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, update_reference, **kwargs)
            return data

    def cells_delete_worksheet_columns_with_http_info(self, name, sheet_name, column_index, columns, update_reference, **kwargs):
        """
        Delete worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, update_reference, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param int columns: The columns. (required)
        :param bool update_reference: The update reference. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'column_index', 'columns', 'update_reference', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_delete_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_delete_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_delete_worksheet_columns`")
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params) or (params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `cells_delete_worksheet_columns`")
        # verify the required parameter 'columns' is set
        if ('columns' not in params) or (params['columns'] is None):
            raise ValueError("Missing the required parameter `columns` when calling `cells_delete_worksheet_columns`")
        # verify the required parameter 'update_reference' is set
        if ('update_reference' not in params) or (params['update_reference'] is None):
            raise ValueError("Missing the required parameter `update_reference` when calling `cells_delete_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']

        query_params = []
        if 'columns' in params:
            query_params.append(('columns', params['columns']))
        if 'update_reference' in params:
            query_params.append(('updateReference', params['update_reference']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ColumnsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_delete_worksheet_row(self, name, sheet_name, row_index, **kwargs):
        """
        Delete worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_row(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet bame. (required)
        :param int row_index: The row index. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_delete_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
        else:
            (data) = self.cells_delete_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
            return data

    def cells_delete_worksheet_row_with_http_info(self, name, sheet_name, row_index, **kwargs):
        """
        Delete worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_row_with_http_info(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet bame. (required)
        :param int row_index: The row index. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'row_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_delete_worksheet_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_delete_worksheet_row`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_delete_worksheet_row`")
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params) or (params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `cells_delete_worksheet_row`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_delete_worksheet_rows(self, name, sheet_name, startrow, **kwargs):
        """
        Delete several worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_rows(name, sheet_name, startrow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet bame. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated.
        :param bool update_reference: Indicates if update references in other worksheets.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_delete_worksheet_rows_with_http_info(name, sheet_name, startrow, **kwargs)
        else:
            (data) = self.cells_delete_worksheet_rows_with_http_info(name, sheet_name, startrow, **kwargs)
            return data

    def cells_delete_worksheet_rows_with_http_info(self, name, sheet_name, startrow, **kwargs):
        """
        Delete several worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_delete_worksheet_rows_with_http_info(name, sheet_name, startrow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet bame. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated.
        :param bool update_reference: Indicates if update references in other worksheets.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'startrow', 'total_rows', 'update_reference', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_delete_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_delete_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_delete_worksheet_rows`")
        # verify the required parameter 'startrow' is set
        if ('startrow' not in params) or (params['startrow'] is None):
            raise ValueError("Missing the required parameter `startrow` when calling `cells_delete_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'startrow' in params:
            query_params.append(('startrow', params['startrow']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'update_reference' in params:
            query_params.append(('updateReference', params['update_reference']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_cell_html_string(self, name, sheet_name, cell_name, **kwargs):
        """
        Read cell data by cell's name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_cell_html_string(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell's  name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_cell_html_string_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_get_cell_html_string_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_get_cell_html_string_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Read cell data by cell's name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_cell_html_string_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell's  name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_cell_html_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_cell_html_string`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_cell_html_string`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_get_cell_html_string`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_cell(self, name, sheet_name, cell_or_method_name, **kwargs):
        """
        Read cell data by cell's name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cell(name, sheet_name, cell_or_method_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_or_method_name: The cell's or method name. (Method name like firstcell, endcell etc.) (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_cell_with_http_info(name, sheet_name, cell_or_method_name, **kwargs)
        else:
            (data) = self.cells_get_worksheet_cell_with_http_info(name, sheet_name, cell_or_method_name, **kwargs)
            return data

    def cells_get_worksheet_cell_with_http_info(self, name, sheet_name, cell_or_method_name, **kwargs):
        """
        Read cell data by cell's name.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cell_with_http_info(name, sheet_name, cell_or_method_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_or_method_name: The cell's or method name. (Method name like firstcell, endcell etc.) (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_or_method_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_cell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_cell`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_cell`")
        # verify the required parameter 'cell_or_method_name' is set
        if ('cell_or_method_name' not in params) or (params['cell_or_method_name'] is None):
            raise ValueError("Missing the required parameter `cell_or_method_name` when calling `cells_get_worksheet_cell`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_or_method_name' in params:
            path_params['cellOrMethodName'] = params['cell_or_method_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellOrMethodName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='object',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_cell_style(self, name, sheet_name, cell_name, **kwargs):
        """
        Read cell's style info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cell_style(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: Cell's name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: StyleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_get_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_get_worksheet_cell_style_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Read cell's style info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: Cell's name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: StyleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_cell_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_cell_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_cell_style`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_get_worksheet_cell_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StyleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_cells(self, name, sheet_name, **kwargs):
        """
        Get cells info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cells(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param int offest: Begginig offset.
        :param int count: Maximum amount of cells in the response.
        :param str folder: Document's folder name.
        :param str storage: storage name.
        :return: CellsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_cells_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_get_worksheet_cells_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_get_worksheet_cells_with_http_info(self, name, sheet_name, **kwargs):
        """
        Get cells info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_cells_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param int offest: Begginig offset.
        :param int count: Maximum amount of cells in the response.
        :param str folder: Document's folder name.
        :param str storage: storage name.
        :return: CellsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'offest', 'count', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_cells" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_cells`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_cells`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'offest' in params:
            query_params.append(('offest', params['offest']))
        if 'count' in params:
            query_params.append(('count', params['count']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CellsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_column(self, name, sheet_name, column_index, **kwargs):
        """
        Read worksheet column data by column's index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_column(name, sheet_name, column_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_column_with_http_info(name, sheet_name, column_index, **kwargs)
        else:
            (data) = self.cells_get_worksheet_column_with_http_info(name, sheet_name, column_index, **kwargs)
            return data

    def cells_get_worksheet_column_with_http_info(self, name, sheet_name, column_index, **kwargs):
        """
        Read worksheet column data by column's index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_column_with_http_info(name, sheet_name, column_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'column_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_column`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_column`")
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params) or (params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `cells_get_worksheet_column`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ColumnResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_columns(self, name, sheet_name, **kwargs):
        """
        Read worksheet columns info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_columns(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: The workdook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_columns_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_get_worksheet_columns_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_get_worksheet_columns_with_http_info(self, name, sheet_name, **kwargs):
        """
        Read worksheet columns info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_columns_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: The workdook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ColumnsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_row(self, name, sheet_name, row_index, **kwargs):
        """
        Read worksheet row data by row's index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_row(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
        else:
            (data) = self.cells_get_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
            return data

    def cells_get_worksheet_row_with_http_info(self, name, sheet_name, row_index, **kwargs):
        """
        Read worksheet row data by row's index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_row_with_http_info(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'row_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_row`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_row`")
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params) or (params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `cells_get_worksheet_row`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RowResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_get_worksheet_rows(self, name, sheet_name, **kwargs):
        """
        Read worksheet rows info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_rows(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: The workdook folder.
        :param str storage: storage name.
        :return: RowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_get_worksheet_rows_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_get_worksheet_rows_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_get_worksheet_rows_with_http_info(self, name, sheet_name, **kwargs):
        """
        Read worksheet rows info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_get_worksheet_rows_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: The workdook folder.
        :param str storage: storage name.
        :return: RowsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_get_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_get_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_get_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RowsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_cell_calculate(self, name, sheet_name, cell_name, **kwargs):
        """
        Cell calculate formula
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_cell_calculate(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str cell_name: (required)
        :param CalculationOptions options:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_cell_calculate_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_post_cell_calculate_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_post_cell_calculate_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Cell calculate formula
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_cell_calculate_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str cell_name: (required)
        :param CalculationOptions options:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'options', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_cell_calculate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_cell_calculate`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_cell_calculate`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_post_cell_calculate`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/calculate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_cell_characters(self, name, sheet_name, cell_name, **kwargs):
        """
        Set cell characters 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_cell_characters(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str cell_name: (required)
        :param list[FontSetting] options:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_cell_characters_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_post_cell_characters_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_post_cell_characters_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Set cell characters 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_cell_characters_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str cell_name: (required)
        :param list[FontSetting] options:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'options', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_cell_characters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_cell_characters`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_cell_characters`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_post_cell_characters`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'options' in params:
            body_params = params['options']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/characters', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_clear_contents(self, name, sheet_name, **kwargs):
        """
        Clear cells contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_clear_contents(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range.
        :param int start_row: The start row.
        :param int start_column: The start column.
        :param int end_row: The end row.
        :param int end_column: The end column.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_clear_contents_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_post_clear_contents_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_post_clear_contents_with_http_info(self, name, sheet_name, **kwargs):
        """
        Clear cells contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_clear_contents_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range.
        :param int start_row: The start row.
        :param int start_column: The start column.
        :param int end_row: The end row.
        :param int end_column: The end column.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'start_row', 'start_column', 'end_row', 'end_column', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_clear_contents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_clear_contents`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_clear_contents`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))
        if 'start_column' in params:
            query_params.append(('startColumn', params['start_column']))
        if 'end_row' in params:
            query_params.append(('endRow', params['end_row']))
        if 'end_column' in params:
            query_params.append(('endColumn', params['end_column']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/clearcontents', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_clear_formats(self, name, sheet_name, **kwargs):
        """
        Clear cells contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_clear_formats(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range.
        :param int start_row: The start row.
        :param int start_column: The start column.
        :param int end_row: The end row.
        :param int end_column: The end column.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_clear_formats_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_post_clear_formats_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_post_clear_formats_with_http_info(self, name, sheet_name, **kwargs):
        """
        Clear cells contents.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_clear_formats_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range.
        :param int start_row: The start row.
        :param int start_column: The start column.
        :param int end_row: The end row.
        :param int end_column: The end column.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'start_row', 'start_column', 'end_row', 'end_column', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_clear_formats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_clear_formats`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_clear_formats`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))
        if 'start_column' in params:
            query_params.append(('startColumn', params['start_column']))
        if 'end_row' in params:
            query_params.append(('endRow', params['end_row']))
        if 'end_column' in params:
            query_params.append(('endColumn', params['end_column']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/clearformats', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_column_style(self, name, sheet_name, column_index, **kwargs):
        """
        Set column style
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_column_style(name, sheet_name, column_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param Style style: Style dto
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_column_style_with_http_info(name, sheet_name, column_index, **kwargs)
        else:
            (data) = self.cells_post_column_style_with_http_info(name, sheet_name, column_index, **kwargs)
            return data

    def cells_post_column_style_with_http_info(self, name, sheet_name, column_index, **kwargs):
        """
        Set column style
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_column_style_with_http_info(name, sheet_name, column_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param Style style: Style dto
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'column_index', 'style', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_column_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_column_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_column_style`")
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params) or (params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `cells_post_column_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}/style', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_copy_cell_into_cell(self, name, dest_cell_name, sheet_name, worksheet, **kwargs):
        """
        Copy cell into cell
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_cell_into_cell(name, dest_cell_name, sheet_name, worksheet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str dest_cell_name: Destination cell name (required)
        :param str sheet_name: Destination worksheet name. (required)
        :param str worksheet: Source worksheet name. (required)
        :param str cellname: Source cell name
        :param int row: Source row
        :param int column: Source column
        :param str folder: Folder name
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_copy_cell_into_cell_with_http_info(name, dest_cell_name, sheet_name, worksheet, **kwargs)
        else:
            (data) = self.cells_post_copy_cell_into_cell_with_http_info(name, dest_cell_name, sheet_name, worksheet, **kwargs)
            return data

    def cells_post_copy_cell_into_cell_with_http_info(self, name, dest_cell_name, sheet_name, worksheet, **kwargs):
        """
        Copy cell into cell
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_cell_into_cell_with_http_info(name, dest_cell_name, sheet_name, worksheet, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str dest_cell_name: Destination cell name (required)
        :param str sheet_name: Destination worksheet name. (required)
        :param str worksheet: Source worksheet name. (required)
        :param str cellname: Source cell name
        :param int row: Source row
        :param int column: Source column
        :param str folder: Folder name
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'dest_cell_name', 'sheet_name', 'worksheet', 'cellname', 'row', 'column', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_copy_cell_into_cell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_copy_cell_into_cell`")
        # verify the required parameter 'dest_cell_name' is set
        if ('dest_cell_name' not in params) or (params['dest_cell_name'] is None):
            raise ValueError("Missing the required parameter `dest_cell_name` when calling `cells_post_copy_cell_into_cell`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_copy_cell_into_cell`")
        # verify the required parameter 'worksheet' is set
        if ('worksheet' not in params) or (params['worksheet'] is None):
            raise ValueError("Missing the required parameter `worksheet` when calling `cells_post_copy_cell_into_cell`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'dest_cell_name' in params:
            path_params['destCellName'] = params['dest_cell_name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'worksheet' in params:
            query_params.append(('worksheet', params['worksheet']))
        if 'cellname' in params:
            query_params.append(('cellname', params['cellname']))
        if 'row' in params:
            query_params.append(('row', params['row']))
        if 'column' in params:
            query_params.append(('column', params['column']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{destCellName}/copy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_copy_worksheet_columns(self, name, sheet_name, source_column_index, destination_column_index, column_number, **kwargs):
        """
        Copy worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_worksheet_columns(name, sheet_name, source_column_index, destination_column_index, column_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int source_column_index: Source column index (required)
        :param int destination_column_index: Destination column index (required)
        :param int column_number: The copied column number (required)
        :param str worksheet: The Worksheet
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_copy_worksheet_columns_with_http_info(name, sheet_name, source_column_index, destination_column_index, column_number, **kwargs)
        else:
            (data) = self.cells_post_copy_worksheet_columns_with_http_info(name, sheet_name, source_column_index, destination_column_index, column_number, **kwargs)
            return data

    def cells_post_copy_worksheet_columns_with_http_info(self, name, sheet_name, source_column_index, destination_column_index, column_number, **kwargs):
        """
        Copy worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_worksheet_columns_with_http_info(name, sheet_name, source_column_index, destination_column_index, column_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int source_column_index: Source column index (required)
        :param int destination_column_index: Destination column index (required)
        :param int column_number: The copied column number (required)
        :param str worksheet: The Worksheet
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'source_column_index', 'destination_column_index', 'column_number', 'worksheet', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_copy_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_copy_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_copy_worksheet_columns`")
        # verify the required parameter 'source_column_index' is set
        if ('source_column_index' not in params) or (params['source_column_index'] is None):
            raise ValueError("Missing the required parameter `source_column_index` when calling `cells_post_copy_worksheet_columns`")
        # verify the required parameter 'destination_column_index' is set
        if ('destination_column_index' not in params) or (params['destination_column_index'] is None):
            raise ValueError("Missing the required parameter `destination_column_index` when calling `cells_post_copy_worksheet_columns`")
        # verify the required parameter 'column_number' is set
        if ('column_number' not in params) or (params['column_number'] is None):
            raise ValueError("Missing the required parameter `column_number` when calling `cells_post_copy_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'source_column_index' in params:
            query_params.append(('sourceColumnIndex', params['source_column_index']))
        if 'destination_column_index' in params:
            query_params.append(('destinationColumnIndex', params['destination_column_index']))
        if 'column_number' in params:
            query_params.append(('columnNumber', params['column_number']))
        if 'worksheet' in params:
            query_params.append(('worksheet', params['worksheet']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/copy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_copy_worksheet_rows(self, name, sheet_name, source_row_index, destination_row_index, row_number, **kwargs):
        """
        Copy worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_worksheet_rows(name, sheet_name, source_row_index, destination_row_index, row_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int source_row_index: Source row index (required)
        :param int destination_row_index: Destination row index (required)
        :param int row_number: The copied row number (required)
        :param str worksheet: worksheet
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_copy_worksheet_rows_with_http_info(name, sheet_name, source_row_index, destination_row_index, row_number, **kwargs)
        else:
            (data) = self.cells_post_copy_worksheet_rows_with_http_info(name, sheet_name, source_row_index, destination_row_index, row_number, **kwargs)
            return data

    def cells_post_copy_worksheet_rows_with_http_info(self, name, sheet_name, source_row_index, destination_row_index, row_number, **kwargs):
        """
        Copy worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_copy_worksheet_rows_with_http_info(name, sheet_name, source_row_index, destination_row_index, row_number, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int source_row_index: Source row index (required)
        :param int destination_row_index: Destination row index (required)
        :param int row_number: The copied row number (required)
        :param str worksheet: worksheet
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'source_row_index', 'destination_row_index', 'row_number', 'worksheet', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_copy_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_copy_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_copy_worksheet_rows`")
        # verify the required parameter 'source_row_index' is set
        if ('source_row_index' not in params) or (params['source_row_index'] is None):
            raise ValueError("Missing the required parameter `source_row_index` when calling `cells_post_copy_worksheet_rows`")
        # verify the required parameter 'destination_row_index' is set
        if ('destination_row_index' not in params) or (params['destination_row_index'] is None):
            raise ValueError("Missing the required parameter `destination_row_index` when calling `cells_post_copy_worksheet_rows`")
        # verify the required parameter 'row_number' is set
        if ('row_number' not in params) or (params['row_number'] is None):
            raise ValueError("Missing the required parameter `row_number` when calling `cells_post_copy_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'source_row_index' in params:
            query_params.append(('sourceRowIndex', params['source_row_index']))
        if 'destination_row_index' in params:
            query_params.append(('destinationRowIndex', params['destination_row_index']))
        if 'row_number' in params:
            query_params.append(('rowNumber', params['row_number']))
        if 'worksheet' in params:
            query_params.append(('worksheet', params['worksheet']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/copy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_group_worksheet_columns(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Group worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_group_worksheet_columns(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first column index to be operated. (required)
        :param int last_index: The last column index to be operated. (required)
        :param bool hide: columns visible state
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_group_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
        else:
            (data) = self.cells_post_group_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
            return data

    def cells_post_group_worksheet_columns_with_http_info(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Group worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_group_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first column index to be operated. (required)
        :param int last_index: The last column index to be operated. (required)
        :param bool hide: columns visible state
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'first_index', 'last_index', 'hide', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_group_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_group_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_group_worksheet_columns`")
        # verify the required parameter 'first_index' is set
        if ('first_index' not in params) or (params['first_index'] is None):
            raise ValueError("Missing the required parameter `first_index` when calling `cells_post_group_worksheet_columns`")
        # verify the required parameter 'last_index' is set
        if ('last_index' not in params) or (params['last_index'] is None):
            raise ValueError("Missing the required parameter `last_index` when calling `cells_post_group_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'first_index' in params:
            query_params.append(('firstIndex', params['first_index']))
        if 'last_index' in params:
            query_params.append(('lastIndex', params['last_index']))
        if 'hide' in params:
            query_params.append(('hide', params['hide']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/group', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_group_worksheet_rows(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Group worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_group_worksheet_rows(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first row index to be operated. (required)
        :param int last_index: The last row index to be operated. (required)
        :param bool hide: rows visible state
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_group_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
        else:
            (data) = self.cells_post_group_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
            return data

    def cells_post_group_worksheet_rows_with_http_info(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Group worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_group_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first row index to be operated. (required)
        :param int last_index: The last row index to be operated. (required)
        :param bool hide: rows visible state
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'first_index', 'last_index', 'hide', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_group_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_group_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_group_worksheet_rows`")
        # verify the required parameter 'first_index' is set
        if ('first_index' not in params) or (params['first_index'] is None):
            raise ValueError("Missing the required parameter `first_index` when calling `cells_post_group_worksheet_rows`")
        # verify the required parameter 'last_index' is set
        if ('last_index' not in params) or (params['last_index'] is None):
            raise ValueError("Missing the required parameter `last_index` when calling `cells_post_group_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'first_index' in params:
            query_params.append(('firstIndex', params['first_index']))
        if 'last_index' in params:
            query_params.append(('lastIndex', params['last_index']))
        if 'hide' in params:
            query_params.append(('hide', params['hide']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/group', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_hide_worksheet_columns(self, name, sheet_name, start_column, total_columns, **kwargs):
        """
        Hide worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_hide_worksheet_columns(name, sheet_name, start_column, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_column: The begin column index to be operated. (required)
        :param int total_columns: Number of columns to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_hide_worksheet_columns_with_http_info(name, sheet_name, start_column, total_columns, **kwargs)
        else:
            (data) = self.cells_post_hide_worksheet_columns_with_http_info(name, sheet_name, start_column, total_columns, **kwargs)
            return data

    def cells_post_hide_worksheet_columns_with_http_info(self, name, sheet_name, start_column, total_columns, **kwargs):
        """
        Hide worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_hide_worksheet_columns_with_http_info(name, sheet_name, start_column, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_column: The begin column index to be operated. (required)
        :param int total_columns: Number of columns to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'start_column', 'total_columns', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_hide_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_hide_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_hide_worksheet_columns`")
        # verify the required parameter 'start_column' is set
        if ('start_column' not in params) or (params['start_column'] is None):
            raise ValueError("Missing the required parameter `start_column` when calling `cells_post_hide_worksheet_columns`")
        # verify the required parameter 'total_columns' is set
        if ('total_columns' not in params) or (params['total_columns'] is None):
            raise ValueError("Missing the required parameter `total_columns` when calling `cells_post_hide_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'start_column' in params:
            query_params.append(('startColumn', params['start_column']))
        if 'total_columns' in params:
            query_params.append(('totalColumns', params['total_columns']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/hide', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_hide_worksheet_rows(self, name, sheet_name, startrow, total_rows, **kwargs):
        """
        Hide worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_hide_worksheet_rows(name, sheet_name, startrow, total_rows, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_hide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, **kwargs)
        else:
            (data) = self.cells_post_hide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, **kwargs)
            return data

    def cells_post_hide_worksheet_rows_with_http_info(self, name, sheet_name, startrow, total_rows, **kwargs):
        """
        Hide worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_hide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'startrow', 'total_rows', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_hide_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_hide_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_hide_worksheet_rows`")
        # verify the required parameter 'startrow' is set
        if ('startrow' not in params) or (params['startrow'] is None):
            raise ValueError("Missing the required parameter `startrow` when calling `cells_post_hide_worksheet_rows`")
        # verify the required parameter 'total_rows' is set
        if ('total_rows' not in params) or (params['total_rows'] is None):
            raise ValueError("Missing the required parameter `total_rows` when calling `cells_post_hide_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'startrow' in params:
            query_params.append(('startrow', params['startrow']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/hide', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_row_style(self, name, sheet_name, row_index, **kwargs):
        """
        Set row style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_row_style(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param Style style: Style dto
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_row_style_with_http_info(name, sheet_name, row_index, **kwargs)
        else:
            (data) = self.cells_post_row_style_with_http_info(name, sheet_name, row_index, **kwargs)
            return data

    def cells_post_row_style_with_http_info(self, name, sheet_name, row_index, **kwargs):
        """
        Set row style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_row_style_with_http_info(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param Style style: Style dto
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'row_index', 'style', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_row_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_row_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_row_style`")
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params) or (params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `cells_post_row_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}/style', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_set_cell_html_string(self, name, sheet_name, cell_name, **kwargs):
        """
        Set htmlstring value into cell
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_cell_html_string(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: CellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_set_cell_html_string_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_post_set_cell_html_string_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_post_set_cell_html_string_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Set htmlstring value into cell
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_cell_html_string_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: CellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_set_cell_html_string" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_set_cell_html_string`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_set_cell_html_string`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_post_set_cell_html_string`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/htmlstring', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CellResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_set_cell_range_value(self, name, sheet_name, cellarea, value, type, **kwargs):
        """
        Set cell range value 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_cell_range_value(name, sheet_name, cellarea, value, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cellarea: Cell area (like \"A1:C2\") (required)
        :param str value: Range value (required)
        :param str type: Value data type (like \"int\") (required)
        :param str folder: Folder name
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_set_cell_range_value_with_http_info(name, sheet_name, cellarea, value, type, **kwargs)
        else:
            (data) = self.cells_post_set_cell_range_value_with_http_info(name, sheet_name, cellarea, value, type, **kwargs)
            return data

    def cells_post_set_cell_range_value_with_http_info(self, name, sheet_name, cellarea, value, type, **kwargs):
        """
        Set cell range value 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_cell_range_value_with_http_info(name, sheet_name, cellarea, value, type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cellarea: Cell area (like \"A1:C2\") (required)
        :param str value: Range value (required)
        :param str type: Value data type (like \"int\") (required)
        :param str folder: Folder name
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cellarea', 'value', 'type', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_set_cell_range_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_set_cell_range_value`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_set_cell_range_value`")
        # verify the required parameter 'cellarea' is set
        if ('cellarea' not in params) or (params['cellarea'] is None):
            raise ValueError("Missing the required parameter `cellarea` when calling `cells_post_set_cell_range_value`")
        # verify the required parameter 'value' is set
        if ('value' not in params) or (params['value'] is None):
            raise ValueError("Missing the required parameter `value` when calling `cells_post_set_cell_range_value`")
        # verify the required parameter 'type' is set
        if ('type' not in params) or (params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `cells_post_set_cell_range_value`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'cellarea' in params:
            query_params.append(('cellarea', params['cellarea']))
        if 'value' in params:
            query_params.append(('value', params['value']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_set_worksheet_column_width(self, name, sheet_name, column_index, width, **kwargs):
        """
        Set worksheet column width.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_worksheet_column_width(name, sheet_name, column_index, width, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param float width: The width. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_set_worksheet_column_width_with_http_info(name, sheet_name, column_index, width, **kwargs)
        else:
            (data) = self.cells_post_set_worksheet_column_width_with_http_info(name, sheet_name, column_index, width, **kwargs)
            return data

    def cells_post_set_worksheet_column_width_with_http_info(self, name, sheet_name, column_index, width, **kwargs):
        """
        Set worksheet column width.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_set_worksheet_column_width_with_http_info(name, sheet_name, column_index, width, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param float width: The width. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'column_index', 'width', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_set_worksheet_column_width" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_set_worksheet_column_width`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_set_worksheet_column_width`")
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params) or (params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `cells_post_set_worksheet_column_width`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `cells_post_set_worksheet_column_width`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']

        query_params = []
        if 'width' in params:
            query_params.append(('width', params['width']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ColumnResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_ungroup_worksheet_columns(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Ungroup worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_ungroup_worksheet_columns(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first column index to be operated. (required)
        :param int last_index: The last column index to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_ungroup_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
        else:
            (data) = self.cells_post_ungroup_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
            return data

    def cells_post_ungroup_worksheet_columns_with_http_info(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Ungroup worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_ungroup_worksheet_columns_with_http_info(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first column index to be operated. (required)
        :param int last_index: The last column index to be operated. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'first_index', 'last_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_ungroup_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_ungroup_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_ungroup_worksheet_columns`")
        # verify the required parameter 'first_index' is set
        if ('first_index' not in params) or (params['first_index'] is None):
            raise ValueError("Missing the required parameter `first_index` when calling `cells_post_ungroup_worksheet_columns`")
        # verify the required parameter 'last_index' is set
        if ('last_index' not in params) or (params['last_index'] is None):
            raise ValueError("Missing the required parameter `last_index` when calling `cells_post_ungroup_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'first_index' in params:
            query_params.append(('firstIndex', params['first_index']))
        if 'last_index' in params:
            query_params.append(('lastIndex', params['last_index']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/ungroup', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_ungroup_worksheet_rows(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Ungroup worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_ungroup_worksheet_rows(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first row index to be operated. (required)
        :param int last_index: The last row index to be operated. (required)
        :param bool is_all: Is all row to be operated
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_ungroup_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
        else:
            (data) = self.cells_post_ungroup_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, **kwargs)
            return data

    def cells_post_ungroup_worksheet_rows_with_http_info(self, name, sheet_name, first_index, last_index, **kwargs):
        """
        Ungroup worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_ungroup_worksheet_rows_with_http_info(name, sheet_name, first_index, last_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int first_index: The first row index to be operated. (required)
        :param int last_index: The last row index to be operated. (required)
        :param bool is_all: Is all row to be operated
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'first_index', 'last_index', 'is_all', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_ungroup_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_ungroup_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_ungroup_worksheet_rows`")
        # verify the required parameter 'first_index' is set
        if ('first_index' not in params) or (params['first_index'] is None):
            raise ValueError("Missing the required parameter `first_index` when calling `cells_post_ungroup_worksheet_rows`")
        # verify the required parameter 'last_index' is set
        if ('last_index' not in params) or (params['last_index'] is None):
            raise ValueError("Missing the required parameter `last_index` when calling `cells_post_ungroup_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'first_index' in params:
            query_params.append(('firstIndex', params['first_index']))
        if 'last_index' in params:
            query_params.append(('lastIndex', params['last_index']))
        if 'is_all' in params:
            query_params.append(('isAll', params['is_all']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/ungroup', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_unhide_worksheet_columns(self, name, sheet_name, startcolumn, total_columns, **kwargs):
        """
        Unhide worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_unhide_worksheet_columns(name, sheet_name, startcolumn, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startcolumn: The begin column index to be operated. (required)
        :param int total_columns: Number of columns to be operated. (required)
        :param float width: The new column width.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_unhide_worksheet_columns_with_http_info(name, sheet_name, startcolumn, total_columns, **kwargs)
        else:
            (data) = self.cells_post_unhide_worksheet_columns_with_http_info(name, sheet_name, startcolumn, total_columns, **kwargs)
            return data

    def cells_post_unhide_worksheet_columns_with_http_info(self, name, sheet_name, startcolumn, total_columns, **kwargs):
        """
        Unhide worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_unhide_worksheet_columns_with_http_info(name, sheet_name, startcolumn, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startcolumn: The begin column index to be operated. (required)
        :param int total_columns: Number of columns to be operated. (required)
        :param float width: The new column width.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'startcolumn', 'total_columns', 'width', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_unhide_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_unhide_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_unhide_worksheet_columns`")
        # verify the required parameter 'startcolumn' is set
        if ('startcolumn' not in params) or (params['startcolumn'] is None):
            raise ValueError("Missing the required parameter `startcolumn` when calling `cells_post_unhide_worksheet_columns`")
        # verify the required parameter 'total_columns' is set
        if ('total_columns' not in params) or (params['total_columns'] is None):
            raise ValueError("Missing the required parameter `total_columns` when calling `cells_post_unhide_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'startcolumn' in params:
            query_params.append(('startcolumn', params['startcolumn']))
        if 'total_columns' in params:
            query_params.append(('totalColumns', params['total_columns']))
        if 'width' in params:
            query_params.append(('width', params['width']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/unhide', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_unhide_worksheet_rows(self, name, sheet_name, startrow, total_rows, **kwargs):
        """
        Unhide worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_unhide_worksheet_rows(name, sheet_name, startrow, total_rows, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated. (required)
        :param float height: The new row height.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_unhide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, **kwargs)
        else:
            (data) = self.cells_post_unhide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, **kwargs)
            return data

    def cells_post_unhide_worksheet_rows_with_http_info(self, name, sheet_name, startrow, total_rows, **kwargs):
        """
        Unhide worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_unhide_worksheet_rows_with_http_info(name, sheet_name, startrow, total_rows, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated. (required)
        :param float height: The new row height.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'startrow', 'total_rows', 'height', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_unhide_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_unhide_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_unhide_worksheet_rows`")
        # verify the required parameter 'startrow' is set
        if ('startrow' not in params) or (params['startrow'] is None):
            raise ValueError("Missing the required parameter `startrow` when calling `cells_post_unhide_worksheet_rows`")
        # verify the required parameter 'total_rows' is set
        if ('total_rows' not in params) or (params['total_rows'] is None):
            raise ValueError("Missing the required parameter `total_rows` when calling `cells_post_unhide_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'startrow' in params:
            query_params.append(('startrow', params['startrow']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'height' in params:
            query_params.append(('height', params['height']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/unhide', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_update_worksheet_cell_style(self, name, sheet_name, cell_name, **kwargs):
        """
        Update cell's style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_cell_style(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param Style style: with update style settings.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: StyleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_update_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_post_update_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_post_update_worksheet_cell_style_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Update cell's style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_cell_style_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param Style style: with update style settings.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: StyleResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'style', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_update_worksheet_cell_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_update_worksheet_cell_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_update_worksheet_cell_style`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_post_update_worksheet_cell_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}/style', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StyleResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_update_worksheet_range_style(self, name, sheet_name, range, **kwargs):
        """
        Update cell's range style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_range_style(name, sheet_name, range, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range. (required)
        :param Style style: with update style settings.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_update_worksheet_range_style_with_http_info(name, sheet_name, range, **kwargs)
        else:
            (data) = self.cells_post_update_worksheet_range_style_with_http_info(name, sheet_name, range, **kwargs)
            return data

    def cells_post_update_worksheet_range_style_with_http_info(self, name, sheet_name, range, **kwargs):
        """
        Update cell's range style.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_range_style_with_http_info(name, sheet_name, range, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Workbook name. (required)
        :param str sheet_name: Worksheet name. (required)
        :param str range: The range. (required)
        :param Style style: with update style settings.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'style', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_update_worksheet_range_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_update_worksheet_range_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_update_worksheet_range_style`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_post_update_worksheet_range_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/style', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_update_worksheet_row(self, name, sheet_name, row_index, **kwargs):
        """
        Update worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_row(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param float height: The new row height.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_update_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
        else:
            (data) = self.cells_post_update_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
            return data

    def cells_post_update_worksheet_row_with_http_info(self, name, sheet_name, row_index, **kwargs):
        """
        Update worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_update_worksheet_row_with_http_info(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The row index. (required)
        :param float height: The new row height.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'row_index', 'height', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_update_worksheet_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_update_worksheet_row`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_update_worksheet_row`")
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params) or (params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `cells_post_update_worksheet_row`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']

        query_params = []
        if 'height' in params:
            query_params.append(('height', params['height']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RowResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_worksheet_cell_set_value(self, name, sheet_name, cell_name, **kwargs):
        """
        Set cell value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_cell_set_value(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param str value: The cell value.
        :param str type: The value type.
        :param str formula: Formula for cell
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: CellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_worksheet_cell_set_value_with_http_info(name, sheet_name, cell_name, **kwargs)
        else:
            (data) = self.cells_post_worksheet_cell_set_value_with_http_info(name, sheet_name, cell_name, **kwargs)
            return data

    def cells_post_worksheet_cell_set_value_with_http_info(self, name, sheet_name, cell_name, **kwargs):
        """
        Set cell value.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_cell_set_value_with_http_info(name, sheet_name, cell_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str cell_name: The cell name. (required)
        :param str value: The cell value.
        :param str type: The value type.
        :param str formula: Formula for cell
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: CellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'cell_name', 'value', 'type', 'formula', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_worksheet_cell_set_value" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_worksheet_cell_set_value`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_worksheet_cell_set_value`")
        # verify the required parameter 'cell_name' is set
        if ('cell_name' not in params) or (params['cell_name'] is None):
            raise ValueError("Missing the required parameter `cell_name` when calling `cells_post_worksheet_cell_set_value`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'cell_name' in params:
            path_params['cellName'] = params['cell_name']

        query_params = []
        if 'value' in params:
            query_params.append(('value', params['value']))
        if 'type' in params:
            query_params.append(('type', params['type']))
        if 'formula' in params:
            query_params.append(('formula', params['formula']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/{cellName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='CellResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_worksheet_merge(self, name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs):
        """
        Merge cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_merge(name, sheet_name, start_row, start_column, total_rows, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_row: The start row. (required)
        :param int start_column: The start column. (required)
        :param int total_rows: The total rows (required)
        :param int total_columns: The total columns. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_worksheet_merge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs)
        else:
            (data) = self.cells_post_worksheet_merge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs)
            return data

    def cells_post_worksheet_merge_with_http_info(self, name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs):
        """
        Merge cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_merge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_row: The start row. (required)
        :param int start_column: The start column. (required)
        :param int total_rows: The total rows (required)
        :param int total_columns: The total columns. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'start_row', 'start_column', 'total_rows', 'total_columns', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_worksheet_merge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_worksheet_merge`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_worksheet_merge`")
        # verify the required parameter 'start_row' is set
        if ('start_row' not in params) or (params['start_row'] is None):
            raise ValueError("Missing the required parameter `start_row` when calling `cells_post_worksheet_merge`")
        # verify the required parameter 'start_column' is set
        if ('start_column' not in params) or (params['start_column'] is None):
            raise ValueError("Missing the required parameter `start_column` when calling `cells_post_worksheet_merge`")
        # verify the required parameter 'total_rows' is set
        if ('total_rows' not in params) or (params['total_rows'] is None):
            raise ValueError("Missing the required parameter `total_rows` when calling `cells_post_worksheet_merge`")
        # verify the required parameter 'total_columns' is set
        if ('total_columns' not in params) or (params['total_columns'] is None):
            raise ValueError("Missing the required parameter `total_columns` when calling `cells_post_worksheet_merge`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))
        if 'start_column' in params:
            query_params.append(('startColumn', params['start_column']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'total_columns' in params:
            query_params.append(('totalColumns', params['total_columns']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/merge', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_post_worksheet_unmerge(self, name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs):
        """
        Unmerge cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_unmerge(name, sheet_name, start_row, start_column, total_rows, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_row: The start row. (required)
        :param int start_column: The start column. (required)
        :param int total_rows: The total rows (required)
        :param int total_columns: The total columns. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_post_worksheet_unmerge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs)
        else:
            (data) = self.cells_post_worksheet_unmerge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs)
            return data

    def cells_post_worksheet_unmerge_with_http_info(self, name, sheet_name, start_row, start_column, total_rows, total_columns, **kwargs):
        """
        Unmerge cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_post_worksheet_unmerge_with_http_info(name, sheet_name, start_row, start_column, total_rows, total_columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int start_row: The start row. (required)
        :param int start_column: The start column. (required)
        :param int total_rows: The total rows (required)
        :param int total_columns: The total columns. (required)
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'start_row', 'start_column', 'total_rows', 'total_columns', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_post_worksheet_unmerge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_post_worksheet_unmerge`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_post_worksheet_unmerge`")
        # verify the required parameter 'start_row' is set
        if ('start_row' not in params) or (params['start_row'] is None):
            raise ValueError("Missing the required parameter `start_row` when calling `cells_post_worksheet_unmerge`")
        # verify the required parameter 'start_column' is set
        if ('start_column' not in params) or (params['start_column'] is None):
            raise ValueError("Missing the required parameter `start_column` when calling `cells_post_worksheet_unmerge`")
        # verify the required parameter 'total_rows' is set
        if ('total_rows' not in params) or (params['total_rows'] is None):
            raise ValueError("Missing the required parameter `total_rows` when calling `cells_post_worksheet_unmerge`")
        # verify the required parameter 'total_columns' is set
        if ('total_columns' not in params) or (params['total_columns'] is None):
            raise ValueError("Missing the required parameter `total_columns` when calling `cells_post_worksheet_unmerge`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'start_row' in params:
            query_params.append(('startRow', params['start_row']))
        if 'start_column' in params:
            query_params.append(('startColumn', params['start_column']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'total_columns' in params:
            query_params.append(('totalColumns', params['total_columns']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/unmerge', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_put_insert_worksheet_columns(self, name, sheet_name, column_index, columns, **kwargs):
        """
        Insert worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_columns(name, sheet_name, column_index, columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param int columns: The columns. (required)
        :param bool update_reference: The update reference.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_put_insert_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, **kwargs)
        else:
            (data) = self.cells_put_insert_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, **kwargs)
            return data

    def cells_put_insert_worksheet_columns_with_http_info(self, name, sheet_name, column_index, columns, **kwargs):
        """
        Insert worksheet columns.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_columns_with_http_info(name, sheet_name, column_index, columns, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int column_index: The column index. (required)
        :param int columns: The columns. (required)
        :param bool update_reference: The update reference.
        :param str folder: The workbook folder.
        :param str storage: storage name.
        :return: ColumnsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'column_index', 'columns', 'update_reference', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_put_insert_worksheet_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_put_insert_worksheet_columns`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_put_insert_worksheet_columns`")
        # verify the required parameter 'column_index' is set
        if ('column_index' not in params) or (params['column_index'] is None):
            raise ValueError("Missing the required parameter `column_index` when calling `cells_put_insert_worksheet_columns`")
        # verify the required parameter 'columns' is set
        if ('columns' not in params) or (params['columns'] is None):
            raise ValueError("Missing the required parameter `columns` when calling `cells_put_insert_worksheet_columns`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'column_index' in params:
            path_params['columnIndex'] = params['column_index']

        query_params = []
        if 'columns' in params:
            query_params.append(('columns', params['columns']))
        if 'update_reference' in params:
            query_params.append(('updateReference', params['update_reference']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/columns/{columnIndex}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ColumnsResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_put_insert_worksheet_row(self, name, sheet_name, row_index, **kwargs):
        """
        Insert new worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_row(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The new row index. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_put_insert_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
        else:
            (data) = self.cells_put_insert_worksheet_row_with_http_info(name, sheet_name, row_index, **kwargs)
            return data

    def cells_put_insert_worksheet_row_with_http_info(self, name, sheet_name, row_index, **kwargs):
        """
        Insert new worksheet row.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_row_with_http_info(name, sheet_name, row_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int row_index: The new row index. (required)
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: RowResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'row_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_put_insert_worksheet_row" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_put_insert_worksheet_row`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_put_insert_worksheet_row`")
        # verify the required parameter 'row_index' is set
        if ('row_index' not in params) or (params['row_index'] is None):
            raise ValueError("Missing the required parameter `row_index` when calling `cells_put_insert_worksheet_row`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'row_index' in params:
            path_params['rowIndex'] = params['row_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows/{rowIndex}', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='RowResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_put_insert_worksheet_rows(self, name, sheet_name, startrow, **kwargs):
        """
        Insert several new worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_rows(name, sheet_name, startrow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated.
        :param bool update_reference: Indicates if update references in other worksheets.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_put_insert_worksheet_rows_with_http_info(name, sheet_name, startrow, **kwargs)
        else:
            (data) = self.cells_put_insert_worksheet_rows_with_http_info(name, sheet_name, startrow, **kwargs)
            return data

    def cells_put_insert_worksheet_rows_with_http_info(self, name, sheet_name, startrow, **kwargs):
        """
        Insert several new worksheet rows.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_put_insert_worksheet_rows_with_http_info(name, sheet_name, startrow, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: The workbook name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int startrow: The begin row index to be operated. (required)
        :param int total_rows: Number of rows to be operated.
        :param bool update_reference: Indicates if update references in other worksheets.
        :param str folder: The document folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'startrow', 'total_rows', 'update_reference', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_put_insert_worksheet_rows" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_put_insert_worksheet_rows`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_put_insert_worksheet_rows`")
        # verify the required parameter 'startrow' is set
        if ('startrow' not in params) or (params['startrow'] is None):
            raise ValueError("Missing the required parameter `startrow` when calling `cells_put_insert_worksheet_rows`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'startrow' in params:
            query_params.append(('startrow', params['startrow']))
        if 'total_rows' in params:
            query_params.append(('totalRows', params['total_rows']))
        if 'update_reference' in params:
            query_params.append(('updateReference', params['update_reference']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/cells/rows', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
