# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CellsPivotTablesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cells_pivot_tables_delete_pivot_table_field(self, name, sheet_name, pivot_table_index, pivot_field_type, **kwargs):
        """
        Delete pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_pivot_table_field(name, sheet_name, pivot_table_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str pivot_field_type: The fields area type. (required)
        :param PivotTableFieldRequest request: Dto that conrains field indexes
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_delete_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, **kwargs)
        else:
            (data) = self.cells_pivot_tables_delete_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, **kwargs)
            return data

    def cells_pivot_tables_delete_pivot_table_field_with_http_info(self, name, sheet_name, pivot_table_index, pivot_field_type, **kwargs):
        """
        Delete pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str pivot_field_type: The fields area type. (required)
        :param PivotTableFieldRequest request: Dto that conrains field indexes
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'pivot_field_type', 'request', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_delete_pivot_table_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_delete_pivot_table_field`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_delete_pivot_table_field`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_delete_pivot_table_field`")
        # verify the required parameter 'pivot_field_type' is set
        if ('pivot_field_type' not in params) or (params['pivot_field_type'] is None):
            raise ValueError("Missing the required parameter `pivot_field_type` when calling `cells_pivot_tables_delete_pivot_table_field`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'pivot_field_type' in params:
            query_params.append(('pivotFieldType', params['pivot_field_type']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_delete_worksheet_pivot_table(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Delete worksheet pivot table by index
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_delete_worksheet_pivot_table_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_delete_worksheet_pivot_table_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_delete_worksheet_pivot_table_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Delete worksheet pivot table by index
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_delete_worksheet_pivot_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_delete_worksheet_pivot_table`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_delete_worksheet_pivot_table`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_delete_worksheet_pivot_table`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_delete_worksheet_pivot_table_filter(self, name, sheet_name, pivot_table_index, field_index, **kwargs):
        """
        delete  pivot filter for piovt table             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table_filter(name, sheet_name, pivot_table_index, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int field_index: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_delete_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, field_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_delete_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, field_index, **kwargs)
            return data

    def cells_pivot_tables_delete_worksheet_pivot_table_filter_with_http_info(self, name, sheet_name, pivot_table_index, field_index, **kwargs):
        """
        delete  pivot filter for piovt table             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int field_index: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'field_index', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_delete_worksheet_pivot_table_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filter`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']
        if 'field_index' in params:
            path_params['fieldIndex'] = params['field_index']

        query_params = []
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{fieldIndex}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_delete_worksheet_pivot_table_filters(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        delete all pivot filters for piovt table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table_filters(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_delete_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_delete_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_delete_worksheet_pivot_table_filters_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        delete all pivot filters for piovt table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_delete_worksheet_pivot_table_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filters`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filters`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_delete_worksheet_pivot_table_filters`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_delete_worksheet_pivot_tables(self, name, sheet_name, **kwargs):
        """
        Delete worksheet pivot tables
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_tables(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_delete_worksheet_pivot_tables_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_pivot_tables_delete_worksheet_pivot_tables_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_pivot_tables_delete_worksheet_pivot_tables_with_http_info(self, name, sheet_name, **kwargs):
        """
        Delete worksheet pivot tables
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_delete_worksheet_pivot_tables_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_delete_worksheet_pivot_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_delete_worksheet_pivot_tables`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_delete_worksheet_pivot_tables`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_get_pivot_table_field(self, name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, **kwargs):
        """
        Get pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_pivot_table_field(name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param int pivot_field_index: The field index in the base fields. (required)
        :param str pivot_field_type: The fields area type. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotFieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_get_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, **kwargs)
        else:
            (data) = self.cells_pivot_tables_get_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, **kwargs)
            return data

    def cells_pivot_tables_get_pivot_table_field_with_http_info(self, name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, **kwargs):
        """
        Get pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param int pivot_field_index: The field index in the base fields. (required)
        :param str pivot_field_type: The fields area type. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotFieldResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'pivot_field_index', 'pivot_field_type', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_get_pivot_table_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_get_pivot_table_field`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_get_pivot_table_field`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_get_pivot_table_field`")
        # verify the required parameter 'pivot_field_index' is set
        if ('pivot_field_index' not in params) or (params['pivot_field_index'] is None):
            raise ValueError("Missing the required parameter `pivot_field_index` when calling `cells_pivot_tables_get_pivot_table_field`")
        # verify the required parameter 'pivot_field_type' is set
        if ('pivot_field_type' not in params) or (params['pivot_field_type'] is None):
            raise ValueError("Missing the required parameter `pivot_field_type` when calling `cells_pivot_tables_get_pivot_table_field`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'pivot_field_index' in params:
            query_params.append(('pivotFieldIndex', params['pivot_field_index']))
        if 'pivot_field_type' in params:
            query_params.append(('pivotFieldType', params['pivot_field_type']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotFieldResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_get_worksheet_pivot_table(self, name, sheet_name, pivottable_index, **kwargs):
        """
        Get worksheet pivottable info by index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table(name, sheet_name, pivottable_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivottable_index: (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_get_worksheet_pivot_table_with_http_info(name, sheet_name, pivottable_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_get_worksheet_pivot_table_with_http_info(name, sheet_name, pivottable_index, **kwargs)
            return data

    def cells_pivot_tables_get_worksheet_pivot_table_with_http_info(self, name, sheet_name, pivottable_index, **kwargs):
        """
        Get worksheet pivottable info by index.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table_with_http_info(name, sheet_name, pivottable_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivottable_index: (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivottable_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_get_worksheet_pivot_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_get_worksheet_pivot_table`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_get_worksheet_pivot_table`")
        # verify the required parameter 'pivottable_index' is set
        if ('pivottable_index' not in params) or (params['pivottable_index'] is None):
            raise ValueError("Missing the required parameter `pivottable_index` when calling `cells_pivot_tables_get_worksheet_pivot_table`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivottable_index' in params:
            path_params['pivottableIndex'] = params['pivottable_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivottableIndex}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotTableResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_get_worksheet_pivot_table_filter(self, name, sheet_name, pivot_table_index, filter_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table_filter(name, sheet_name, pivot_table_index, filter_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int filter_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: PivotFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_get_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, filter_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_get_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, filter_index, **kwargs)
            return data

    def cells_pivot_tables_get_worksheet_pivot_table_filter_with_http_info(self, name, sheet_name, pivot_table_index, filter_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, filter_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int filter_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: PivotFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'filter_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_get_worksheet_pivot_table_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_get_worksheet_pivot_table_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_get_worksheet_pivot_table_filter`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_get_worksheet_pivot_table_filter`")
        # verify the required parameter 'filter_index' is set
        if ('filter_index' not in params) or (params['filter_index'] is None):
            raise ValueError("Missing the required parameter `filter_index` when calling `cells_pivot_tables_get_worksheet_pivot_table_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']
        if 'filter_index' in params:
            path_params['filterIndex'] = params['filter_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters/{filterIndex}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotFilterResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_get_worksheet_pivot_table_filters(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table_filters(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: PivotFiltersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_get_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_get_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_get_worksheet_pivot_table_filters_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_table_filters_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: PivotFiltersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_get_worksheet_pivot_table_filters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_get_worksheet_pivot_table_filters`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_get_worksheet_pivot_table_filters`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_get_worksheet_pivot_table_filters`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotFiltersResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_get_worksheet_pivot_tables(self, name, sheet_name, **kwargs):
        """
        Get worksheet pivottables info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_tables(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotTablesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_get_worksheet_pivot_tables_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_pivot_tables_get_worksheet_pivot_tables_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_pivot_tables_get_worksheet_pivot_tables_with_http_info(self, name, sheet_name, **kwargs):
        """
        Get worksheet pivottables info.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_get_worksheet_pivot_tables_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: PivotTablesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_get_worksheet_pivot_tables" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_get_worksheet_pivot_tables`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_get_worksheet_pivot_tables`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotTablesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_pivot_table_cell_style(self, name, sheet_name, pivot_table_index, column, row, **kwargs):
        """
        Update cell style for pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_cell_style(name, sheet_name, pivot_table_index, column, row, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param int column: (required)
        :param int row: (required)
        :param Style style: Style dto in request body.
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_pivot_table_cell_style_with_http_info(name, sheet_name, pivot_table_index, column, row, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_pivot_table_cell_style_with_http_info(name, sheet_name, pivot_table_index, column, row, **kwargs)
            return data

    def cells_pivot_tables_post_pivot_table_cell_style_with_http_info(self, name, sheet_name, pivot_table_index, column, row, **kwargs):
        """
        Update cell style for pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_cell_style_with_http_info(name, sheet_name, pivot_table_index, column, row, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param int column: (required)
        :param int row: (required)
        :param Style style: Style dto in request body.
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'column', 'row', 'style', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_pivot_table_cell_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_pivot_table_cell_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_pivot_table_cell_style`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_pivot_table_cell_style`")
        # verify the required parameter 'column' is set
        if ('column' not in params) or (params['column'] is None):
            raise ValueError("Missing the required parameter `column` when calling `cells_pivot_tables_post_pivot_table_cell_style`")
        # verify the required parameter 'row' is set
        if ('row' not in params) or (params['row'] is None):
            raise ValueError("Missing the required parameter `row` when calling `cells_pivot_tables_post_pivot_table_cell_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'column' in params:
            query_params.append(('column', params['column']))
        if 'row' in params:
            query_params.append(('row', params['row']))
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Format', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_pivot_table_field_hide_item(self, name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_field_hide_item(name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param str pivot_field_type: (required)
        :param int field_index: (required)
        :param int item_index: (required)
        :param bool is_hide: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_pivot_table_field_hide_item_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_pivot_table_field_hide_item_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, **kwargs)
            return data

    def cells_pivot_tables_post_pivot_table_field_hide_item_with_http_info(self, name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_field_hide_item_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, field_index, item_index, is_hide, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param str pivot_field_type: (required)
        :param int field_index: (required)
        :param int item_index: (required)
        :param bool is_hide: (required)
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'pivot_field_type', 'field_index', 'item_index', 'is_hide', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_pivot_table_field_hide_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'pivot_field_type' is set
        if ('pivot_field_type' not in params) or (params['pivot_field_type'] is None):
            raise ValueError("Missing the required parameter `pivot_field_type` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'item_index' is set
        if ('item_index' not in params) or (params['item_index'] is None):
            raise ValueError("Missing the required parameter `item_index` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")
        # verify the required parameter 'is_hide' is set
        if ('is_hide' not in params) or (params['is_hide'] is None):
            raise ValueError("Missing the required parameter `is_hide` when calling `cells_pivot_tables_post_pivot_table_field_hide_item`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'pivot_field_type' in params:
            query_params.append(('pivotFieldType', params['pivot_field_type']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'item_index' in params:
            query_params.append(('itemIndex', params['item_index']))
        if 'is_hide' in params:
            query_params.append(('isHide', params['is_hide']))
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Hide', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_pivot_table_field_move_to(self, name, sheet_name, pivot_table_index, field_index, _from, to, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_field_move_to(name, sheet_name, pivot_table_index, field_index, _from, to, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int field_index: (required)
        :param str _from: (required)
        :param str to: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_pivot_table_field_move_to_with_http_info(name, sheet_name, pivot_table_index, field_index, _from, to, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_pivot_table_field_move_to_with_http_info(name, sheet_name, pivot_table_index, field_index, _from, to, **kwargs)
            return data

    def cells_pivot_tables_post_pivot_table_field_move_to_with_http_info(self, name, sheet_name, pivot_table_index, field_index, _from, to, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_field_move_to_with_http_info(name, sheet_name, pivot_table_index, field_index, _from, to, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int field_index: (required)
        :param str _from: (required)
        :param str to: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'field_index', '_from', 'to', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_pivot_table_field_move_to" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")
        # verify the required parameter '_from' is set
        if ('_from' not in params) or (params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")
        # verify the required parameter 'to' is set
        if ('to' not in params) or (params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `cells_pivot_tables_post_pivot_table_field_move_to`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if '_from' in params:
            query_params.append(('from', params['_from']))
        if 'to' in params:
            query_params.append(('to', params['to']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField/Move', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_pivot_table_style(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Update style for pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_style(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param Style style: Style dto in request body.
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_pivot_table_style_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_pivot_table_style_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_post_pivot_table_style_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Update style for pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_pivot_table_style_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param Style style: Style dto in request body.
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'style', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_pivot_table_style" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_pivot_table_style`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_pivot_table_style`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_pivot_table_style`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'style' in params:
            body_params = params['style']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/FormatAll', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_worksheet_pivot_table_calculate(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Calculates pivottable's data to cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_worksheet_pivot_table_calculate(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_worksheet_pivot_table_calculate_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_worksheet_pivot_table_calculate_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_post_worksheet_pivot_table_calculate_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Calculates pivottable's data to cells.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_worksheet_pivot_table_calculate_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_worksheet_pivot_table_calculate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_worksheet_pivot_table_calculate`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_worksheet_pivot_table_calculate`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_worksheet_pivot_table_calculate`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Calculate', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_post_worksheet_pivot_table_move(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_worksheet_pivot_table_move(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int row:
        :param int column:
        :param str dest_cell_name:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_post_worksheet_pivot_table_move_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_post_worksheet_pivot_table_move_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_post_worksheet_pivot_table_move_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_post_worksheet_pivot_table_move_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param int row:
        :param int column:
        :param str dest_cell_name:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'row', 'column', 'dest_cell_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_post_worksheet_pivot_table_move" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_post_worksheet_pivot_table_move`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_post_worksheet_pivot_table_move`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_post_worksheet_pivot_table_move`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'row' in params:
            query_params.append(('row', params['row']))
        if 'column' in params:
            query_params.append(('column', params['column']))
        if 'dest_cell_name' in params:
            query_params.append(('destCellName', params['dest_cell_name']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/Move', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_put_pivot_table_field(self, name, sheet_name, pivot_table_index, pivot_field_type, **kwargs):
        """
        Add pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_pivot_table_field(name, sheet_name, pivot_table_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str pivot_field_type: The fields area type. (required)
        :param PivotTableFieldRequest request: Dto that conrains field indexes
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_put_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, **kwargs)
        else:
            (data) = self.cells_pivot_tables_put_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, **kwargs)
            return data

    def cells_pivot_tables_put_pivot_table_field_with_http_info(self, name, sheet_name, pivot_table_index, pivot_field_type, **kwargs):
        """
        Add pivot field into into pivot table
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_pivot_table_field_with_http_info(name, sheet_name, pivot_table_index, pivot_field_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param int pivot_table_index: Pivot table index (required)
        :param str pivot_field_type: The fields area type. (required)
        :param PivotTableFieldRequest request: Dto that conrains field indexes
        :param bool need_re_calculate:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'pivot_field_type', 'request', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_put_pivot_table_field" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_put_pivot_table_field`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_put_pivot_table_field`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_put_pivot_table_field`")
        # verify the required parameter 'pivot_field_type' is set
        if ('pivot_field_type' not in params) or (params['pivot_field_type'] is None):
            raise ValueError("Missing the required parameter `pivot_field_type` when calling `cells_pivot_tables_put_pivot_table_field`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'pivot_field_type' in params:
            query_params.append(('pivotFieldType', params['pivot_field_type']))
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotField', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_put_worksheet_pivot_table(self, name, sheet_name, **kwargs):
        """
        Add a pivot table into worksheet.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_worksheet_pivot_table(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param CreatePivotTableRequest request: CreatePivotTableRequest dto in request body.
        :param str folder: Document's folder.
        :param str storage: storage name.
        :param str source_data: The data for the new PivotTable cache.
        :param str dest_cell_name: The cell in the upper-left corner of the PivotTable report's destination range.
        :param str table_name: The name of the new PivotTable report.
        :param bool use_same_source: Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory.
        :return: PivotTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_put_worksheet_pivot_table_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_pivot_tables_put_worksheet_pivot_table_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_pivot_tables_put_worksheet_pivot_table_with_http_info(self, name, sheet_name, **kwargs):
        """
        Add a pivot table into worksheet.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_worksheet_pivot_table_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: Document name. (required)
        :param str sheet_name: The worksheet name. (required)
        :param CreatePivotTableRequest request: CreatePivotTableRequest dto in request body.
        :param str folder: Document's folder.
        :param str storage: storage name.
        :param str source_data: The data for the new PivotTable cache.
        :param str dest_cell_name: The cell in the upper-left corner of the PivotTable report's destination range.
        :param str table_name: The name of the new PivotTable report.
        :param bool use_same_source: Indicates whether using same data source when another existing pivot table has used this data source. If the property is true, it will save memory.
        :return: PivotTableResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'request', 'folder', 'storage', 'source_data', 'dest_cell_name', 'table_name', 'use_same_source']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_put_worksheet_pivot_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_put_worksheet_pivot_table`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_put_worksheet_pivot_table`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))
        if 'source_data' in params:
            query_params.append(('sourceData', params['source_data']))
        if 'dest_cell_name' in params:
            query_params.append(('destCellName', params['dest_cell_name']))
        if 'table_name' in params:
            query_params.append(('tableName', params['table_name']))
        if 'use_same_source' in params:
            query_params.append(('useSameSource', params['use_same_source']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='PivotTableResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_pivot_tables_put_worksheet_pivot_table_filter(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Add pivot filter for piovt table index
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_worksheet_pivot_table_filter(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param PivotFilter filter:
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_pivot_tables_put_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
        else:
            (data) = self.cells_pivot_tables_put_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, **kwargs)
            return data

    def cells_pivot_tables_put_worksheet_pivot_table_filter_with_http_info(self, name, sheet_name, pivot_table_index, **kwargs):
        """
        Add pivot filter for piovt table index
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_pivot_tables_put_worksheet_pivot_table_filter_with_http_info(name, sheet_name, pivot_table_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int pivot_table_index: (required)
        :param PivotFilter filter:
        :param bool need_re_calculate:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'pivot_table_index', 'filter', 'need_re_calculate', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_pivot_tables_put_worksheet_pivot_table_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_pivot_tables_put_worksheet_pivot_table_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_pivot_tables_put_worksheet_pivot_table_filter`")
        # verify the required parameter 'pivot_table_index' is set
        if ('pivot_table_index' not in params) or (params['pivot_table_index'] is None):
            raise ValueError("Missing the required parameter `pivot_table_index` when calling `cells_pivot_tables_put_worksheet_pivot_table_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'pivot_table_index' in params:
            path_params['pivotTableIndex'] = params['pivot_table_index']

        query_params = []
        if 'need_re_calculate' in params:
            query_params.append(('needReCalculate', params['need_re_calculate']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'filter' in params:
            body_params = params['filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/pivottables/{pivotTableIndex}/PivotFilters', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
