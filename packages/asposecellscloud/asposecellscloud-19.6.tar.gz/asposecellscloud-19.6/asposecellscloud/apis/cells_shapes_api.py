# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CellsShapesApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cells_shapes_delete_worksheet_shape(self, name, sheet_name, shapeindex, **kwargs):
        """
        Delete a shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_delete_worksheet_shape(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_delete_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
        else:
            (data) = self.cells_shapes_delete_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
            return data

    def cells_shapes_delete_worksheet_shape_with_http_info(self, name, sheet_name, shapeindex, **kwargs):
        """
        Delete a shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_delete_worksheet_shape_with_http_info(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'shapeindex', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_delete_worksheet_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_delete_worksheet_shape`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_delete_worksheet_shape`")
        # verify the required parameter 'shapeindex' is set
        if ('shapeindex' not in params) or (params['shapeindex'] is None):
            raise ValueError("Missing the required parameter `shapeindex` when calling `cells_shapes_delete_worksheet_shape`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'shapeindex' in params:
            path_params['shapeindex'] = params['shapeindex']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_shapes_delete_worksheet_shapes(self, name, sheet_name, **kwargs):
        """
        delete all shapes in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_delete_worksheet_shapes(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_delete_worksheet_shapes_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_shapes_delete_worksheet_shapes_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_shapes_delete_worksheet_shapes_with_http_info(self, name, sheet_name, **kwargs):
        """
        delete all shapes in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_delete_worksheet_shapes_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_delete_worksheet_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_delete_worksheet_shapes`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_delete_worksheet_shapes`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_shapes_get_worksheet_shape(self, name, sheet_name, shapeindex, **kwargs):
        """
        Get worksheet shape
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_get_worksheet_shape(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_get_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
        else:
            (data) = self.cells_shapes_get_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
            return data

    def cells_shapes_get_worksheet_shape_with_http_info(self, name, sheet_name, shapeindex, **kwargs):
        """
        Get worksheet shape
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_get_worksheet_shape_with_http_info(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'shapeindex', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_get_worksheet_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_get_worksheet_shape`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_get_worksheet_shape`")
        # verify the required parameter 'shapeindex' is set
        if ('shapeindex' not in params) or (params['shapeindex'] is None):
            raise ValueError("Missing the required parameter `shapeindex` when calling `cells_shapes_get_worksheet_shape`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'shapeindex' in params:
            path_params['shapeindex'] = params['shapeindex']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShapeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_shapes_get_worksheet_shapes(self, name, sheet_name, **kwargs):
        """
        Get worksheet shapes 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_get_worksheet_shapes(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_get_worksheet_shapes_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_shapes_get_worksheet_shapes_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_shapes_get_worksheet_shapes_with_http_info(self, name, sheet_name, **kwargs):
        """
        Get worksheet shapes 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_get_worksheet_shapes_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_get_worksheet_shapes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_get_worksheet_shapes`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_get_worksheet_shapes`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShapesResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_shapes_post_worksheet_shape(self, name, sheet_name, shapeindex, **kwargs):
        """
        Update a shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_post_worksheet_shape(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param Shape dto:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_post_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
        else:
            (data) = self.cells_shapes_post_worksheet_shape_with_http_info(name, sheet_name, shapeindex, **kwargs)
            return data

    def cells_shapes_post_worksheet_shape_with_http_info(self, name, sheet_name, shapeindex, **kwargs):
        """
        Update a shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_post_worksheet_shape_with_http_info(name, sheet_name, shapeindex, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param int shapeindex: shape index in worksheet shapes. (required)
        :param Shape dto:
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'shapeindex', 'dto', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_post_worksheet_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_post_worksheet_shape`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_post_worksheet_shape`")
        # verify the required parameter 'shapeindex' is set
        if ('shapeindex' not in params) or (params['shapeindex'] is None):
            raise ValueError("Missing the required parameter `shapeindex` when calling `cells_shapes_post_worksheet_shape`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']
        if 'shapeindex' in params:
            path_params['shapeindex'] = params['shapeindex']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dto' in params:
            body_params = params['dto']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes/{shapeindex}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_shapes_put_worksheet_shape(self, name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, **kwargs):
        """
        Add shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_put_worksheet_shape(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str drawing_type: shape object type (required)
        :param int upper_left_row: Upper left row index. (required)
        :param int upper_left_column: Upper left column index. (required)
        :param int top: Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
        :param int left: Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
        :param int width: Represents the height of Spinner, in unit of pixel. (required)
        :param int height: Represents the width of Spinner, in unit of pixel. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_shapes_put_worksheet_shape_with_http_info(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, **kwargs)
        else:
            (data) = self.cells_shapes_put_worksheet_shape_with_http_info(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, **kwargs)
            return data

    def cells_shapes_put_worksheet_shape_with_http_info(self, name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, **kwargs):
        """
        Add shape in worksheet
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_shapes_put_worksheet_shape_with_http_info(name, sheet_name, drawing_type, upper_left_row, upper_left_column, top, left, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: document name. (required)
        :param str sheet_name: worksheet name. (required)
        :param str drawing_type: shape object type (required)
        :param int upper_left_row: Upper left row index. (required)
        :param int upper_left_column: Upper left column index. (required)
        :param int top: Represents the vertical offset of Spinner from its left row, in unit of pixel. (required)
        :param int left: Represents the horizontal offset of Spinner from its left column, in unit of pixel. (required)
        :param int width: Represents the height of Spinner, in unit of pixel. (required)
        :param int height: Represents the width of Spinner, in unit of pixel. (required)
        :param str folder: Document's folder.
        :param str storage: storage name.
        :return: ShapeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'drawing_type', 'upper_left_row', 'upper_left_column', 'top', 'left', 'width', 'height', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_shapes_put_worksheet_shape" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'drawing_type' is set
        if ('drawing_type' not in params) or (params['drawing_type'] is None):
            raise ValueError("Missing the required parameter `drawing_type` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'upper_left_row' is set
        if ('upper_left_row' not in params) or (params['upper_left_row'] is None):
            raise ValueError("Missing the required parameter `upper_left_row` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'upper_left_column' is set
        if ('upper_left_column' not in params) or (params['upper_left_column'] is None):
            raise ValueError("Missing the required parameter `upper_left_column` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'top' is set
        if ('top' not in params) or (params['top'] is None):
            raise ValueError("Missing the required parameter `top` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'left' is set
        if ('left' not in params) or (params['left'] is None):
            raise ValueError("Missing the required parameter `left` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `cells_shapes_put_worksheet_shape`")
        # verify the required parameter 'height' is set
        if ('height' not in params) or (params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `cells_shapes_put_worksheet_shape`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'drawing_type' in params:
            query_params.append(('DrawingType', params['drawing_type']))
        if 'upper_left_row' in params:
            query_params.append(('upperLeftRow', params['upper_left_row']))
        if 'upper_left_column' in params:
            query_params.append(('upperLeftColumn', params['upper_left_column']))
        if 'top' in params:
            query_params.append(('top', params['top']))
        if 'left' in params:
            query_params.append(('left', params['left']))
        if 'width' in params:
            query_params.append(('width', params['width']))
        if 'height' in params:
            query_params.append(('height', params['height']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/shapes', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ShapeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
