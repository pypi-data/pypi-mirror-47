# coding: utf-8

"""
    Web API Swagger specification

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class CellsAutoFilterApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def cells_auto_filter_delete_worksheet_date_filter(self, name, sheet_name, field_index, date_time_grouping_type, **kwargs):
        """
        Removes a date filter.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_delete_worksheet_date_filter(name, sheet_name, field_index, date_time_grouping_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str date_time_grouping_type: (required)
        :param int year:
        :param int month:
        :param int day:
        :param int hour:
        :param int minute:
        :param int second:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_delete_worksheet_date_filter_with_http_info(name, sheet_name, field_index, date_time_grouping_type, **kwargs)
        else:
            (data) = self.cells_auto_filter_delete_worksheet_date_filter_with_http_info(name, sheet_name, field_index, date_time_grouping_type, **kwargs)
            return data

    def cells_auto_filter_delete_worksheet_date_filter_with_http_info(self, name, sheet_name, field_index, date_time_grouping_type, **kwargs):
        """
        Removes a date filter.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_delete_worksheet_date_filter_with_http_info(name, sheet_name, field_index, date_time_grouping_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str date_time_grouping_type: (required)
        :param int year:
        :param int month:
        :param int day:
        :param int hour:
        :param int minute:
        :param int second:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'field_index', 'date_time_grouping_type', 'year', 'month', 'day', 'hour', 'minute', 'second', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_delete_worksheet_date_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_delete_worksheet_date_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_delete_worksheet_date_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_delete_worksheet_date_filter`")
        # verify the required parameter 'date_time_grouping_type' is set
        if ('date_time_grouping_type' not in params) or (params['date_time_grouping_type'] is None):
            raise ValueError("Missing the required parameter `date_time_grouping_type` when calling `cells_auto_filter_delete_worksheet_date_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'date_time_grouping_type' in params:
            query_params.append(('dateTimeGroupingType', params['date_time_grouping_type']))
        if 'year' in params:
            query_params.append(('year', params['year']))
        if 'month' in params:
            query_params.append(('month', params['month']))
        if 'day' in params:
            query_params.append(('day', params['day']))
        if 'hour' in params:
            query_params.append(('hour', params['hour']))
        if 'minute' in params:
            query_params.append(('minute', params['minute']))
        if 'second' in params:
            query_params.append(('second', params['second']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_delete_worksheet_filter(self, name, sheet_name, field_index, **kwargs):
        """
        Delete a filter for a filter column.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_delete_worksheet_filter(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str criteria:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_delete_worksheet_filter_with_http_info(name, sheet_name, field_index, **kwargs)
        else:
            (data) = self.cells_auto_filter_delete_worksheet_filter_with_http_info(name, sheet_name, field_index, **kwargs)
            return data

    def cells_auto_filter_delete_worksheet_filter_with_http_info(self, name, sheet_name, field_index, **kwargs):
        """
        Delete a filter for a filter column.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_delete_worksheet_filter_with_http_info(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str criteria:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'field_index', 'criteria', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_delete_worksheet_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_delete_worksheet_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_delete_worksheet_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_delete_worksheet_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'criteria' in params:
            query_params.append(('criteria', params['criteria']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/filter', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_get_worksheet_auto_filter(self, name, sheet_name, **kwargs):
        """
        Get Auto filter Description
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_get_worksheet_auto_filter(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str folder:
        :param str storage: storage name.
        :return: AutoFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_get_worksheet_auto_filter_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_auto_filter_get_worksheet_auto_filter_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_auto_filter_get_worksheet_auto_filter_with_http_info(self, name, sheet_name, **kwargs):
        """
        Get Auto filter Description
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_get_worksheet_auto_filter_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str folder:
        :param str storage: storage name.
        :return: AutoFilterResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_get_worksheet_auto_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_get_worksheet_auto_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_get_worksheet_auto_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='AutoFilterResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_post_worksheet_auto_filter_refresh(self, name, sheet_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_auto_filter_refresh(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_post_worksheet_auto_filter_refresh_with_http_info(name, sheet_name, **kwargs)
        else:
            (data) = self.cells_auto_filter_post_worksheet_auto_filter_refresh_with_http_info(name, sheet_name, **kwargs)
            return data

    def cells_auto_filter_post_worksheet_auto_filter_refresh_with_http_info(self, name, sheet_name, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_auto_filter_refresh_with_http_info(name, sheet_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_post_worksheet_auto_filter_refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_post_worksheet_auto_filter_refresh`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_post_worksheet_auto_filter_refresh`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/refresh', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_post_worksheet_match_blanks(self, name, sheet_name, field_index, **kwargs):
        """
        Match all blank cell in the list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_match_blanks(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_post_worksheet_match_blanks_with_http_info(name, sheet_name, field_index, **kwargs)
        else:
            (data) = self.cells_auto_filter_post_worksheet_match_blanks_with_http_info(name, sheet_name, field_index, **kwargs)
            return data

    def cells_auto_filter_post_worksheet_match_blanks_with_http_info(self, name, sheet_name, field_index, **kwargs):
        """
        Match all blank cell in the list.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_match_blanks_with_http_info(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'field_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_post_worksheet_match_blanks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_post_worksheet_match_blanks`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_post_worksheet_match_blanks`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_post_worksheet_match_blanks`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/matchBlanks', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_post_worksheet_match_non_blanks(self, name, sheet_name, field_index, **kwargs):
        """
        Match all not blank cell in the list.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_match_non_blanks(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_post_worksheet_match_non_blanks_with_http_info(name, sheet_name, field_index, **kwargs)
        else:
            (data) = self.cells_auto_filter_post_worksheet_match_non_blanks_with_http_info(name, sheet_name, field_index, **kwargs)
            return data

    def cells_auto_filter_post_worksheet_match_non_blanks_with_http_info(self, name, sheet_name, field_index, **kwargs):
        """
        Match all not blank cell in the list.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_post_worksheet_match_non_blanks_with_http_info(name, sheet_name, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param int field_index: (required)
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'field_index', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_post_worksheet_match_non_blanks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_post_worksheet_match_non_blanks`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_post_worksheet_match_non_blanks`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_post_worksheet_match_non_blanks`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/matchNonBlanks', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_color_filter(self, name, sheet_name, range, field_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_color_filter(name, sheet_name, range, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param ColorFilterRequest color_filter:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_color_filter_with_http_info(name, sheet_name, range, field_index, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_color_filter_with_http_info(name, sheet_name, range, field_index, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_color_filter_with_http_info(self, name, sheet_name, range, field_index, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_color_filter_with_http_info(name, sheet_name, range, field_index, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param ColorFilterRequest color_filter:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'color_filter', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_color_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_color_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_color_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_color_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_color_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'color_filter' in params:
            body_params = params['color_filter']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/colorFilter', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_custom_filter(self, name, sheet_name, range, field_index, operator_type1, criteria1, **kwargs):
        """
        Filters a list with a custom criteria.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_custom_filter(name, sheet_name, range, field_index, operator_type1, criteria1, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str operator_type1: (required)
        :param str criteria1: (required)
        :param bool is_and:
        :param str operator_type2:
        :param str criteria2:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_custom_filter_with_http_info(name, sheet_name, range, field_index, operator_type1, criteria1, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_custom_filter_with_http_info(name, sheet_name, range, field_index, operator_type1, criteria1, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_custom_filter_with_http_info(self, name, sheet_name, range, field_index, operator_type1, criteria1, **kwargs):
        """
        Filters a list with a custom criteria.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_custom_filter_with_http_info(name, sheet_name, range, field_index, operator_type1, criteria1, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str operator_type1: (required)
        :param str criteria1: (required)
        :param bool is_and:
        :param str operator_type2:
        :param str criteria2:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'operator_type1', 'criteria1', 'is_and', 'operator_type2', 'criteria2', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_custom_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_custom_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_custom_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_custom_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_custom_filter`")
        # verify the required parameter 'operator_type1' is set
        if ('operator_type1' not in params) or (params['operator_type1'] is None):
            raise ValueError("Missing the required parameter `operator_type1` when calling `cells_auto_filter_put_worksheet_custom_filter`")
        # verify the required parameter 'criteria1' is set
        if ('criteria1' not in params) or (params['criteria1'] is None):
            raise ValueError("Missing the required parameter `criteria1` when calling `cells_auto_filter_put_worksheet_custom_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'operator_type1' in params:
            query_params.append(('operatorType1', params['operator_type1']))
        if 'criteria1' in params:
            query_params.append(('criteria1', params['criteria1']))
        if 'is_and' in params:
            query_params.append(('isAnd', params['is_and']))
        if 'operator_type2' in params:
            query_params.append(('operatorType2', params['operator_type2']))
        if 'criteria2' in params:
            query_params.append(('criteria2', params['criteria2']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/custom', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_date_filter(self, name, sheet_name, range, field_index, date_time_grouping_type, **kwargs):
        """
        add date filter in worksheet 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_date_filter(name, sheet_name, range, field_index, date_time_grouping_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str date_time_grouping_type: (required)
        :param int year:
        :param int month:
        :param int day:
        :param int hour:
        :param int minute:
        :param int second:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_date_filter_with_http_info(name, sheet_name, range, field_index, date_time_grouping_type, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_date_filter_with_http_info(name, sheet_name, range, field_index, date_time_grouping_type, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_date_filter_with_http_info(self, name, sheet_name, range, field_index, date_time_grouping_type, **kwargs):
        """
        add date filter in worksheet 
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_date_filter_with_http_info(name, sheet_name, range, field_index, date_time_grouping_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str date_time_grouping_type: (required)
        :param int year:
        :param int month:
        :param int day:
        :param int hour:
        :param int minute:
        :param int second:
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'date_time_grouping_type', 'year', 'month', 'day', 'hour', 'minute', 'second', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_date_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_date_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_date_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_date_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_date_filter`")
        # verify the required parameter 'date_time_grouping_type' is set
        if ('date_time_grouping_type' not in params) or (params['date_time_grouping_type'] is None):
            raise ValueError("Missing the required parameter `date_time_grouping_type` when calling `cells_auto_filter_put_worksheet_date_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'date_time_grouping_type' in params:
            query_params.append(('dateTimeGroupingType', params['date_time_grouping_type']))
        if 'year' in params:
            query_params.append(('year', params['year']))
        if 'month' in params:
            query_params.append(('month', params['month']))
        if 'day' in params:
            query_params.append(('day', params['day']))
        if 'hour' in params:
            query_params.append(('hour', params['hour']))
        if 'minute' in params:
            query_params.append(('minute', params['minute']))
        if 'second' in params:
            query_params.append(('second', params['second']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/dateFilter', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_dynamic_filter(self, name, sheet_name, range, field_index, dynamic_filter_type, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_dynamic_filter(name, sheet_name, range, field_index, dynamic_filter_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str dynamic_filter_type: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_dynamic_filter_with_http_info(name, sheet_name, range, field_index, dynamic_filter_type, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_dynamic_filter_with_http_info(name, sheet_name, range, field_index, dynamic_filter_type, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_dynamic_filter_with_http_info(self, name, sheet_name, range, field_index, dynamic_filter_type, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_dynamic_filter_with_http_info(name, sheet_name, range, field_index, dynamic_filter_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str dynamic_filter_type: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'dynamic_filter_type', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_dynamic_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_dynamic_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_dynamic_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_dynamic_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_dynamic_filter`")
        # verify the required parameter 'dynamic_filter_type' is set
        if ('dynamic_filter_type' not in params) or (params['dynamic_filter_type'] is None):
            raise ValueError("Missing the required parameter `dynamic_filter_type` when calling `cells_auto_filter_put_worksheet_dynamic_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'dynamic_filter_type' in params:
            query_params.append(('dynamicFilterType', params['dynamic_filter_type']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/dynamicFilter', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_filter(self, name, sheet_name, range, field_index, criteria, **kwargs):
        """
        Adds a filter for a filter column.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_filter(name, sheet_name, range, field_index, criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str criteria: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_filter_with_http_info(name, sheet_name, range, field_index, criteria, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_filter_with_http_info(name, sheet_name, range, field_index, criteria, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_filter_with_http_info(self, name, sheet_name, range, field_index, criteria, **kwargs):
        """
        Adds a filter for a filter column.             
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_filter_with_http_info(name, sheet_name, range, field_index, criteria, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str criteria: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'criteria', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_filter`")
        # verify the required parameter 'criteria' is set
        if ('criteria' not in params) or (params['criteria'] is None):
            raise ValueError("Missing the required parameter `criteria` when calling `cells_auto_filter_put_worksheet_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'criteria' in params:
            query_params.append(('criteria', params['criteria']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/filter', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_filter_top10(self, name, sheet_name, range, field_index, is_top, is_percent, item_count, **kwargs):
        """
        Filter the top 10 item in the list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_filter_top10(name, sheet_name, range, field_index, is_top, is_percent, item_count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param bool is_top: (required)
        :param bool is_percent: (required)
        :param int item_count: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_filter_top10_with_http_info(name, sheet_name, range, field_index, is_top, is_percent, item_count, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_filter_top10_with_http_info(name, sheet_name, range, field_index, is_top, is_percent, item_count, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_filter_top10_with_http_info(self, name, sheet_name, range, field_index, is_top, is_percent, item_count, **kwargs):
        """
        Filter the top 10 item in the list
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_filter_top10_with_http_info(name, sheet_name, range, field_index, is_top, is_percent, item_count, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param bool is_top: (required)
        :param bool is_percent: (required)
        :param int item_count: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'is_top', 'is_percent', 'item_count', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_filter_top10" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'is_top' is set
        if ('is_top' not in params) or (params['is_top'] is None):
            raise ValueError("Missing the required parameter `is_top` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'is_percent' is set
        if ('is_percent' not in params) or (params['is_percent'] is None):
            raise ValueError("Missing the required parameter `is_percent` when calling `cells_auto_filter_put_worksheet_filter_top10`")
        # verify the required parameter 'item_count' is set
        if ('item_count' not in params) or (params['item_count'] is None):
            raise ValueError("Missing the required parameter `item_count` when calling `cells_auto_filter_put_worksheet_filter_top10`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'is_top' in params:
            query_params.append(('isTop', params['is_top']))
        if 'is_percent' in params:
            query_params.append(('isPercent', params['is_percent']))
        if 'item_count' in params:
            query_params.append(('itemCount', params['item_count']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/filterTop10', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cells_auto_filter_put_worksheet_icon_filter(self, name, sheet_name, range, field_index, icon_set_type, icon_id, **kwargs):
        """
        Adds an icon filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_icon_filter(name, sheet_name, range, field_index, icon_set_type, icon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str icon_set_type: (required)
        :param int icon_id: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cells_auto_filter_put_worksheet_icon_filter_with_http_info(name, sheet_name, range, field_index, icon_set_type, icon_id, **kwargs)
        else:
            (data) = self.cells_auto_filter_put_worksheet_icon_filter_with_http_info(name, sheet_name, range, field_index, icon_set_type, icon_id, **kwargs)
            return data

    def cells_auto_filter_put_worksheet_icon_filter_with_http_info(self, name, sheet_name, range, field_index, icon_set_type, icon_id, **kwargs):
        """
        Adds an icon filter.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cells_auto_filter_put_worksheet_icon_filter_with_http_info(name, sheet_name, range, field_index, icon_set_type, icon_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str name: (required)
        :param str sheet_name: (required)
        :param str range: (required)
        :param int field_index: (required)
        :param str icon_set_type: (required)
        :param int icon_id: (required)
        :param bool match_blanks:
        :param bool refresh:
        :param str folder:
        :param str storage: storage name.
        :return: SaaSposeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'sheet_name', 'range', 'field_index', 'icon_set_type', 'icon_id', 'match_blanks', 'refresh', 'folder', 'storage']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cells_auto_filter_put_worksheet_icon_filter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cells_auto_filter_put_worksheet_icon_filter`")
        # verify the required parameter 'sheet_name' is set
        if ('sheet_name' not in params) or (params['sheet_name'] is None):
            raise ValueError("Missing the required parameter `sheet_name` when calling `cells_auto_filter_put_worksheet_icon_filter`")
        # verify the required parameter 'range' is set
        if ('range' not in params) or (params['range'] is None):
            raise ValueError("Missing the required parameter `range` when calling `cells_auto_filter_put_worksheet_icon_filter`")
        # verify the required parameter 'field_index' is set
        if ('field_index' not in params) or (params['field_index'] is None):
            raise ValueError("Missing the required parameter `field_index` when calling `cells_auto_filter_put_worksheet_icon_filter`")
        # verify the required parameter 'icon_set_type' is set
        if ('icon_set_type' not in params) or (params['icon_set_type'] is None):
            raise ValueError("Missing the required parameter `icon_set_type` when calling `cells_auto_filter_put_worksheet_icon_filter`")
        # verify the required parameter 'icon_id' is set
        if ('icon_id' not in params) or (params['icon_id'] is None):
            raise ValueError("Missing the required parameter `icon_id` when calling `cells_auto_filter_put_worksheet_icon_filter`")


        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']
        if 'sheet_name' in params:
            path_params['sheetName'] = params['sheet_name']

        query_params = []
        if 'range' in params:
            query_params.append(('range', params['range']))
        if 'field_index' in params:
            query_params.append(('fieldIndex', params['field_index']))
        if 'icon_set_type' in params:
            query_params.append(('iconSetType', params['icon_set_type']))
        if 'icon_id' in params:
            query_params.append(('iconId', params['icon_id']))
        if 'match_blanks' in params:
            query_params.append(('matchBlanks', params['match_blanks']))
        if 'refresh' in params:
            query_params.append(('refresh', params['refresh']))
        if 'folder' in params:
            query_params.append(('folder', params['folder']))
        if 'storage' in params:
            query_params.append(('storage', params['storage']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/cells/{name}/worksheets/{sheetName}/autoFilter/iconFilter', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SaaSposeResponse',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
