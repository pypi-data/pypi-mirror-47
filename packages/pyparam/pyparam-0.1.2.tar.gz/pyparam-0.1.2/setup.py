# -*- coding: utf-8 -*-
from distutils.core import setup

modules = \
['param']
install_requires = \
['colorama', 'python-simpleconf>=0.1.3,<0.2.0']

setup_kwargs = {
    'name': 'pyparam',
    'version': '0.1.2',
    'description': 'Powerful parameter processing.',
    'long_description': '# pyparam\n[![pypi][1]][2] [![travis][3]][4] [![codacy quality][5]][6] [![codacy quality][7]][6] ![pyver][8]\n\nPowerful parameter processing\n\n## Installation\n`pip install pyparam`\n\n## Usage\n### Parameters from command line arguments\n- Basic usage\n\n\t`program.py`\n\t```python\n\tfrom param import params\n\t# define arguments\n\tparams.opt1 = \'1\' # default value\n\tparams.opt1.desc = \'This is option 1\'\n\t# required option\n\tparams.opt2.required = True\n\tparams.opt2.desc = \'This is option 2\'\n\t# Alias\n\tparams.option2 = params.opt2\n\t# define type of an option\n\tparams.opt3.required = True\n\tparams.opt3.type = int # or \'int\'\n\tparams.opt3.desc = \'This is option 3\'\n\n\tprint(params._parse())\n\t```\n\t```shell\n\t> python program.py\n\t```\n\t![help][9]\n\n\t```shell\n\t> python program.py -opt2 1 -opt3 4 -opt1 5\n\t{\'opt1\': \'5\', \'opt2\': 1, \'option2\': 1, \'opt3\': 4}\n\n\t> python program.py -opt2 True -opt3 4 -opt1 5\n\t{\'opt1\': \'5\', \'opt2\': True, \'option2\': 1, \'opt3\': 4}\n\n\t> python program.py -opt2 1 -opt3 x -opt1 5\n\tTraceback (most recent call last):\n\t... ...\n\t\traise ParamTypeError(\'Unable to coerce value %r to type %r\' % (value, typename))\n\tparam.ParamTypeError: Unable to coerce value \'x\' to type \'int:\'\n\t```\n\n\t- Different prefix\n\t```python\n\tparams._prefix = \'--\'\n\t```\n\t```shell\n\t> python program.py --opt2 1 --opt3 4 --opt1 5\n\t{\'opt1\': \'5\', \'opt2\': 1, \'option2\': 1, \'opt3\': 4}\n\t```\n\n- Short and long options\n\t```python\n\tparams._prefix = \'-\'\n\tparams.o.required = True\n\tparams.o.type = str\n\tparams.o.desc = \'The output file.\'\n\tparams[\'-output\'] = params.o\n\t```\n\t```shell\n\t> python program.py\n\t```\n\t![short_long][10]\n\n\t```shell\n\t> python program.py -o /path/to/outfile\n\t{\'o\': \'/path/to/outfile\', \'-output\': \'/path/to/outfile\'}\n\t# Note you have to use "-output" to access the value instead of "output"\n\t```\n\n- Callbacks\n\t```python\n\tfrom os import path\n\tfrom param import params\n\tparams._prefix = \'-\'\n\tparams.o.required = True\n\tparams.o.callback = lambda param: \'Directory of output file does not exist.\' \\\n\t\tif not path.exists(path.dirname(param.value)) else None\n\tprint(params._parse())\n\t```\n\t```shell\n\tpython program.py -o /path/not/exists/outfile\n\t```\n\t![callback_error][11]\n\n\tModify value with other options:\n\t```python\n\tparams.amplifier = 10\n\tparams.number.type = int\n\tparams.number.callback = lambda param, ps: param.setValue(param.value * ps.amplifier.value)\n\t```\n\t```shell\n\t> python program.py -amplifier 100 -number 2\n\t{\'amplifier\': 100, \'number\': 200}\n\t```\n\n- Type redefinition\n\t```python\n\t# option \'opt\' defined but no value and no type defined (\'auto\' implied)\n\tparam.opt.desc = \'Option\'\n\t```\n\t```shell\n\t> python program.py -opt 1\n\t{\'opt\': 1}\n\n\t> python program.py -opt a\n\t{\'opt\': \'a\'}\n\n\t# force str\n\t> python program.py -opt:str 1\n\t{\'opt\': \'1\'}\n\t```\n\n- List/Array options\n\t```python\n\tparams.infiles.type = list\n\t```\n\t```shell\n\t> python program.py -infiles file1 file2 file3 # or\n\t> python program.py -infiles file1 -infiles file2 -infiles file3\n\t{\'infiles\': [\'file1\', \'file2\', \'file3\']}\n\t```\n\n\tDefault values:\n\t```python\n\tparams.infiles = [\'file0\']\n\t```\n\t```shell\n\t> python program.py -infiles file1 file2 file3\n\t{\'infiles\': [\'file0\', \'file1\', \'file2\', \'file3\']}\n\t```\n\n\tReset list options\n\t```shell\n\t> python program.py -infiles:reset file1 -infiles file2 -infiles file3 # or\n\t> python program.py -infiles:reset file1 file2 file3 # or\n\t> python program.py -infiles:list:reset file1 file2 file3\n\t# or use short names `l:r` for `list:reset`\n\t{\'infiles\': [\'file1\', \'file2\', \'file3\']}\n\t```\n\n\tElements are convert using `auto` type:\n\t```shell\n\t> python program.py -infiles file1 file2 3\n\t{\'infiles\': [\'file0\', \'file1\', \'file2\', 3]}\n\t# to force all str type, note the option is reset\n\t> python program.py -infiles:list:str file1 file2 3\n\t{\'infiles\': [\'file1\', \'file2\', \'3\']}\n\t```\n\n\tList of list options\n\t```python\n\tparams.files = [\'file01\', \'file02\']\n\tparams.files.type = \'list:list\'\n\t```\n\t```shell\n\t> python program.py -files file11 file12 -files 3\n\t{\'infiles\': [[\'file01\', \'file02\'], [\'file11\', \'file12\'], [\'3\']]}\n\t# Note that list:list don\'t to auto conversion for elements\n\t# reset list:list\n\t> python program.py -files:r file11 file12 -files 3\n\t{\'infiles\': [[\'file11\', \'file12\'], [\'3\']]}\n\t```\n\n- Positional options\n\t```python\n\tparams._.desc = \'Positional option\'\n\t```\n\t```shell\n\t> python program.py file1\n\t{\'_\': [\'file1\']}\n\t```\n\n\tIf last option is a list option:\n\t```python\n\tparams.infiles = []\n\tparams._.desc = \'Positional option\'\n\t```\n\t```shell\n\t> python program.py -infiles file1 file2 file3\n\t{\'infiles\': [\'file1\', \'file2\', \'file3\'], \'_\': None}\n\t# If I want file3 to be the positional option\n\t> python program.py -infiles file1 file2 - file3\n\t{\'infiles\': [\'file1\', \'file2\'], \'_\': \'file3\'}\n\t```\n\n- Dict options\n\t```python\n\tparams.config = {\'default\': 1}\n\t```\n\t```shell\n\t> python program.py -config.width 10 -config.height 20 -config.sub.switch\n\t{\'config\': {\'default\': 1, \'width\': 10, \'height\': 20, \'sub\': {\'switch\': True}}}\n\t# reset dict option\n\t> python program.py -config:r -config.width 10 -config.height 20\n\t{\'config\': {\'width\': 10, \'height\': 20}}\n\t```\n\n- Arbitrary parsing\n\tParse the arguments without definition\n\t```python\n\tprint(params._parse(arbi = True))\n\t```\n\t```shell\n\t> python program.py -a 1 -b:list 2 3 -c:dict -c.a.b 4 -c.a.c 5 -d:list:list 6 7 -d 8 9\n\t{\'a\': 1, \'b\': [2, 3], \'c\': {\'a\': {\'b\': 4, \'c\': 5}}, \'d\': [[\'6\', \'7\'], [\'8\', \'9\']]}\n\t```\n\n### Help message\n- Themes\n\t```python\n\tfrom param import params\n\tparams._theme = \'blue\'\n\tprint(params._parse())\n\t```\n\t```shell\n\t> python program.py\n\t```\n\t![theme_blue][13]\n\t```python\n\tparams._theme = \'plain\'\n\t```\n\t![theme_blue][14]\n\n\tCustomize theme based on default theme:\n\t```python\n\tdict(\n\t\terror   = colorama.Fore.RED,\n\t\twarning = colorama.Fore.YELLOW,\n\t\ttitle   = colorama.Style.BRIGHT + colorama.Fore.CYAN,  # section title\n\t\tprog    = colorama.Style.BRIGHT + colorama.Fore.GREEN, # program name\n\t\tdefault = colorama.Fore.MAGENTA,              # default values\n\t\toptname = colorama.Style.BRIGHT + colorama.Fore.GREEN,\n\t\topttype = colorama.Fore.BLUE,\n\t\toptdesc = \'\'),\n\t```\n\t```python\n\timport colorama\n\tfrom param import params\n\tparams._theme = dict(title = colorama.Style.BRIGHT + colorama.Fore.YELLOW)\n\tprint(params._parse())\n\t```\n\t![theme_custom][15]\n\n- Manipulation of the message\n\tHelp message is first transformed into a `list`, where the element is a `tuple` of (option name, type and description) if it is an option otherwise a string, and then formatted with the `HelpAssembler` class.\n\tA callback is available to operate on the transformed message so that the help page can be hacked.\n\t```python\n\tfrom param import params\n\tparams.a = 1\n\tprint(params._helpitems())\n\t# OrderedDict([\n\t#   (\'usage\', [\'{prog} [OPTIONS]\']),\n\t#   (\'OPTIONAL OPTIONS\', [\n\t#       (\'-a\', \'int\', [\'Default: 1\']),\n\t#       (\'-h, --help, -H\', \'\', [\'Print this help information\'])\n\t#   ])\n\t# ])\n\t```\n\t```python\n\tfrom param import params\n\tparams.a = 1\n\n\t# add description for the program\n\tparams._desc = \'A sample program.\'\n\n\tdef helpx(items):\n\t\t# add a section\n\t\titems[\'Java options\'] = [(\'-java.io.tmpdir\', \'dir\', [\'Tmpdir for java.\'])]\n\t\treturn items\n\n\tparams._helpx = helpx\n\tparams._parse()\n\t```\n\t```shell\n\t> python program.py\n\t```\n\t![helpx][16]\n\n### Parameters from dict\n-\n\t```python\n\tfrom param import params\n\tparams._load({\n\t\t\'opt1\': \'1\',\n\t\t\'opt2.required\': True,\n\t\t\'opt2.desc\': \'This is option 2\',\n\t\t\'option2.alias\': \'opt2\',\n\t\t\'opt3.required\': True,\n\t\t\'opt3.type\': \'int\',\n\t\t\'opt3.desc\': \'This is option 3\',\n\t}, show = True)\n\t# show = False by default, params loaded from dict \n\t# will not be show in help page\n\tprint(params._parse())\n\t```\n\t```shell\n\tpython program.py\n\t```\n\t![fromdict][9]\n\n\tIf an option is defined before loading, then the value and attributes will be overwritten.\n\n### Parameters from file\n-\n\tParameters can also be loaded from a configuration file that is supported by [`python-simpleconf`][17]\n\t`sample.ini`\n\t```ini\n\t[default]\n\topt1 = 1\n\topt1.desc = \'This is option 1\'\n\t[profile1]\n\topt1 = 2\n\t```\n\t```python\n\tparams._loadFile(\'sample.ini\', profile = \'default\')\n\tprint(params.dict())\n\t# {\'opt1\': 1}\n\t# profile = \'profile1\'\n\t# {\'opt1\': 2}\n\t```\n### Different wrapper for `_parse` return value\n-\n\t```python\n\t# python-box\n\tfrom box import Box\n\tfrom param import params\n\tparams.opt = {\'a\': {\'b\': 1}}\n\targs = params._parse(dict_wrapper = Box)\n\targs.opt.a.b == 1\n\t```\n\n### Sub-commands\n-\n\t```python\n\tfrom param import commands\n\t# common options for all commands\n\tcommands._.workdir.desc      = \'The work directory.\'\n\tcommands._.workdir.required  = \'The work directory.\'\n\tcommands.show                = \'Shows information\'\n\tcommands.show.all            = False\n\tcommands.show.all.desc       = \'Show all information\'\n\tcommands.show.depth          = 2\n\tcommands.show.depth.desc     = \'Show the information on depth\'\n\t# alias\n\tcommands.list                = commands.show\n\tcommands.run                 = \'Run script\'\n\tcommands.run.script.desc     = \'The script to run\'\n\tcommands.run.script.required = True\n\tprint(commands._parse())\n\t```\n\t```shell\n\t> python program.py\n\t```\n\t![subcommand][12]\n\t```shell\n\t> python program.py -workdir ./workdir show -depth 3 -all\n\t(\'show\', {\'all\': True, \'depth\': 3}, {\'workdir\': \'./workdir\'})\n\t#command,command options,          common options\n\t```\n\n\n\n\n[1]: https://img.shields.io/pypi/v/pyparam.svg?style=flat-square\n[2]: https://pypi.org/project/pyparam/\n[3]: https://img.shields.io/travis/pwwang/pyparam.svg?style=flat-square\n[4]: https://travis-ci.org/pwwang/pyparam\n[5]: https://img.shields.io/codacy/grade/a34b1afaccf84019a6b138d40932d566.svg?style=flat-square\n[6]: https://app.codacy.com/project/pwwang/pyparam/dashboard\n[7]: https://img.shields.io/codacy/coverage/a34b1afaccf84019a6b138d40932d566.svg?style=flat-square\n[8]: https://img.shields.io/pypi/pyversions/pyparam.svg?style=flat-square\n[9]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/helpx.png\n[10]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/short_long.png\n[11]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/callback_error.png\n[12]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/subcommand.png\n[13]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/theme_blue.png\n[14]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/theme_plain.png\n[15]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/theme_custom.png\n[16]: https://raw.githubusercontent.com/pwwang/pyparam/d129bfa10e0043313f5c152df1bb64977b8d82e2/static/helpx.png\n[17]: https://github.com/pwwang/simpleconf',
    'author': 'pwwang',
    'author_email': 'pwwang@pwwang.com',
    'url': None,
    'py_modules': modules,
    'install_requires': install_requires,
    'python_requires': '>=3.4,<4.0',
}


setup(**setup_kwargs)
