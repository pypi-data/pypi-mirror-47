*$FROM R05-Lexer
$EXTERN R05-LexScan-File, R05-LexScan-String, TkEOF, TkExtern, TkEnum, TkEEnum,
  TkEntry, TkName, TkSemicolon, TkNative, TkComma, TkOpenBlock, TkCloseBlock,
  TkChar, TkNumber, TkVariable, TkOpen, Bracket, CallBracket, TkClose,
  TkReplace, TkError, TkUnexpected, StrFromToken;

*$FROM LibraryEx
$EXTERN Success, Fails, Map, Reduce;

*$FROM R05-AST
$EXTERN Extern, Local, Entry, Native, Function, Sentences, Symbol, Char, Number,
  Name, Variable, Brackets, CallBrackets;


/**
  <R05-Parse-File e.SourceFile>
    == Success e.Tree
    == Fails e.Errors

  e.Errors ::= ((s.Row s.Col) e.Message)*
*/
$ENTRY R05-Parse-File {
  e.SourceFile = <R05-Parse-Tokens <R05-LexScan-File e.SourceFile>>;
}

/**
  <R05-Parse-String e.String>
    == Success e.Tree
    == Fails e.Errors
*/
$ENTRY R05-Parse-String {
  e.String = <R05-Parse-Tokens <R05-LexScan-String e.String>>;
}

/**
  <R05-Parse-Tokens e.Tokens>
    == Success e.Tree
    == Fails e.Errors
*/
$ENTRY R05-Parse-Tokens {
  e.Tokens =
    <R05-Parse-Aux
      <SemanticCheck
        <ParseProgram e.Tokens <EL-Create>>
      >
    >
}

R05-Parse-Aux {
  t.ErrorList e.Tree =
    <R05-Parse-SwErrors (<EL-Destroy t.ErrorList>) e.Tree>;
}

R05-Parse-SwErrors {
  (/* no errors */) e.Tree = Success e.Tree;

  (e.Errors) e.Tree = Fails <SortErrors e.Errors>;
}

SortErrors {
  e.Errors = <DoSortErrors (/* sorted */) e.Errors>;
}

DoSortErrors {
  (e.Sorted) /* unsorted */ = e.Sorted;

  (e.Sorted) t.Next e.Unsorted =
    <DoSortErrors
      (<SortErrors-Insert e.Sorted t.Next>)
      e.Unsorted
    >;
}

SortErrors-Insert {
  /* пусто */ t.Next = t.Next;

  e.Sorted t.Great t.Next =
    <SortErrors-Insert-Compare
      e.Sorted t.Great t.Next <CompareError t.Great t.Next>
    >;
}

SortErrors-Insert-Compare {
  e.Sorted t.Great t.Next '+' = <SortErrors-Insert e.Sorted t.Next> t.Great;
  e.Sorted t.Great t.Next s.Other = e.Sorted t.Great t.Next;
}

CompareError {
  ((s.Row s.Col1) e.Message1) ((s.Row s.Col2) e.Message2) =
    <Compare s.Col1 s.Col2>;

  ((s.Row1 s.Col1) e.Message1) ((s.Row2 s.Col2) e.Message2) =
    <Compare s.Row1 s.Row2>;
}


*$ENUM Program, Element

/*
  Program ::= Program Element | Program ';' | ε.

  <ParseProgram e.Stack e.Tokens t.ErrorList>
    == t.ErrorList (e.References) e.Tree
*/
ParseProgram {
  /* Конец разбора */
  (Program (e.References) e.Tree) (TkEOF t.SrcPos) t.ErrorList =
    t.ErrorList (e.References) e.Tree;

  /* Program ::= Program Element */
  (Program (e.References) e.Tree) (Element (e.ElementReferences) e.Elements)
  e.Tokens t.ErrorList =
    <ParseProgram
      (Program (e.References e.ElementReferences) e.Tree e.Elements)
      e.Tokens t.ErrorList
    >;

  /* Program ::= Program ';' */
  (Program (e.References) e.Tree) (TkSemicolon t.Pos) e.Tokens t.ErrorList =
    <ParseProgram (Program (e.References) e.Tree) e.Tokens t.ErrorList>;

  /* Program ::= Program … */
  (Program (e.References) e.Tree) e.Tokens t.ErrorList =
    <ParseProgram
      (Program (e.References) e.Tree) <ParseElement e.Tokens t.ErrorList>
    >;

  /* Program ::= … */
  e.Tokens t.ErrorList =
    <ParseProgram (Program (/* references */) /* tree */) e.Tokens t.ErrorList>;
}


*$ENUM List

/*
  Element ::= List ';' | Function | NATIVE-CODE.

  <ParseElement e.Stack e.Tokens t.ErrorList>
    == (Element (e.References) e.Elements) e.Tokens t.ErrorList
*/
ParseElement {
  /* Element ::= List ';' */
  (List s.ScopeClass e.Names) (TkSemicolon t.SrcPos) e.Tokens t.ErrorList =
    (Element
      (/* no references */)
      <Map (parser_MakeListFunction s.ScopeClass) e.Names>
    )
    e.Tokens t.ErrorList;

  /* Element ::= List … */
  (List s.ScopeClass e.Names) t.Unexpected e.Tail t.ErrorList =
    <ParseElement
      (List s.ScopeClass e.Names) (TkSemicolon NO-POS) t.Unexpected e.Tail
      <EL-AddUnexpected t.ErrorList t.Unexpected 'semicolon'>
    >;

  /* Element ::= List~ … */
  (TkEnum t.SrcPos) e.Tokens t.ErrorList =
    <ParseElement <ParseList (TkEnum t.SrcPos) e.Tokens t.ErrorList>>;

  (TkEEnum t.SrcPos) e.Tokens t.ErrorList =
    <ParseElement <ParseList (TkEEnum t.SrcPos) e.Tokens t.ErrorList>>;

  (TkExtern t.SrcPos) e.Tokens t.ErrorList =
    <ParseElement <ParseList (TkExtern t.SrcPos) e.Tokens t.ErrorList>>;


  /* Element ::= Function */
  (Function t.SrcPos s.ScopeClass (e.Name) (e.References) e.Body) e.Tokens
  t.ErrorList =
    (Element
      (e.References)
      (Function t.SrcPos s.ScopeClass (e.Name) e.Body)
    )
    e.Tokens t.ErrorList;

  /* Element ::= Function~ */
  (TkEntry t.SrcPos) e.Tokens t.ErrorList =
    <ParseElement
      <ParseFunction (TkEntry t.SrcPos) e.Tokens t.ErrorList>
    >;

  (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    <ParseElement
      <ParseFunction (TkName t.SrcPos e.Name) e.Tokens t.ErrorList>
    >;


  /* Element ::= NATIVE-CODE */
  (TkNative t.SrcPos e.Native) e.Tokens t.ErrorList =
    (Element (/* no references */) (Native e.Native)) e.Tokens t.ErrorList;

  (TkEOF t.SrcPos) t.ErrorList =
    (TkEOF t.SrcPos)
    <EL-AddUnexpected t.ErrorList (TkEOF t.SrcPos) 'directive or name'>;

  t.Unexpected e.Tokens t.ErrorList =
    e.Tokens <EL-AddUnexpected t.ErrorList t.Unexpected 'directive or name'>;
}

$ENTRY parser_MakeListFunction {
  s.ScopeClass (t.SrcPos e.Name) =
    (Function t.SrcPos s.ScopeClass (e.Name) Sentences /* пусто */);
}


*$ENUM ListKeyWord

/*
  List ::= List ',' NAME | ListKeyWord NAME.

  <ParseList e.Stack e.Tokens t.ErrorList>
    == (List s.ScopeClass (t.SrcPos e.Name)*) e.Tokens t.ErrorList
*/
ParseList {
  /* List ::= List ',' NAME */
  (List s.ScopeClass e.Names)
  (TkComma t.CommaSrcPos) (TkName t.NameSrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names (t.NameSrcPos e.Name)) e.Tokens t.ErrorList
    >;

  (List s.ScopeClass e.Names) (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names (t.SrcPos e.Name))
      e.Tokens
      <EL-AddErrorAt t.ErrorList t.SrcPos 'expected comma'>
    >;

  (List s.ScopeClass e.Names) (TkComma t.SrcPos) e.Tokens t.ErrorList =
    <ParseList
      (List s.ScopeClass e.Names) e.Tokens
      <EL-AddErrorAt t.ErrorList t.SrcPos 'missed function name'>
    >;

  (List s.ScopeClass e.Names) e.Tokens t.ErrorList =
    (List s.ScopeClass e.Names) e.Tokens t.ErrorList;

  /* List ::= ListKeyWord NAME */
  (ListKeyWord s.ScopeClass) (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    <ParseList (List s.ScopeClass (t.SrcPos e.Name)) e.Tokens t.ErrorList>;

  (ListKeyWord s.ScopeClass) t.Unexpected e.Tokens t.ErrorList =
    (List s.ScopeClass) t.Unexpected e.Tokens
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>;

  /* List ::= ListKeyWord~ … */
  e.Tokens t.ErrorList =
    <ParseList <ParseListKeyWord e.Tokens t.ErrorList>>;
}


/*
  ListKeyWord ::= '$ENUM' | '$EENUM' | '$EXTERN'.

  <ParseListKeyWord e.Tokens t.ErrorList>
    == (ListKeyWord s.ScopeClass) e.Tokens t.ErrorList
*/
ParseListKeyWord {
  (TkEnum t.SrcPos) e.Tokens t.ErrorList =
    (ListKeyWord Local) e.Tokens t.ErrorList;

  (TkEEnum t.SrcPos) e.Tokens t.ErrorList =
    (ListKeyWord Entry) e.Tokens t.ErrorList;

  (TkExtern t.SrcPos) e.Tokens t.ErrorList =
    (ListKeyWord Extern) e.Tokens t.ErrorList;

  /* предложение не должно выполняться, но должно быть для единообразия */
  t.Unexpected e.Tokens t.ErrorList =
    (ListKeyWord Extern) t.Unexpected e.Tokens
    <EL-AddUnexpected t.ErrorList t.Unexpected 'directive'>;
}


*$ENUM Scope, Body

/*
  Function ::= Scope NAME '{' Body '}'.

  <ParseFunction e.Stack e.Tokens t.ErrorList>
    == (Function t.SrcPos s.ScopeClass (e.Name) (e.References) e.Body)?
       e.Tokens t.ErrorList
*/
ParseFunction {
  /* Function ::= Scope NAME '{' Body '}' */
  (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name) (TkOpenBlock t.OpenSrcPos)
  (Body (e.References) e.Body) (TkCloseBlock t.CloseSrcPos) e.Tokens
  t.ErrorList =
    (Function t.NameSrcPos s.ScopeClass (e.Name) (e.References) e.Body)
    e.Tokens t.ErrorList;

  (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name) (TkOpenBlock t.OpenSrcPos)
  (Body (e.References) e.Body) t.Unexpected e.Tokens t.ErrorList =
    <ParseFunction
      (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name)
      (TkOpenBlock t.OpenSrcPos) (Body (e.References) e.Body)
      (TkCloseBlock NO-POS) t.Unexpected e.Tokens
      <EL-AddUnexpected t.ErrorList t.Unexpected '}'>
    >;

  /* Function ::= Scope NAME '{' Body~ … */
  (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name) (TkOpenBlock t.OpenSrcPos)
  e.Tokens t.ErrorList =
    <ParseFunction
      (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name)
      (TkOpenBlock t.OpenSrcPos)
      <ParseBody e.Tokens t.ErrorList>
    >;

  (Scope s.ScopeClass) (TkName t.NameSrcPos e.Name) t.Unexpected
  e.Tokens t.ErrorList =
    t.Unexpected e.Tokens
    <EL-AddUnexpected t.ErrorList t.Unexpected 'open brace'>;

  (Scope s.ScopeClass) (TkOpenBlock t.OpenSrcPos) e.Tokens t.ErrorList =
    <ParseFunction
      (Scope s.ScopeClass) (TkName t.OpenSrcPos 'CTHULHU-FHTAGN')
      (TkOpenBlock t.OpenSrcPos) e.Tokens
      <EL-AddErrorAt t.ErrorList t.OpenSrcPos 'function name is missed'>
    >;

  (Scope s.ScopeClass) t.Unexpected e.Tokens t.ErrorList =
    t.Unexpected e.Tokens
    <EL-AddUnexpected t.ErrorList t.Unexpected 'function name'>;

  /* Function ::= Scope~ … */
  e.Tokens t.ErrorList =
    <ParseFunction <ParseScope e.Tokens t.ErrorList>>;
}

/*
  Scope ::= '$ENTRY' | ε.
*/
ParseScope {
  (TkEntry t.SrcPos) e.Tokens t.ErrorList = (Scope Entry) e.Tokens t.ErrorList;
  e.Tokens t.ErrorList = (Scope Local) e.Tokens t.ErrorList;
}


/*
  Body ::= Sentences | NATIVE-CODE | ε.

  <ParseBody e.Stack e.Tokens t.ErrorList>
    == (Body (e.References) e.Body) e.Tokens t.ErrorList
*/
ParseBody {
  /* Body ::= ε */
  (TkCloseBlock t.SrcPos) e.Tokens t.ErrorList =
    (Body (/* no references */) Sentences /* no sentences */)
    (TkCloseBlock t.SrcPos) e.Tokens t.ErrorList;

  /* Body ::= NATIVE-CODE */
  (TkNative t.SrcPos e.Native) e.Tokens t.ErrorList =
    (Body (/* no references */) Native e.Native) e.Tokens t.ErrorList;

  /* Body ::= Sentences */
  (Sentences (e.References) e.Sentences) e.Tokens t.ErrorList =
    (Body (e.References) Sentences e.Sentences) e.Tokens t.ErrorList;

  /* Body ::= Sentences~ … */
  e.Tokens t.ErrorList =
    <ParseBody <ParseSentences e.Tokens t.ErrorList>>;
}


*$ENUM Sentence

/*
  Sentences ::= Sentence | Sentences Sentence.

  <ParseSentences e.Stack e.Tokens t.ErrorList>
    == (Sentences (e.References) e.Sentences) e.Tokens t.ErrorList
*/
ParseSentences {
  /* Sentences ::= Sentences / '}' */
  (Sentences (e.References) e.Sentences)
  (TkCloseBlock t.CloseBlockPos) e.Tokens t.ErrorList =
    (Sentences (e.References) e.Sentences)
    (TkCloseBlock t.CloseBlockPos) e.Tokens t.ErrorList;

  /* Sentences ::= Sentences Sentence */
  (Sentences (e.References) e.Sentences)
  (Sentence (e.ReferencesOne) e.OneSentence)
  e.Tokens t.ErrorList =
    <ParseSentences
      (Sentences (e.References e.ReferencesOne) e.Sentences (e.OneSentence))
      e.Tokens t.ErrorList
    >;

  /* Sentences ::= Sentences Sentence~ */
  (Sentences (e.References) e.Sentences) e.Tokens t.ErrorList =
    <ParseSentences
      (Sentences (e.References) e.Sentences)
      <ParseSentence e.Tokens t.ErrorList>
    >;

  /* Sentences ::= Sentence */
  (Sentence (e.References) e.Sentence) e.Tokens t.ErrorList =
    <ParseSentences
      (Sentences (e.References) (e.Sentence)) e.Tokens t.ErrorList
    >;

  /* Sentences ::= Sentence~ */
  e.Tokens t.ErrorList =
    <ParseSentences
      <ParseSentence e.Tokens t.ErrorList>
    >;
}


*$ENUM Pattern, Result

/*
  Sentence ::= Pattern '=' Result ';' | Pattern '=' Result / '}'.

  <ParseSentence e.Stack e.Tokens t.ErrorList>
    == (Sentence (e.References) e.Sentence) e.Tokens t.ErrorList
  e.Sentence ::= (e.Pattern) (e.Result)
*/
ParseSentence {
  /* Sentence ::= Pattern '=' Result ';' */
  (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace t.ReplaceSrcPos)
  (Result (e.ResultRef) e.Result) (TkSemicolon t.SemicolonSrcPos)
  e.Tokens t.ErrorList =
    (Sentence (e.PatternRef e.ResultRef) (e.Pattern) (e.Result))
    e.Tokens t.ErrorList;

  /* Sentence ::= Pattern '=' Result / '}' */
  (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace t.ReplaceSrcPos)
  (Result (e.ResultRef) e.Result) (TkCloseBlock t.CloseBlockPos)
  e.Tokens t.ErrorList =
    (Sentence (e.PatternRef e.ResultRef) (e.Pattern) (e.Result))
    (TkCloseBlock t.CloseBlockPos) e.Tokens t.ErrorList;

  /* Sentence ::= Pattern '=' Result */
  (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace t.ReplaceSrcPos)
  (Result (e.ResultRef) e.Result)
  t.Unexpected e.Tokens t.ErrorList =
    <ParseSentence
      (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace t.ReplaceSrcPos)
      (Result (e.ResultRef) e.Result) (TkCloseBlock NO-POS)
      t.Unexpected e.Tokens
      <EL-AddUnexpected t.ErrorList t.Unexpected '"}"'>
    >;


  /* Sentence ::= Pattern '=' Result~ */
  (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace t.ReplaceSrcPos)
  e.Tokens t.ErrorList =
    <ParseSentence
      (Pattern (e.PatternRef) (e.Variables) e.Pattern)
      (TkReplace t.ReplaceSrcPos)
      <ParseResult TopLevel e.Tokens (e.Variables) t.ErrorList>
    >;

  /* Sentence ::= Pattern */
  (Pattern (e.PatternRef) (e.Variables) e.Pattern)
  t.Unexpected e.Tokens t.ErrorList =
    <ParseSentence
      (Pattern (e.PatternRef) (e.Variables) e.Pattern) (TkReplace NO-POS)
      t.Unexpected e.Tokens
      <EL-AddUnexpected t.ErrorList t.Unexpected '"="'>
    >;

  /* Sentence ::= Pattern~ */
  e.Tokens t.ErrorList =
    <ParseSentence
      <ParsePattern TopLevel e.Tokens t.ErrorList>
    >;
}


*$ENUM PatternTerm, NoTerm, TopLevel, Nested

/*
  Pattern ::= Pattern PatternTerm | ε.

  <ParsePattern s.Level e.Stack e.Tokens t.ErrorList>
    == (Pattern (e.References) (e.Variables) e.Pattern)

  s.Level ::= TopLevel | Nested
  e.Variables ::= (s.Mode e.Index)*
*/
ParsePattern {
  /* Pattern ::= Pattern PatternTerm */
  s.Level
  (Pattern (e.References) (e.Variables) e.Pattern)
  (PatternTerm (e.TermReferences) (e.TermVariables) t.Term)
  e.Tokens t.ErrorList =
    <ParsePattern
      s.Level
      (Pattern
        (e.References e.TermReferences)
        (<CleanupDoubleVars e.TermVariables (e.Variables)>)
        e.Pattern t.Term
      )
      e.Tokens t.ErrorList
    >;

  /* Pattern ::= Pattern / NoTerm */
  s.Level (Pattern (e.References) (e.Variables) e.Pattern) (NoTerm)
  e.Tokens t.ErrorList =
    (Pattern (e.References) (e.Variables) e.Pattern)
    e.Tokens t.ErrorList;

  /*
    Восстановление после ошибок — лишняя закрывающая скобка на верхнем уровне
    Pattern ::= Pattern ')'
    Pattern ::= Pattern '>'
  */
  TopLevel (Pattern (e.References) (e.Variables) e.Pattern)
  (TkClose t.SrcPos s.CloseBracket)
  e.Tokens t.ErrorList =
    <ParsePattern
      TopLevel (Pattern (e.References) (e.Variables) e.Pattern)
      e.Tokens
      <EL-AddErrorAt
        t.ErrorList t.SrcPos 'Unbalanced bracket "' <TkClose s.CloseBracket> '"'
      >
    >;

  /* Pattern ::= Pattern PatternTerm~ */
  s.Level (Pattern (e.References) (e.Variables) e.Pattern)
  e.Tokens t.ErrorList =
    <ParsePattern
      s.Level (Pattern (e.References) (e.Variables) e.Pattern)
      <ParsePatternTerm e.Tokens t.ErrorList>
    >;

  /* Pattern ::= ε */
  s.Level e.Tokens t.ErrorList =
    <ParsePattern
      s.Level
      (Pattern (/* no references */) (/* no variables */) /* no terms */)
      e.Tokens t.ErrorList
    >;
}

CleanupDoubleVars {
  e.NewVariables-B (s.Mode e.Index) e.NewVariables-E
  (e.OldVariables-B (s.Mode e.Index) e.OldVariables-E) =
    <CleanupDoubleVars
      e.NewVariables-E
      (e.NewVariables-B e.OldVariables-B (s.Mode e.Index) e.OldVariables-E)
    >;

  e.NewVariables (e.OldVariables) = e.NewVariables e.OldVariables;
}


/*
  PatternTerm ::= Char | Number | Name | Variable | '(' Pattern ')'.

  <ParsePatternTerm e.Stack e.Tokens t.ErrorList>
    == (PatternTerm (e.References) (e.Variables) t.Term) e.Tokens t.ErrorList
    == (NoTerm) e.Tokens t.ErrorList
*/
ParsePatternTerm {
  /* Обработка литералов атомов */

  /* PatternTerm ::= CHAR */
  (TkChar t.SrcPos s.Char) e.Tokens t.ErrorList =
    (PatternTerm () () (Symbol Char s.Char)) e.Tokens t.ErrorList;

  /* PatternTerm ::= NUMBER */
  (TkNumber t.SrcPos s.Number) e.Tokens t.ErrorList =
    (PatternTerm () () (Symbol Number s.Number)) e.Tokens t.ErrorList;

  /* PatternTerm ::= NAME */
  (TkName t.SrcPos e.Name) e.Tokens t.ErrorList =
    (PatternTerm ((t.SrcPos e.Name)) () (Symbol Name t.SrcPos e.Name))
    e.Tokens t.ErrorList;

  /* Переменные */

  /* PatternTerm ::= VARIABLE */
  (TkVariable t.SrcPos s.Mode e.Index) e.Tokens t.ErrorList =
    (PatternTerm () ((s.Mode e.Index)) (Variable s.Mode e.Index))
    e.Tokens t.ErrorList;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту" закрывающую
    скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  /* PatternTerm ::= '(' Pattern ')' */
  (TkOpen t.OpenSrcPos s.BracketsSign)
  (Pattern (e.References) (e.Variables) e.Pattern)
  (TkClose t.CloseSrcPos s.BracketsSign)
  e.Tokens t.ErrorList =
    (PatternTerm (e.References) (e.Variables) (Brackets e.Pattern))
    e.Tokens t.ErrorList;

  /* PatternTerm ::= '(' Pattern  # ошибка */
  (TkOpen t.OpenSrcPos s.BracketsSign)
  (Pattern (e.References) (e.Variables) e.Pattern)
  /* нет скобки */ e.Tokens t.ErrorList =
    (PatternTerm (e.References) (e.Variables) (Brackets e.Pattern)) e.Tokens
    <EL-AddErrorAt
      t.ErrorList t.OpenSrcPos 'Unbalanced bracket "' <TkOpen s.BracketsSign> '"'
    >;

  /* PatternTerm ::= '(' Pattern~ */
  (TkOpen t.OpenSrcPos Bracket) e.Tokens t.ErrorList =
    <ParsePatternTerm
      (TkOpen t.OpenSrcPos Bracket) <ParsePattern Nested e.Tokens t.ErrorList>
    >;

  /* PatternTerm ::= '<' Pattern~  # ошибка */
  (TkOpen t.OpenSrcPos CallBracket) e.Tokens t.ErrorList =
    <ParsePatternTerm
      (TkOpen t.OpenSrcPos CallBracket)
      <ParsePattern
        Nested
        e.Tokens
        <EL-AddErrorAt
          t.ErrorList t.OpenSrcPos
          'Unexpected call bracket in pattern expression'
        >
      >
    >;

  /* не терм */
  e.Tokens t.ErrorList = (NoTerm) e.Tokens t.ErrorList;
}


*$ENUM ResultTerm

/*
  Result = Result ResultTerm | ε.

  <ParseResult s.Level e.Stack e.Tokens (e.Variables) t.ErrorList>
    == (Result (e.References) e.Result) e.Tokens (e.Variables)? t.ErrorList

  (e.Variables) возвращается только при s.Level == Nested
*/
ParseResult {
  /* Result ::= Result ResultTerm */
  s.Level
  (Result (e.References) e.Result) (ResultTerm (e.TermReferences) e.Term)
  e.Tokens (e.Variables) t.ErrorList =
    <ParseResult
      s.Level
      (Result (e.References e.TermReferences) e.Result e.Term)
      e.Tokens (e.Variables) t.ErrorList
    >;

  /* Result ::= Result / NoTerm */
  TopLevel (Result (e.References) e.Result) (NoTerm)
  e.Tokens (e.Variables) t.ErrorList =
    (Result (e.References) e.Result) e.Tokens t.ErrorList;

  Nested (Result (e.References) e.Result) (NoTerm)
  e.Tokens (e.Variables) t.ErrorList =
    (Result (e.References) e.Result) e.Tokens (e.Variables) t.ErrorList;

  /*
    Восстановление после ошибок — лишняя закрывающая скобка на верхнем уровне
    Pattern ::= Pattern ')'
    Pattern ::= Pattern '>'
  */
  TopLevel (Result (e.References) e.Result)
  (TkClose t.SrcPos s.CloseBracket) e.Tokens (e.Variables) t.ErrorList =
    <ParseResult
      TopLevel (Result (e.References) e.Result)
      e.Tokens
      (e.Variables)
      <EL-AddErrorAt
        t.ErrorList t.SrcPos 'Unbalanced bracket "' <TkClose s.CloseBracket> '"'
      >
    >;

  /* Result ::= Result ResultTerm~ */
  s.Level (Result (e.References) e.Result) e.Tokens (e.Variables) t.ErrorList =
    <ParseResult
      s.Level (Result (e.References) e.Result)
      <ParseResultTerm e.Tokens (e.Variables) t.ErrorList>
    >;

  /* Result ::= ε */
  s.Level e.Tokens (e.Variables) t.ErrorList =
    <ParseResult
      s.Level (Result (/* no references */) /* no terms */)
      e.Tokens (e.Variables) t.ErrorList
    >;
}


/*
  ResultTerm ::= Char | Number | Name | Variable
    | '(' Result ')' | '<' Result '>'.

  <ParseResultTerm e.Stack e.Tokens (e.Variables) t.ErrorList>
    == (ResultTerm (e.References) t.Term?) e.Tokens (e.Variables) t.ErrorList
    == (NoTerm) e.Tokens (e.Variables) t.ErrorList

  t.Term отсутствует для прочитанной необъявленной переменной
*/
ParseResultTerm {
  /* Обработка литералов атомов */

  /* ResultTerm ::= CHAR */
  (TkChar t.SrcPos s.Char) e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm () (Symbol Char s.Char)) e.Tokens (e.Variables) t.ErrorList;

  /* ResultTerm ::= NUMBER */
  (TkNumber t.SrcPos s.Number) e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm () (Symbol Number s.Number)) e.Tokens (e.Variables) t.ErrorList;

  /* ResultTerm ::= NAME */
  (TkName t.SrcPos e.Name) e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm ((t.SrcPos e.Name)) (Symbol Name t.SrcPos e.Name))
    e.Tokens (e.Variables) t.ErrorList;

  /* Переменные */

  /* ResultTerm ::= VARIABLE */
  (TkVariable t.SrcPos s.Mode e.Index) e.Tokens
  (e.Variables-B (s.Mode e.Index) e.Variables-E) t.ErrorList =
    (ResultTerm () (Variable s.Mode e.Index))
    e.Tokens (e.Variables-B (s.Mode e.Index) e.Variables-E) t.ErrorList;

  (TkVariable t.SrcPos s.Mode e.Index) e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm () /* нет терма */) e.Tokens (e.Variables)
    <EL-AddErrorAt
      t.ErrorList t.SrcPos 'Variable ' s.Mode '.' e.Index ' not found'
    >;

  /*
    Скобки.

    Стратегия обработки ошибок: если мы встретили "не ту"
    закрывающую скобку, считаем, что "та" была пропущена.
    Если имеем непарную открывающую скобку, считаем,
    что соответствующая скобка была пропущена в конце выражения;
    если имеем непарную закрывающую скобку, считаем её лишней.
  */

  /* ResultTerm ::= '(' Result ')' | '<' Result '>' */
  (TkOpen t.OpenSrcPos s.BracketsSign)
  (Result (e.References) e.Result)
  (TkClose t.CloseSrcPos s.BracketsSign)
  e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm (e.References) (<BracketPairName s.BracketsSign> e.Result))
    e.Tokens (e.Variables) t.ErrorList;

  /* Неправильная закрывающая скобка или закрывающая скобка отсутствует */
  /* ResultTerm ::= '(' Result | '<' Result */
  (TkOpen t.OpenSrcPos s.BracketsSign)
  (Result (e.References) e.Result)
  /* нет скобки */ e.Tokens (e.Variables) t.ErrorList =
    (ResultTerm (e.References) (<BracketPairName s.BracketsSign> e.Result))
    e.Tokens (e.Variables)
    <EL-AddErrorAt
      t.ErrorList t.OpenSrcPos 'Unbalanced bracket "' <TkOpen s.BracketsSign> '"'
    >;

  /* ResultTerm ::= '(' Result~ | '<' Result~ */
  (TkOpen t.OpenSrcPos s.BracketsSign) e.Tokens (e.Variables) t.ErrorList =
    <ParseResultTerm
      (TkOpen t.OpenSrcPos s.BracketsSign)
      <ParseResult Nested e.Tokens (e.Variables) t.ErrorList>
    >;

  /* не терм */
  e.Tokens (e.Variables) t.ErrorList =
    (NoTerm) e.Tokens (e.Variables) t.ErrorList;
}

BracketPairName {
  Bracket = Brackets;
  CallBracket = CallBrackets;
}


SemanticCheck {
  t.ErrorList (e.References) e.Tree =
    <FindOneEntry t.ErrorList (e.References) <LoadBuiltins> e.Tree>;
}

FindOneEntry {
  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos Entry (e.Name) e.Body) e.Tree-E =
    <CheckRepeatedDefinitions
      t.ErrorList (e.References)
      e.Tree-B (Function t.SrcPos Entry (e.Name) e.Body) e.Tree-E
    >;

  t.ErrorList (e.References) e.Tree =
    <CheckRepeatedDefinitions
      <EL-AddErrorAt t.ErrorList (1 1) 'No entry functions in file'>
      (e.References) e.Tree
    >;
}

LoadBuiltins {
  = <Map parser_BuiltinDeclaration <ListOfBuiltin>>;
}

$ENTRY parser_BuiltinDeclaration {
  (s.Number s.Name s.Type) = <Normalize <Explode s.Name>>;
}

Normalize {
  /* пусто */ = /* пропускаем */;
  e.Name '$' = /* пропускаем */;

  e.Name-B '-' e.Name-E = <Normalize e.Name-B '_' e.Name-E>;

  e.Name = (Function NO-POS Extern (e.Name) Sentences /* пусто */);
}

*$ENUM NO-POS

CheckRepeatedDefinitions {
  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 s.ScopeClass (e.Name) e.Body) e.Tree-E
  (Function t.SrcPos2 Extern (e.Name) Sentences) =
    /* $EXTERN для уже существующей функции */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References)
      e.Tree-B (Function t.SrcPos1 s.ScopeClass (e.Name) e.Body) e.Tree-E
    >;

  t.ErrorList (e.References-B (t.SrcPosRef e.Name) e.References-E)
  e.Tree (Function t.SrcPos Extern (e.Name) Sentences) =
    /* $EXTERN используется */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References-B <RemoveReference (e.Name) e.References-E>)
      e.Tree
    >
    (Extern e.Name);

  t.ErrorList (e.References)
  e.Tree (Function t.SrcPos Extern (e.Name) Sentences) =
    /* $EXTERN не используется */
    <CheckRepeatedDefinitions t.ErrorList (e.References) e.Tree>;

  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 Extern (e.Name) Sentences) e.Tree-E
  (Function t.SrcPos2 s.ScopeClass (e.Name) e.Body) =
    /* $EXTERN для уже существующей функции */
    <CheckRepeatedDefinitions
      t.ErrorList (e.References)
      e.Tree-B e.Tree-E (Function t.SrcPos2 s.ScopeClass (e.Name) e.Body)
    >;

  t.ErrorList (e.References)
  e.Tree-B (Function t.SrcPos1 s.ScopeClass1 (e.Name) e.Body1) e.Tree-E
  (Function t.SrcPos2 s.ScopeClass2 (e.Name) e.Body2) =
    /* Повторное определение функции */
    <CheckRepeatedDefinitions
      <EL-AddErrorAt
        t.ErrorList t.SrcPos2 'Function ' e.Name ' already defined'
      >
      (e.References)
      e.Tree-B (Function t.SrcPos1 s.ScopeClass1 (e.Name) e.Body1) e.Tree-E
    >;

  t.ErrorList (e.References-B (t.SrcPosRef e.Name) e.References-E)
  e.Tree (Function t.SrcPos Local (e.Name) e.Body) =
    <CheckRepeatedDefinitions
      t.ErrorList (e.References-B <RemoveReference (e.Name) e.References-E>)
      e.Tree
    >
    (Function Local (e.Name) e.Body);

  t.ErrorList (e.References)
  e.Tree (Function t.SrcPos Local (e.Name) e.Body) =
    <CheckRepeatedDefinitions
      <EL-AddErrorAt t.ErrorList t.SrcPos 'Unused local function "' e.Name '"'>
      (e.References) e.Tree
    >
    (Function Local (e.Name) e.Body);


  t.ErrorList (e.References)
  e.Tree (Function t.SrcPos Entry (e.Name) e.Body) =
    <CheckRepeatedDefinitions
      t.ErrorList (<RemoveReference (e.Name) e.References>) e.Tree
    >
    (Function Entry (e.Name) e.Body);

  t.ErrorList (e.References) e.Tree (Native e.Native) =
    <CheckRepeatedDefinitions t.ErrorList (e.References) e.Tree>
    (Native e.Native);

  t.ErrorList (e.References) /* пусто */ =
    <Reduce parser_AddUnresolved t.ErrorList e.References>;
}

RemoveReference {
  (e.Name) e.References-B (t.SrcPos e.Name) e.References-E =
    e.References-B <RemoveReference (e.Name) e.References-E>;

  (e.Name) e.References = e.References;
}

$ENTRY parser_AddUnresolved {
  t.ErrorList (t.SrcPos e.Name) =
    <EL-AddErrorAt t.ErrorList t.SrcPos 'Function ' e.Name ' is not defined'>;
}


*$ENUM ErrorList

EL-Create {
  = (ErrorList);
}

EL-AddErrorAt {
  (ErrorList e.Errors) t.SrcPos e.Message =
    (ErrorList e.Errors (t.SrcPos e.Message));
}

EL-AddUnexpected {
  t.ErrorList (TkError t.SrcPos e.Message) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos e.Message
    >;

  t.ErrorList (TkUnexpected t.SrcPos e.Unexpected) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Unknown characters "' e.Unexpected '"'
    >;

  t.ErrorList (s.Unexpected t.SrcPos e.Info) e.Expected =
    <EL-AddErrorAt
      t.ErrorList t.SrcPos
      'Unexpected ' <StrFromToken s.Unexpected e.Info>
      ', expected ' e.Expected
    >;
}

EL-Destroy {
  (ErrorList e.Errors) = e.Errors;
}