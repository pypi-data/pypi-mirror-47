/**
  Любой элемент дерева, который описан как
    t.X ::= (Func e.Info)
  или
    e.X ::= Func e.Info
  может быть вызван как <Func e.Info>. Возвращаемое значение — s.CHAR*.

  e.Tree ::= t.TreeItem*
  t.TreeItem ::=
      (Extern e.Name)
    | (Function s.Scope (e.Name) e.Body)
    | (Native e.Native)

  e.Name ::= s.CHAR+
*/

/**
  <R05-TextFromTree e.Tree> == s.CHAR*
*/
$ENTRY R05-TextFromTree {
  (Extern e.Name1) (Extern e.Name2) e.Tree =
    <Extern e.Name1> <R05-TextFromTree (Extern e.Name2) e.Tree>;

  (e.Item) = <Mu e.Item>;
  (e.Item) e.Tree = <Mu e.Item> '\n' <R05-TextFromTree e.Tree>;

  /* пусто */ = /* пусто */;
}

$ENTRY Extern {
  e.Name = '$EXTERN ' e.Name ';\n';
}

$ENTRY Function {
  Entry (e.Name) Sentences /* пусто */ = '$EENUM ' e.Name ';\n';
  Local (e.Name) Sentences /* пусто */ = '$ENUM ' e.Name ';\n';

  s.Scope (e.Name) e.Body = <Mu s.Scope> e.Name ' {\n' <Mu e.Body> '}\n';
}

/**
  s.Scope ::= Entry | Local
*/

$ENTRY Entry { = '$ENTRY ' }
$ENTRY Local { = /* пусто */ }

/**
  e.Body ::= Sentences t.Sentence* | Native e.Native
  e.Native ::= (e.SourceName s.Line) (s.CHAR*)*
  s.Line ::= s.NUMBER
  e.SourceName ::= s.CHAR+
*/

$ENTRY Sentences {
  /* пусто */ = /* пусто */;
  t.Sentence = <TextFromSentence t.Sentence>;

  t.Sentence e.Sentences =
    <TextFromSentence t.Sentence> '\n' <Sentences e.Sentences>;
}

TextFromSentence {
  ((/* пусто */) (/* пусто */)) = '  = ;\n';

  ((/* пусто */) (e.Result)) = '  = ' <TextFromExpr e.Result> ';\n';

  ((e.Pattern) (/* пусто */)) =
    '  ' <TextFromExpr e.Pattern> ' = ;\n';

  ((e.Pattern) (e.Result)) =
    '  ' <TextFromExpr e.Pattern> ' =\n    ' <TextFromExpr e.Result> ';\n';
}

$ENTRY Native {
  (e.SourceName s.LineNo) e.Lines =
    '* file: "' e.SourceName '", line: ' <Symb s.LineNo> '\n'
    '%%\n'
    <FlatLines e.Lines>
    '%%\n';
}

FlatLines {
  (e.Line) e.Lines = e.Line '\n' <FlatLines e.Lines>;
  /* пусто */ = /* пусто */;
}

/**
  t.Sentence ::= ((e.Pattern) (e.Result))
  e.Pattern, e.Result ::= e.Expression
  e.Expression ::= t.Term*
  t.Term ::=
      (Symbol Char s.CHAR)
    | (Symbol Number s.NUMBER)
    | (Symbol Name t.SrcPos e.Name)
    | (Variable s.Mode e.Index)
    | (Brackets e.Expression)
    | (CallBrackets e.Expression)
  s.Mode ::= 's' | 't' | 'e'
  e.Index ::= s.CHAR+
*/

$ENTRY Symbol {
  s.Type e.Value = <Mu s.Type e.Value>;
}

$ENTRY Char {
  s.Char = '\'' <EscapeChar s.Char> '\'';
}

$ENTRY Number {
  s.Number = <Symb s.Number>;
}

$ENTRY Name {
  t.SrcPos e.Name = e.Name;
}

$ENTRY Variable {
  s.Mode e.Index = s.Mode '.' e.Index;
}

$ENTRY Brackets {
  e.Inner = '(' <TextFromExpr e.Inner> ')';
}

$ENTRY CallBrackets {
  e.Inner = '<' <TextFromExpr e.Inner> '>';
}


/**
  <TextFromExpr e.Expression> == s.CHAR*
*/
$ENTRY TextFromExpr {
  /* пусто */ = /* пусто */;

  t.Term = <TextFromTerm t.Term>;

  (Symbol Char s.Char) e.Tail =
    '\'' <TextFromExpr-Char (Symbol Char s.Char) e.Tail>;

  t.Term e.Expr = <TextFromTerm t.Term> ' ' <TextFromExpr e.Expr>;
}

TextFromExpr-Char {
  (Symbol Char s.Char) e.Tail =
    <EscapeChar s.Char> <TextFromExpr-Char e.Tail>;

  /* пусто */ = '\'';

  e.Other = '\' ' <TextFromExpr e.Other>;
}

TextFromTerm {
  (s.Type e.Info) = <Mu s.Type e.Info>;
}


$ENTRY EscapeChar {
  '\n' = '\\n';
  '\t' = '\\t';
  '\r' = '\\r';
  '\'' = '\\\'';
  '\"' = '\\\"';
  '\\' = '\\\\';

  s.Other = <EscapeChar-Aux s.Other <Ord s.Other>>;
}

EscapeChar-Aux {
  s.Other s.Code =
    <EscapeChar-SwCompare
      s.Other <Compare 31 s.Code> <Compare s.Code 128> s.Code
    >;
}

EscapeChar-SwCompare {
  s.Other '-' '-' s.Code = s.Other;

  s.Other s.Compare1 s.Compare2 s.Code =
    '\\x' <CharFromHex <Div s.Code 16>> <CharFromHex <Mod s.Code 16>>;
}

CharFromHex {
  0 = '0'; 1 = '1'; 2 = '2'; 3 = '3'; 4 = '4';
  5 = '5'; 6 = '6'; 7 = '7'; 8 = '8'; 9 = '9';

  10 = 'A'; 11 = 'B'; 12 = 'C'; 13 = 'D'; 14 = 'E'; 15 = 'F';
}
