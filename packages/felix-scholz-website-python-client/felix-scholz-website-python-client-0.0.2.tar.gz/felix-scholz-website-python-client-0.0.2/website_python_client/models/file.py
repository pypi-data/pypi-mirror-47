# coding: utf-8

"""
    Felix' Website mit Blog

    The api of my blog.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: felix@felix-scholz.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'identifier': 'str',
        'file_name': 'str',
        'file_size': 'int',
        'content': 'str',
        'content_type': 'str',
        'before': 'int',
        'next': 'int',
        'title': 'str',
        'description': 'str',
        'public': 'int',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'identifier': 'identifier',
        'file_name': 'file_name',
        'file_size': 'file_size',
        'content': 'content',
        'content_type': 'content_type',
        'before': 'before',
        'next': 'next',
        'title': 'title',
        'description': 'description',
        'public': 'public',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, id=None, identifier=None, file_name=None, file_size=None, content=None, content_type=None, before=None, next=None, title=None, description=None, public=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._identifier = None
        self._file_name = None
        self._file_size = None
        self._content = None
        self._content_type = None
        self._before = None
        self._next = None
        self._title = None
        self._description = None
        self._public = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if identifier is not None:
            self.identifier = identifier
        if file_name is not None:
            self.file_name = file_name
        if file_size is not None:
            self.file_size = file_size
        self.content = content
        if content_type is not None:
            self.content_type = content_type
        if before is not None:
            self.before = before
        if next is not None:
            self.next = next
        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if public is not None:
            self.public = public
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this File.  # noqa: E501

        The file id.  # noqa: E501

        :return: The id of this File.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The file id.  # noqa: E501

        :param id: The id of this File.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this File.  # noqa: E501

        The file identifier, to identifies from source.  # noqa: E501

        :return: The identifier of this File.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this File.

        The file identifier, to identifies from source.  # noqa: E501

        :param identifier: The identifier of this File.  # noqa: E501
        :type: str
        """

        self._identifier = identifier

    @property
    def file_name(self):
        """Gets the file_name of this File.  # noqa: E501

        The file name.  # noqa: E501

        :return: The file_name of this File.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this File.

        The file name.  # noqa: E501

        :param file_name: The file_name of this File.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_size(self):
        """Gets the file_size of this File.  # noqa: E501

        The file size.  # noqa: E501

        :return: The file_size of this File.  # noqa: E501
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this File.

        The file size.  # noqa: E501

        :param file_size: The file_size of this File.  # noqa: E501
        :type: int
        """

        self._file_size = file_size

    @property
    def content(self):
        """Gets the content of this File.  # noqa: E501

        The file content.  # noqa: E501

        :return: The content of this File.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this File.

        The file content.  # noqa: E501

        :param content: The content of this File.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this File.  # noqa: E501

        The content type of file.  # noqa: E501

        :return: The content_type of this File.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this File.

        The content type of file.  # noqa: E501

        :param content_type: The content_type of this File.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def before(self):
        """Gets the before of this File.  # noqa: E501

        The file before.  # noqa: E501

        :return: The before of this File.  # noqa: E501
        :rtype: int
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this File.

        The file before.  # noqa: E501

        :param before: The before of this File.  # noqa: E501
        :type: int
        """

        self._before = before

    @property
    def next(self):
        """Gets the next of this File.  # noqa: E501

        The file after.  # noqa: E501

        :return: The next of this File.  # noqa: E501
        :rtype: int
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this File.

        The file after.  # noqa: E501

        :param next: The next of this File.  # noqa: E501
        :type: int
        """

        self._next = next

    @property
    def title(self):
        """Gets the title of this File.  # noqa: E501

        The file title.  # noqa: E501

        :return: The title of this File.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this File.

        The file title.  # noqa: E501

        :param title: The title of this File.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this File.  # noqa: E501

        The file description.  # noqa: E501

        :return: The description of this File.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        The file description.  # noqa: E501

        :param description: The description of this File.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def public(self):
        """Gets the public of this File.  # noqa: E501

        Is the file public?  # noqa: E501

        :return: The public of this File.  # noqa: E501
        :rtype: int
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this File.

        Is the file public?  # noqa: E501

        :param public: The public of this File.  # noqa: E501
        :type: int
        """

        self._public = public

    @property
    def created_at(self):
        """Gets the created_at of this File.  # noqa: E501

        The tag create date.  # noqa: E501

        :return: The created_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.

        The tag create date.  # noqa: E501

        :param created_at: The created_at of this File.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this File.  # noqa: E501

        The tag update date.  # noqa: E501

        :return: The updated_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this File.

        The tag update date.  # noqa: E501

        :param updated_at: The updated_at of this File.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this File.  # noqa: E501

        The tag delete date.  # noqa: E501

        :return: The deleted_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this File.

        The tag delete date.  # noqa: E501

        :param deleted_at: The deleted_at of this File.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
