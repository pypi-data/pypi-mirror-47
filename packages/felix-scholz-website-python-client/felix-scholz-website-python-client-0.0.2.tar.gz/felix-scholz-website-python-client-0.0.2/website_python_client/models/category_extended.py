# coding: utf-8

"""
    Felix' Website mit Blog

    The api of my blog.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: felix@felix-scholz.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from website_python_client.models.acl import Acl  # noqa: F401,E501


class CategoryExtended(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'before': 'int',
        'after': 'int',
        'source': 'str',
        'slug': 'str',
        'description': 'str',
        'acl': 'Acl',
        'tags': 'int',
        'preview': 'int'
    }

    attribute_map = {
        'before': 'before',
        'after': 'after',
        'source': 'source',
        'slug': 'slug',
        'description': 'description',
        'acl': 'acl',
        'tags': 'tags',
        'preview': 'preview'
    }

    def __init__(self, before=None, after=None, source=None, slug=None, description=None, acl=None, tags=None, preview=None):  # noqa: E501
        """CategoryExtended - a model defined in Swagger"""  # noqa: E501
        self._before = None
        self._after = None
        self._source = None
        self._slug = None
        self._description = None
        self._acl = None
        self._tags = None
        self._preview = None
        self.discriminator = None
        if before is not None:
            self.before = before
        if after is not None:
            self.after = after
        if source is not None:
            self.source = source
        self.slug = slug
        if description is not None:
            self.description = description
        if acl is not None:
            self.acl = acl
        if tags is not None:
            self.tags = tags
        if preview is not None:
            self.preview = preview

    @property
    def before(self):
        """Gets the before of this CategoryExtended.  # noqa: E501

        The category before this  # noqa: E501

        :return: The before of this CategoryExtended.  # noqa: E501
        :rtype: int
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this CategoryExtended.

        The category before this  # noqa: E501

        :param before: The before of this CategoryExtended.  # noqa: E501
        :type: int
        """

        self._before = before

    @property
    def after(self):
        """Gets the after of this CategoryExtended.  # noqa: E501

        The category after this  # noqa: E501

        :return: The after of this CategoryExtended.  # noqa: E501
        :rtype: int
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this CategoryExtended.

        The category after this  # noqa: E501

        :param after: The after of this CategoryExtended.  # noqa: E501
        :type: int
        """

        self._after = after

    @property
    def source(self):
        """Gets the source of this CategoryExtended.  # noqa: E501

        The category source  # noqa: E501

        :return: The source of this CategoryExtended.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CategoryExtended.

        The category source  # noqa: E501

        :param source: The source of this CategoryExtended.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def slug(self):
        """Gets the slug of this CategoryExtended.  # noqa: E501

        The category slug  # noqa: E501

        :return: The slug of this CategoryExtended.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this CategoryExtended.

        The category slug  # noqa: E501

        :param slug: The slug of this CategoryExtended.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def description(self):
        """Gets the description of this CategoryExtended.  # noqa: E501

        The category description  # noqa: E501

        :return: The description of this CategoryExtended.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CategoryExtended.

        The category description  # noqa: E501

        :param description: The description of this CategoryExtended.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def acl(self):
        """Gets the acl of this CategoryExtended.  # noqa: E501


        :return: The acl of this CategoryExtended.  # noqa: E501
        :rtype: Acl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CategoryExtended.


        :param acl: The acl of this CategoryExtended.  # noqa: E501
        :type: Acl
        """

        self._acl = acl

    @property
    def tags(self):
        """Gets the tags of this CategoryExtended.  # noqa: E501

        Add a tag to the category.  # noqa: E501

        :return: The tags of this CategoryExtended.  # noqa: E501
        :rtype: int
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this CategoryExtended.

        Add a tag to the category.  # noqa: E501

        :param tags: The tags of this CategoryExtended.  # noqa: E501
        :type: int
        """

        self._tags = tags

    @property
    def preview(self):
        """Gets the preview of this CategoryExtended.  # noqa: E501

        id to a preview images for category  # noqa: E501

        :return: The preview of this CategoryExtended.  # noqa: E501
        :rtype: int
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this CategoryExtended.

        id to a preview images for category  # noqa: E501

        :param preview: The preview of this CategoryExtended.  # noqa: E501
        :type: int
        """

        self._preview = preview

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CategoryExtended, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryExtended):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
