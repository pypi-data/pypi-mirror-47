# coding: utf-8

"""
    Felix' Website mit Blog

    The api of my blog.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: felix@felix-scholz.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Tag(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'slug': 'str',
        'title': 'str',
        'title_de': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'deleted_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'slug': 'slug',
        'title': 'title',
        'title_de': 'title_de',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, id=None, slug=None, title=None, title_de=None, created_at=None, updated_at=None, deleted_at=None):  # noqa: E501
        """Tag - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._slug = None
        self._title = None
        self._title_de = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.slug = slug
        if title is not None:
            self.title = title
        if title_de is not None:
            self.title_de = title_de
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if deleted_at is not None:
            self.deleted_at = deleted_at

    @property
    def id(self):
        """Gets the id of this Tag.  # noqa: E501

        The tag id.  # noqa: E501

        :return: The id of this Tag.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Tag.

        The tag id.  # noqa: E501

        :param id: The id of this Tag.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Tag.  # noqa: E501

        The tag slug.  # noqa: E501

        :return: The slug of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Tag.

        The tag slug.  # noqa: E501

        :param slug: The slug of this Tag.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this Tag.  # noqa: E501

        The tag title.  # noqa: E501

        :return: The title of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Tag.

        The tag title.  # noqa: E501

        :param title: The title of this Tag.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def title_de(self):
        """Gets the title_de of this Tag.  # noqa: E501

        The tag german title  # noqa: E501

        :return: The title_de of this Tag.  # noqa: E501
        :rtype: str
        """
        return self._title_de

    @title_de.setter
    def title_de(self, title_de):
        """Sets the title_de of this Tag.

        The tag german title  # noqa: E501

        :param title_de: The title_de of this Tag.  # noqa: E501
        :type: str
        """

        self._title_de = title_de

    @property
    def created_at(self):
        """Gets the created_at of this Tag.  # noqa: E501

        The tag create date.  # noqa: E501

        :return: The created_at of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Tag.

        The tag create date.  # noqa: E501

        :param created_at: The created_at of this Tag.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Tag.  # noqa: E501

        The tag update date.  # noqa: E501

        :return: The updated_at of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Tag.

        The tag update date.  # noqa: E501

        :param updated_at: The updated_at of this Tag.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """Gets the deleted_at of this Tag.  # noqa: E501

        The tag delete date.  # noqa: E501

        :return: The deleted_at of this Tag.  # noqa: E501
        :rtype: datetime
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """Sets the deleted_at of this Tag.

        The tag delete date.  # noqa: E501

        :param deleted_at: The deleted_at of this Tag.  # noqa: E501
        :type: datetime
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Tag, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Tag):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
