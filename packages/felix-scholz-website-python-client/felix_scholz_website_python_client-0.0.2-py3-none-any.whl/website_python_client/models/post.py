# coding: utf-8

"""
    Felix' Website mit Blog

    The api of my blog.  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: felix@felix-scholz.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from website_python_client.models.acl import Acl  # noqa: F401,E501
from website_python_client.models.author import Author  # noqa: F401,E501


class Post(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'identifier': 'str',
        'source': 'str',
        'slug': 'str',
        'title': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'path': 'list[str]',
        'content': 'str',
        'release': 'str',
        'listing': 'bool',
        'authors': 'Author',
        'acl': 'Acl',
        'preview': 'list[str]',
        'images': 'list[str]',
        'markdown': 'str'
    }

    attribute_map = {
        'identifier': 'identifier',
        'source': 'source',
        'slug': 'slug',
        'title': 'title',
        'description': 'description',
        'tags': 'tags',
        'path': 'path',
        'content': 'content',
        'release': 'release',
        'listing': 'listing',
        'authors': 'authors',
        'acl': 'acl',
        'preview': 'preview[]',
        'images': 'images[]',
        'markdown': 'markdown'
    }

    def __init__(self, identifier=None, source=None, slug=None, title=None, description=None, tags=None, path=None, content=None, release=None, listing=None, authors=None, acl=None, preview=None, images=None, markdown=None):  # noqa: E501
        """Post - a model defined in Swagger"""  # noqa: E501
        self._identifier = None
        self._source = None
        self._slug = None
        self._title = None
        self._description = None
        self._tags = None
        self._path = None
        self._content = None
        self._release = None
        self._listing = None
        self._authors = None
        self._acl = None
        self._preview = None
        self._images = None
        self._markdown = None
        self.discriminator = None
        self.identifier = identifier
        if source is not None:
            self.source = source
        self.slug = slug
        self.title = title
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        self.path = path
        if content is not None:
            self.content = content
        if release is not None:
            self.release = release
        if listing is not None:
            self.listing = listing
        if authors is not None:
            self.authors = authors
        if acl is not None:
            self.acl = acl
        if preview is not None:
            self.preview = preview
        if images is not None:
            self.images = images
        if markdown is not None:
            self.markdown = markdown

    @property
    def identifier(self):
        """Gets the identifier of this Post.  # noqa: E501

        The post identifier, to identifie from source.  # noqa: E501

        :return: The identifier of this Post.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Post.

        The post identifier, to identifie from source.  # noqa: E501

        :param identifier: The identifier of this Post.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def source(self):
        """Gets the source of this Post.  # noqa: E501

        The quelle of the post.  # noqa: E501

        :return: The source of this Post.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Post.

        The quelle of the post.  # noqa: E501

        :param source: The source of this Post.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def slug(self):
        """Gets the slug of this Post.  # noqa: E501

        A unique slug of post.  # noqa: E501

        :return: The slug of this Post.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Post.

        A unique slug of post.  # noqa: E501

        :param slug: The slug of this Post.  # noqa: E501
        :type: str
        """
        if slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def title(self):
        """Gets the title of this Post.  # noqa: E501

        The title of post.  # noqa: E501

        :return: The title of this Post.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Post.

        The title of post.  # noqa: E501

        :param title: The title of this Post.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def description(self):
        """Gets the description of this Post.  # noqa: E501

        A description of post.  # noqa: E501

        :return: The description of this Post.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Post.

        A description of post.  # noqa: E501

        :param description: The description of this Post.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this Post.  # noqa: E501

        the post tags.  # noqa: E501

        :return: The tags of this Post.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Post.

        the post tags.  # noqa: E501

        :param tags: The tags of this Post.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def path(self):
        """Gets the path of this Post.  # noqa: E501

        the post path.  # noqa: E501

        :return: The path of this Post.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Post.

        the post path.  # noqa: E501

        :param path: The path of this Post.  # noqa: E501
        :type: list[str]
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def content(self):
        """Gets the content of this Post.  # noqa: E501

        A html content of post.  # noqa: E501

        :return: The content of this Post.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this Post.

        A html content of post.  # noqa: E501

        :param content: The content of this Post.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def release(self):
        """Gets the release of this Post.  # noqa: E501

        The release date of post.  # noqa: E501

        :return: The release of this Post.  # noqa: E501
        :rtype: str
        """
        return self._release

    @release.setter
    def release(self, release):
        """Sets the release of this Post.

        The release date of post.  # noqa: E501

        :param release: The release of this Post.  # noqa: E501
        :type: str
        """

        self._release = release

    @property
    def listing(self):
        """Gets the listing of this Post.  # noqa: E501

        The release date of post.  # noqa: E501

        :return: The listing of this Post.  # noqa: E501
        :rtype: bool
        """
        return self._listing

    @listing.setter
    def listing(self, listing):
        """Sets the listing of this Post.

        The release date of post.  # noqa: E501

        :param listing: The listing of this Post.  # noqa: E501
        :type: bool
        """

        self._listing = listing

    @property
    def authors(self):
        """Gets the authors of this Post.  # noqa: E501


        :return: The authors of this Post.  # noqa: E501
        :rtype: Author
        """
        return self._authors

    @authors.setter
    def authors(self, authors):
        """Sets the authors of this Post.


        :param authors: The authors of this Post.  # noqa: E501
        :type: Author
        """

        self._authors = authors

    @property
    def acl(self):
        """Gets the acl of this Post.  # noqa: E501


        :return: The acl of this Post.  # noqa: E501
        :rtype: Acl
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Post.


        :param acl: The acl of this Post.  # noqa: E501
        :type: Acl
        """

        self._acl = acl

    @property
    def preview(self):
        """Gets the preview of this Post.  # noqa: E501

        upload preview images for post  # noqa: E501

        :return: The preview of this Post.  # noqa: E501
        :rtype: list[str]
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this Post.

        upload preview images for post  # noqa: E501

        :param preview: The preview of this Post.  # noqa: E501
        :type: list[str]
        """

        self._preview = preview

    @property
    def images(self):
        """Gets the images of this Post.  # noqa: E501

        upload images for post  # noqa: E501

        :return: The images of this Post.  # noqa: E501
        :rtype: list[str]
        """
        return self._images

    @images.setter
    def images(self, images):
        """Sets the images of this Post.

        upload images for post  # noqa: E501

        :param images: The images of this Post.  # noqa: E501
        :type: list[str]
        """

        self._images = images

    @property
    def markdown(self):
        """Gets the markdown of this Post.  # noqa: E501

        upload source markdown for post  # noqa: E501

        :return: The markdown of this Post.  # noqa: E501
        :rtype: str
        """
        return self._markdown

    @markdown.setter
    def markdown(self, markdown):
        """Sets the markdown of this Post.

        upload source markdown for post  # noqa: E501

        :param markdown: The markdown of this Post.  # noqa: E501
        :type: str
        """

        self._markdown = markdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Post, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Post):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
