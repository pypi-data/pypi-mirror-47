import os
import time

if not config:
    configfile: os.path.join(os.getcwd(), 'config-marseq.yaml')

RUN_ID = str(config['run_id'])
TEMPLATES = config['templates']

orig_base = os.path.join(TEMPLATES, 'snakefile_base', 'snakefile_base_marseq.py')
orig2 = os.path.join(TEMPLATES, 'snakefile_base', 'transcriptome_consts.py')
orig3 = os.path.join(TEMPLATES, 'snakefile_base', 'creature.py')
orig4 = os.path.join(TEMPLATES, 'snakefile_base', 'functions.py')
target_base_dir = os.path.join(os.getcwd(), 'snakefile_base_' + RUN_ID)
target_base = os.path.join(target_base_dir, 'snakefile_base_marseq.py')
if not os.path.isdir(target_base_dir):
    os.system(
        "mkdir -p {target_base_dir}; cp {orig_base} {orig2} {orig3} {orig4} {target_base_dir}; touch __init__.py".format(
            target_base_dir=target_base_dir, orig_base=orig_base, orig2=orig2, orig3=orig3, orig4=orig4))
    time.sleep(10)

include: target_base

localrules: rule_10_reports

shell.executable("/bin/bash")

"""
Rules:
=======
"""

rule rule_all:
    input:
        os.path.join(ROOT_OUT_DIR, 'Done_'+ RUN_ID + '.txt')


rule rule_1_combined_fastq:
    input:
        *get_fastq(paired_end=True) # In MARS-seq always will be paired end - 2 files
    output:
        out = os.path.join(ROOT_OUT_DIR, '1_combined_fastq', '{sample}', '{sample}.R1.combined.fastq'),
        logout = os.path.join(ROOT_OUT_DIR, '1_combined_fastq', '{sample}', '{sample}.txt'),
    params:
        hist_file = os.path.join(ROOT_OUT_DIR, '1_combined_fastq', '{sample}', '{sample}.umi_frequencies.csv')
    log:
        comb = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '1_combined_fastq.{sample}.txt'),
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(200, 1, MAX_THREADS_NUM),
        mem_mb_total=200
    shell:
        '''
        {PYTHON} {SCRIPTS}/ExtractBCSR.py --fastqIn {input[0]} --fastqUMI {input[1]} --fastqOut {output.out} --bcHistFileName {params.hist_file} > {output.logout} 2> {log.comb}
        '''


rule rule_2_cutadapt:
    input:
        rules.rule_1_combined_fastq.output.out
    output:
        temp(os.path.join(ROOT_OUT_DIR, '2_cutadapt', '{sample}_R1.fastq'))
    params:
        adap = 'AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC',
        out_sum = os.path.join(ROOT_OUT_DIR, '2_cutadapt', '{sample}.cutadapt.txt')
    log:
        cut = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '2_cutadapt.{sample}.txt'),
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(100, 1, MAX_THREADS_NUM),
        mem_mb_total=100
    shell:
        '''
        {CUTADAPT_EXE} -a {params.adap} -a "A{{10}}" --times 2 -u 3 -u -3 -q 20 -m 25 -o {output} {input} > {params.out_sum} 2> {log.cut}
        touch {output}.deleted
        gzip {input}
        '''


rule rule_3_fastqc:
    input:
        rules.rule_2_cutadapt.output
    output:
        os.path.join(ROOT_OUT_DIR, '3_fastqc', '{sample}', '{sample}_R1_fastqc', 'fastqc_data.txt')
    params:
        output_dir = os.path.join(ROOT_OUT_DIR, '3_fastqc', '{sample}')
    threads: threads_num(5, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(1000, 5, MAX_THREADS_NUM),
        mem_mb_total=1000
    log:
        os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '3_fastqc.{sample}.txt')
    shell:'''
        mkdir -p {params.output_dir}
        {FASTQC_EXE} -j {JAVA_FOR_FASTQ} --extract -o {params.output_dir} -f fastq --threads {threads} {input} > {log} 2>&1
    '''


rule rule_4_mapping:
    input:
        rules.rule_2_cutadapt.output
    output:
        bam = temp(os.path.join(ROOT_OUT_DIR, '4_mapping', '{sample}Aligned.sortedByCoord.out.bam')),
        bai = temp(os.path.join(ROOT_OUT_DIR, '4_mapping', '{sample}Aligned.sortedByCoord.out.bam.bai'))
    params:
        my_prefix = os.path.join(ROOT_OUT_DIR, '4_mapping', '{sample}'),
    threads: threads_num(20, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(60000, 20, MAX_THREADS_NUM),
        mem_mb_total = 60000
    log:
        map = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '4_mapping.{sample}.txt'),
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    shell:'''
        {STAR_EXE} --genomeDir {INDEX} --readFilesIn {input} --readFilesCommand cat --alignEndsType EndToEnd --runThreadN {threads} --genomeLoad NoSharedMemory --outFilterMismatchNoverLmax 0.05 --outSAMstrandField intronMotif --twopassMode Basic --outSAMtype BAM SortedByCoordinate --alignSoftClipAtReferenceEnds No --outFileNamePrefix {params.my_prefix} --outSAMattributes NH HI AS nM MD > {log.map} 2>&1;
        {SAMTOOLS_EXE} index {output.bam}
        touch {output.bam}.deleted
        touch {output.bai}.deleted
    '''


rule rule_5_move_umi:
    input:
        rules.rule_4_mapping.output.bam
    output:
        temp(os.path.join(ROOT_OUT_DIR, '5_move_umi', '{sample}.UMI.out.bam'))
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(200, 1, MAX_THREADS_NUM),
        mem_mb_total=200
    log:
        os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '5_move_umi.{sample}.txt')
    shell:
        '''
        {PYTHON} {SCRIPTS}/MoveBC.py --bamIn {input} --bamOut {output} > {log} 2>&1;
        touch {output}.deleted
        '''


rule rule_6_count_reads:
    input:
        rules.rule_5_move_umi.output
    output:
        bam = temp(os.path.join(ROOT_OUT_DIR, '6_count_reads', '{sample}.gene.bam')),
        bai = temp(os.path.join(ROOT_OUT_DIR, '6_count_reads', '{sample}.gene.bam.bai'))
    params:
        header = os.path.join(ROOT_OUT_DIR, '4_mapping', '{sample}.header.sam'),
        counts = os.path.join(ROOT_OUT_DIR, '6_count_reads', '{sample}_counts.txt')
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(300, 1, MAX_THREADS_NUM),
        mem_mb_total=300
    log:
        samtools_view = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '6_count_reads.{sample}.samtools_view.txt'),
        htseq = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '6_count_reads.{sample}.htseq_count.txt'),
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    shell:'''
        {SAMTOOLS_EXE} view -H {input} -o {params.header} > {log.samtools_view} 2>&1
        {SAMTOOLS_EXE} view -h {input} | {HTSEQ_COUNT_EXE} -o /dev/fd/3 -i gene_name - {GTF} 3>&1 > {params.counts} | cat {params.header} - | {SAMTOOLS_EXE} view -Sb - > {output.bam}
        {SAMTOOLS_EXE} index {output.bam} >> {log.samtools_view} 2>&1
        touch {output.bam}.deleted
        touch {output.bai}.deleted
    '''


rule rule_7_mark_dup:
    input:
        rules.rule_6_count_reads.output.bam
    output:
        os.path.join(ROOT_OUT_DIR, '7_mark_dup', '{sample}.gene.MDunsorted.bam')
    params:
        metrics_out = os.path.join(ROOT_OUT_DIR, '7_mark_dup', '{sample}_deDupMetrics'),
        samp = '{sample}'
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(6000, 1, MAX_THREADS_NUM),
        mem_mb_total=6000
    log:
        os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '7_mark_dup.{sample}.txt')
    shell:'''
        mkdir -p {params.metrics_out}
        {PYTHON} {SCRIPTS}/MarkDuplicatesUMIbyGene.py --inputBam {input} --outputBam {output} --bcLength 8 --gtf {GTF} --outputMetricsDir {params.metrics_out} --outputPrefix dup_{params.samp} --logFile {log} >> {log} 2>&1
        {SAMTOOLS_EXE} index {output} >> {log} 2>&1
    '''


rule rule_8_dedup_counts:
    input:
        rules.rule_7_mark_dup.output
    output:
        os.path.join(ROOT_OUT_DIR, '8_dedup_counts', '{sample}.deDup_counts.txt')
    log:
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(300, 1, MAX_THREADS_NUM),
        mem_mb_total=300
    shell:'''
        {SAMTOOLS_EXE} view -F 1024 {input} | grep -v RX:Z:[ACTG]*N[ACTGN]* | {HTSEQ_COUNT_EXE} -i gene_name - {GTF} 2>&1 > {output}
    '''


rule rule_9_umi_counts:
    input:
        rules.rule_8_dedup_counts.output
    output:
        os.path.join(ROOT_OUT_DIR, '9_umi_counts', '{sample}.deDup_counts.corrected.txt')
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(150, 1, MAX_THREADS_NUM),
        mem_mb_total=150
    log:
        umi = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '9_umi_counts.{sample}.txt'),
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    shell:'''
        {PYTHON} {SCRIPTS}/CorrectCounts.py --inputCounts {input} --bcLength 8 --outputCounts {output} > {log.umi} 2>&1
    '''


rule rule_ngsplot:
    input:
        expand(os.path.join(ROOT_OUT_DIR, '9_umi_counts', '{sample}.deDup_counts.corrected.txt'), sample=SAMPLES),
        expand(os.path.join(ROOT_OUT_DIR, '4_mapping', '{sample}Aligned.sortedByCoord.out.bam'), sample=SAMPLES) #They are in using in ngsplot_config.txt file
    output:
        os.path.join(ROOT_OUT_DIR, '10_reports', 'ngsplotOut.avgprof.pdf')
    params:
        output_dir = os.path.join(ROOT_OUT_DIR, '10_reports')
    log:
        report = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '10_reports.txt'),
        ngsplot = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'ngsplot.txt')
    threads: threads_num(1, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(25000, 1, MAX_THREADS_NUM),
        mem_mb_total=25000
    run:
        if RUN_NGSPLOT:
            shell("mkdir -p {params.output_dir}")
            shell("{PYTHON} {SCRIPTS}/PrepareFilesToReport.py --pipeline-dir {ROOT_OUT_DIR} --output-dir {params.output_dir} --samples {SAMPLES_LIST} --samples-deseq {SAMPLES_DESEQ_LIST} --factors {FACTORS_LIST} --batches {BATCHES_LIST} --run-id {RUN_ID} --logFile {log.report};")
            shell("cd {params.output_dir}; {NGS_PLOT_EXE} -G {NGSPLOT_GENOME} -R genebody -O {params.output_dir}/ngsplotOut -C {params.output_dir}/ngsplot_config.txt > {log.ngsplot} 2>&1")
            shell("{GS_EXE} -dNOPAUSE -dBATCH -sDEVICE=pngalpha -sOutputFile={params.output_dir}/ngsplotOut.png -r144 {params.output_dir}/ngsplotOut.avgprof.pdf; cd {ROOT_OUT_DIR}")
        else:
            shell("touch {params.output_dir}/ngsplotOut.avgprof.pdf")


rule rule_10_reports:
    input:
        expand(os.path.join(ROOT_OUT_DIR, '3_fastqc', '{sample}', '{sample}_R1_fastqc', 'fastqc_data.txt'), sample=SAMPLES),
        rules.rule_ngsplot.output
    output:
        os.path.join(ROOT_OUT_DIR, 'Done_'+ RUN_ID + '.txt')
    params:
        output_dir = os.path.join(ROOT_OUT_DIR, '10_reports'),
        out_dir_report = os.path.join(ROOT_OUT_DIR, '10_reports', DIR_REPORT_NAME),
        out_dir_report_umi = os.path.join(ROOT_OUT_DIR, '10_reports', DIR_REPORT_UMI_COUNTS_NAME),
        fastqc_dir = os.path.join(ROOT_OUT_DIR, '3_fastqc'),
        fastqc_report = os.path.join(ROOT_OUT_DIR, '10_reports', 'fastqc_Per_base_sequence_quality'),
        eval_deseq = "deseq_eval <- TRUE" if FACTOR_OBJ else "deseq_eval <- FALSE",
        eval_ngsplot = "ngsplot_eval <- TRUE" if RUN_NGSPLOT else "ngsplot_eval <- FALSE"
    log:
        report = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, '10_reports.txt'),
        counts = os.path.join(ROOT_OUT_DIR, LOG_DIR_NAME, 'counts_log.txt')
    threads: threads_num(10, MAX_THREADS_NUM)
    resources:
        mem_mb_per_thread = mem_per_thread(30000, 10, MAX_THREADS_NUM),
        mem_mb_total=30000
    shell:'''
        PATH=$PATH:{SCRIPTS}
        export HOME=$HOME
        mkdir -p {params.out_dir_report}
        mkdir -p {params.out_dir_report_umi}
        {PYTHON} {SCRIPTS}/PrepareFilesToReport.py --pipeline-dir {ROOT_OUT_DIR} --output-dir {params.output_dir} --samples {SAMPLES_LIST} --samples-deseq {SAMPLES_DESEQ_LIST} --factors {FACTORS_LIST} --batches {BATCHES_LIST} --run-id {RUN_ID} --logFile {log.report};
        {PYTHON} {SCRIPTS}/run-fastqc-report-table.py --fastqc-dir {params.fastqc_dir} --output-file-base {params.fastqc_report}
        {PYTHON} {SCRIPTS}/ReportsCounts.py --pipeline-dir {ROOT_OUT_DIR} --output {params.output_dir}/counts_all_steps.txt --samples {SAMPLES_LIST} --logFile {log.counts}

        #Report on regular counts
        cp {TEMPLATES}/report_functions.R {params.out_dir_report}
        cp {TEMPLATES}/report.Rmd {params.out_dir_report}
        cp {TEMPLATES}/header.html {params.out_dir_report}
        cp {TEMPLATES}/wis_logo_heb_v1.png {params.out_dir_report}
        cp -r {TEMPLATES}/templates {params.out_dir_report}
        sed -i \'s/JOB_NAME/{JOB_NAME}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/RUN_ID/{RUN_ID}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/COMMANDS_LOG/{COMMANDS_LOG_SED}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/RSCRIPT/\"{RSCRIPT}\"/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/R_LIB_PATHS/\"{R_LIB_PATHS}\"/g\' {params.out_dir_report}/report_functions.R
        sed -i \'s/PIPELINE_TYPE/MARS-seq/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/GENOME/{INDEX_PATH}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/ANNOTATION/{GTF_PATH}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/ANNOTAT_TYPE/{ANNOTAT_TYPE}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/deseq_eval <- TRUE/{params.eval_deseq}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/ngsplot_eval <- TRUE/{params.eval_ngsplot}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/INTERMINE_WEB_QUERY/{INTERMINE_WEB_QUERY}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/INTERMINE_WEB_BASE/{INTERMINE_WEB_BASE}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/INTERMINE_CREATURE/{MINE_CREATURE}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/INPUT_FOLDER/{FASTQ_DIR_SED}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/OUTPUT_FOLDER/{ROOT_OUT_DIR_SED}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/COUNTS_MATRIX_FILE/countsMatrix.txt/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/REPORT_OUTPUT_DIR/{DIR_REPORT_NAME}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/GENE_DB_URL/\"{GENE_DB_URL}\"/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/SAMPLE_DESC_CSV/{SAMPLE_DESC_CSV}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/COMPARISONS_CSV/{COMPARISONS_CSV}/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/SUBTITLE/subtitle: \<h3\>Report according to raw counts\<\/h3\>\<a href=\"..\/{DIR_REPORT_UMI_COUNTS_NAME}\/report.html\" class=\"btn btn-default\"\>Show report with UMI corrected counts\<\/a\>/g\' {params.out_dir_report}/report.Rmd
        sed -i \'s/UMI_CORRECTED_COUNTS_LINK/Raw counts after UMI correction can be downloaded from \<a href=\"..\/countsCorrectedMatrix.txt\" download>here\<\/a\>/g\' {params.out_dir_report}/report.Rmd
        {RSCRIPT} -e "rmarkdown::render('{params.out_dir_report}/report.Rmd')" --verbose >> {log.report} 2>&1


        #Report on uni corrected counts
        cp {TEMPLATES}/report_functions.R {params.out_dir_report_umi}
        cp {TEMPLATES}/report.Rmd {params.out_dir_report_umi}
        cp {TEMPLATES}/header.html {params.out_dir_report_umi}
        cp {TEMPLATES}/wis_logo_heb_v1.png {params.out_dir_report_umi}
        cp -r {TEMPLATES}/templates {params.out_dir_report_umi}
        sed -i \'s/JOB_NAME/{JOB_NAME}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/RUN_ID/{RUN_ID}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/COMMANDS_LOG/{COMMANDS_LOG_SED}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/RSCRIPT/\"{RSCRIPT}\"/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/R_LIB_PATHS/\"{R_LIB_PATHS}\"/g\' {params.out_dir_report_umi}/report_functions.R
        sed -i \'s/PIPELINE_TYPE/MARS-seq/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/GENOME/{INDEX_PATH}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/ANNOTATION/{GTF_PATH}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/ANNOTAT_TYPE/{ANNOTAT_TYPE}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/deseq_eval <- TRUE/{params.eval_deseq}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/ngsplot_eval <- TRUE/{params.eval_ngsplot}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/INTERMINE_WEB_QUERY/{INTERMINE_WEB_QUERY}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/INTERMINE_WEB_BASE/{INTERMINE_WEB_BASE}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/INTERMINE_CREATURE/{MINE_CREATURE}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/INPUT_FOLDER/{FASTQ_DIR_SED}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/OUTPUT_FOLDER/{ROOT_OUT_DIR_SED}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/COUNTS_MATRIX_FILE/countsCorrectedMatrix.txt/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/REPORT_OUTPUT_DIR/{DIR_REPORT_UMI_COUNTS_NAME}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/GENE_DB_URL/\"{GENE_DB_URL}\"/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/SAMPLE_DESC_CSV/{SAMPLE_DESC_CSV}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/COMPARISONS_CSV/{COMPARISONS_CSV}/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/SUBTITLE/subtitle: \<h3\>Report according to UMI corrected counts\<\/h3\>\<a href=\"..\/{DIR_REPORT_NAME}\/report.html\" class=\"btn btn-default\"\>Show report without UMI filtering\<\/a\>/g\' {params.out_dir_report_umi}/report.Rmd
        sed -i \'s/UMI_CORRECTED_COUNTS_LINK/Raw counts after UMI correction can be downloaded from \<a href=\"..\/countsCorrectedMatrix.txt\" download>here\<\/a\>/g\' {params.out_dir_report_umi}/report.Rmd
        {RSCRIPT} -e "rmarkdown::render('{params.out_dir_report_umi}/report.Rmd')" --verbose >> {log.report} 2>&1
        if [ -d {ROOT_OUT_DIR}/0_concatenating_fastq ]; then for i in $(ls {ROOT_OUT_DIR}/0_concatenating_fastq/*/*); do touch $i\.deleted;rm $i; done; fi
        rm -rf {ROOT_OUT_DIR}/__pycache__ {ROOT_OUT_DIR}/__init__.py {ROOT_OUT_DIR}/10_reports/*.bam.cnt {ROOT_OUT_DIR}/10_reports/ngsplotOut.zip {ROOT_OUT_DIR}/10_reports/ngsplotOut.heatmap.pdf
        touch {ROOT_OUT_DIR}/Done_{RUN_ID}.txt
    '''
