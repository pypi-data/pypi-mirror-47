#
# Copyright 2019 by Delphix
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

#
# This class has been automatically generated from:
#     /delphix-dvc-operation.json
#
# Do not edit this file manually!
#

from __future__ import unicode_literals

from delphixpy.v1_3_0.web.objects.NamedUserObject import NamedUserObject
from delphixpy.v1_3_0 import factory
from delphixpy.v1_3_0 import common

class __Undef(object):
    def __repr__(self):
        return "undef"

    def __setattr__(self, name, value):
        raise Exception('Cannot modify attributes of __Undef.')

_UNDEFINED = __Undef()

try:
    TEXT_TYPE = unicode
except NameError:
    TEXT_TYPE = str

class DVCOperation(NamedUserObject):
    """
    *(extends* :py:class:`v1_3_0.web.vo.NamedUserObject` *)* An operation that
    occurred on a DVC application.
    """
    def __init__(self, undef_enabled=True):
        super(DVCOperation, self).__init__()
        self._type = ("DVCOperation", True)
        self._data_parent = (self.__undef__, True)
        self._data_time = (self.__undef__, True)
        self._description = (self.__undef__, True)
        self._bookmark = (self.__undef__, True)
        self._application = (self.__undef__, True)
        self._valid = (self.__undef__, True)
        self._start_time = (self.__undef__, True)
        self._branch = (self.__undef__, True)
        self._operation = (self.__undef__, True)
        self._end_time = (self.__undef__, True)

    API_VERSION = "1.3.0"

    @classmethod
    def from_dict(cls, data, dirty=False, undef_enabled=True):
        obj = super(DVCOperation, cls).from_dict(data, dirty, undef_enabled)
        if "dataParent" in data and data["dataParent"] is not None:
            obj._data_parent = (factory.create_object(data["dataParent"], "DVCDataParent"), dirty)
            factory.validate_type(obj._data_parent[0], "DVCDataParent")
        else:
            obj._data_parent = (obj.__undef__, dirty)
        obj._data_time = (data.get("dataTime", obj.__undef__), dirty)
        if obj._data_time[0] is not None and obj._data_time[0] is not obj.__undef__:
            assert isinstance(obj._data_time[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._data_time[0], type(obj._data_time[0])))
            common.validate_format(obj._data_time[0], "date", None, None)
        obj._description = (data.get("description", obj.__undef__), dirty)
        if obj._description[0] is not None and obj._description[0] is not obj.__undef__:
            assert isinstance(obj._description[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._description[0], type(obj._description[0])))
            common.validate_format(obj._description[0], "None", None, None)
        obj._bookmark = (data.get("bookmark", obj.__undef__), dirty)
        if obj._bookmark[0] is not None and obj._bookmark[0] is not obj.__undef__:
            assert isinstance(obj._bookmark[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._bookmark[0], type(obj._bookmark[0])))
            common.validate_format(obj._bookmark[0], "objectReference", None, None)
        obj._application = (data.get("application", obj.__undef__), dirty)
        if obj._application[0] is not None and obj._application[0] is not obj.__undef__:
            assert isinstance(obj._application[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._application[0], type(obj._application[0])))
            common.validate_format(obj._application[0], "objectReference", None, None)
        obj._valid = (data.get("valid", obj.__undef__), dirty)
        if obj._valid[0] is not None and obj._valid[0] is not obj.__undef__:
            assert isinstance(obj._valid[0], bool), ("Expected one of [u'boolean'], but got %s of type %s" % (obj._valid[0], type(obj._valid[0])))
            common.validate_format(obj._valid[0], "None", None, None)
        obj._start_time = (data.get("startTime", obj.__undef__), dirty)
        if obj._start_time[0] is not None and obj._start_time[0] is not obj.__undef__:
            assert isinstance(obj._start_time[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._start_time[0], type(obj._start_time[0])))
            common.validate_format(obj._start_time[0], "date", None, None)
        obj._branch = (data.get("branch", obj.__undef__), dirty)
        if obj._branch[0] is not None and obj._branch[0] is not obj.__undef__:
            assert isinstance(obj._branch[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._branch[0], type(obj._branch[0])))
            common.validate_format(obj._branch[0], "objectReference", None, None)
        obj._operation = (data.get("operation", obj.__undef__), dirty)
        if obj._operation[0] is not None and obj._operation[0] is not obj.__undef__:
            assert isinstance(obj._operation[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._operation[0], type(obj._operation[0])))
            assert obj._operation[0] in [u'REFRESH', u'RESET', u'CREATE_BRANCH', u'DELETE_BRANCH', u'CREATE_BOOKMARK', u'DELETE_BOOKMARK', u'ENABLE', u'DISABLE', u'CHECKOUT', u'SWITCH_OFF', u'RECOVER'], "Expected enum [u'REFRESH', u'RESET', u'CREATE_BRANCH', u'DELETE_BRANCH', u'CREATE_BOOKMARK', u'DELETE_BOOKMARK', u'ENABLE', u'DISABLE', u'CHECKOUT', u'SWITCH_OFF', u'RECOVER'] but got %s" % obj._operation[0]
            common.validate_format(obj._operation[0], "None", None, None)
        obj._end_time = (data.get("endTime", obj.__undef__), dirty)
        if obj._end_time[0] is not None and obj._end_time[0] is not obj.__undef__:
            assert isinstance(obj._end_time[0], TEXT_TYPE), ("Expected one of [u'string'], but got %s of type %s" % (obj._end_time[0], type(obj._end_time[0])))
            common.validate_format(obj._end_time[0], "date", None, None)
        return obj

    def to_dict(self, dirty=False, belongs_to_parent=False):
        dct = super(DVCOperation, self).to_dict(dirty, belongs_to_parent)

        def dictify(obj, prop_is_list_or_vo=False):
            if isinstance(obj, list):
                return [dictify(o, prop_is_list_or_vo) for o in obj]
            elif hasattr(obj, "to_dict"):
                return obj.to_dict(dirty=dirty, belongs_to_parent=prop_is_list_or_vo)
            else:
                return obj
        if "data_parent" == "type" or (self.data_parent is not self.__undef__ and (not (dirty and not self._data_parent[1]))):
            dct["dataParent"] = dictify(self.data_parent)
        if "data_time" == "type" or (self.data_time is not self.__undef__ and (not (dirty and not self._data_time[1]))):
            dct["dataTime"] = dictify(self.data_time)
        if "description" == "type" or (self.description is not self.__undef__ and (not (dirty and not self._description[1]))):
            dct["description"] = dictify(self.description)
        if "bookmark" == "type" or (self.bookmark is not self.__undef__ and (not (dirty and not self._bookmark[1]))):
            dct["bookmark"] = dictify(self.bookmark)
        if "application" == "type" or (self.application is not self.__undef__ and (not (dirty and not self._application[1]))):
            dct["application"] = dictify(self.application)
        if "valid" == "type" or (self.valid is not self.__undef__ and (not (dirty and not self._valid[1]))):
            dct["valid"] = dictify(self.valid)
        if "start_time" == "type" or (self.start_time is not self.__undef__ and (not (dirty and not self._start_time[1]))):
            dct["startTime"] = dictify(self.start_time)
        if "branch" == "type" or (self.branch is not self.__undef__ and (not (dirty and not self._branch[1]))):
            dct["branch"] = dictify(self.branch)
        if "operation" == "type" or (self.operation is not self.__undef__ and (not (dirty and not self._operation[1]))):
            dct["operation"] = dictify(self.operation)
        if "end_time" == "type" or (self.end_time is not self.__undef__ and (not (dirty and not self._end_time[1]))):
            dct["endTime"] = dictify(self.end_time)
        return dct

    def dirty(self):
        return self.from_dict(self.to_dict(dirty=False), dirty=True)

    def force_dirty(self):
        self._data_parent = (self._data_parent[0], True)
        self._data_time = (self._data_time[0], True)
        self._description = (self._description[0], True)
        self._bookmark = (self._bookmark[0], True)
        self._application = (self._application[0], True)
        self._valid = (self._valid[0], True)
        self._start_time = (self._start_time[0], True)
        self._branch = (self._branch[0], True)
        self._operation = (self._operation[0], True)
        self._end_time = (self._end_time[0], True)

    def is_dirty(self):
        return any([self._data_parent[1], self._data_time[1], self._description[1], self._bookmark[1], self._application[1], self._valid[1], self._start_time[1], self._branch[1], self._operation[1], self._end_time[1]])

    def __eq__(self, other):
        if other is None:
            return False
        if not isinstance(other, DVCOperation):
            return False
        return super(DVCOperation, self).__eq__(other) and \
               self.data_parent == other.data_parent and \
               self.data_time == other.data_time and \
               self.description == other.description and \
               self.bookmark == other.bookmark and \
               self.application == other.application and \
               self.valid == other.valid and \
               self.start_time == other.start_time and \
               self.branch == other.branch and \
               self.operation == other.operation and \
               self.end_time == other.end_time

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return id(self)

    def __repr__(self):
        return common.generate_repr_string(self)

    @property
    def data_parent(self):
        """
        The data parent of the operation.

        :rtype: :py:class:`v1_3_0.web.vo.DVCDataParent`
        """
        return self._data_parent[0]

    @data_parent.setter
    def data_parent(self, value):
        self._data_parent = (value, True)

    @property
    def data_time(self):
        """
        The time that the data represented by this operation was active.

        :rtype: ``TEXT_TYPE``
        """
        return self._data_time[0]

    @data_time.setter
    def data_time(self, value):
        self._data_time = (value, True)

    @property
    def description(self):
        """
        Plain text description of the operation.

        :rtype: ``TEXT_TYPE``
        """
        return self._description[0]

    @description.setter
    def description(self, value):
        self._description = (value, True)

    @property
    def bookmark(self):
        """
        The bookmark that was created.

        :rtype: ``TEXT_TYPE``
        """
        return self._bookmark[0]

    @bookmark.setter
    def bookmark(self, value):
        self._bookmark = (value, True)

    @property
    def application(self):
        """
        The application that this operation was performed on.

        :rtype: ``TEXT_TYPE``
        """
        return self._application[0]

    @application.setter
    def application(self, value):
        self._application = (value, True)

    @property
    def valid(self):
        """
        Represents whether the data at this point is valid.

        :rtype: ``bool``
        """
        return self._valid[0]

    @valid.setter
    def valid(self, value):
        self._valid = (value, True)

    @property
    def start_time(self):
        """
        The time the operation started.

        :rtype: ``TEXT_TYPE``
        """
        return self._start_time[0]

    @start_time.setter
    def start_time(self, value):
        self._start_time = (value, True)

    @property
    def branch(self):
        """
        The branch that this operation was performed on.

        :rtype: ``TEXT_TYPE``
        """
        return self._branch[0]

    @branch.setter
    def branch(self, value):
        self._branch = (value, True)

    @property
    def operation(self):
        """
        The operation performed. *(permitted values: REFRESH, RESET,
        CREATE_BRANCH, DELETE_BRANCH, CREATE_BOOKMARK, DELETE_BOOKMARK, ENABLE,
        DISABLE, CHECKOUT, SWITCH_OFF, RECOVER)*

        :rtype: ``TEXT_TYPE``
        """
        return self._operation[0]

    @operation.setter
    def operation(self, value):
        self._operation = (value, True)

    @property
    def end_time(self):
        """
        The time the operation finished. It will be null if the operation is in
        progress.

        :rtype: ``TEXT_TYPE``
        """
        return self._end_time[0]

    @end_time.setter
    def end_time(self, value):
        self._end_time = (value, True)

