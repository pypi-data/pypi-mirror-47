# -*- coding: utf-8 -*-
from distutils.core import setup

packages = \
['ecological']

package_data = \
{'': ['*']}

install_requires = \
['dataclasses>=0.6.0,<0.7.0']

setup_kwargs = {
    'name': 'ecological',
    'version': '2.0.0',
    'description': 'Map a Python configuration from environment variables',
    'long_description': '.. image:: https://travis-ci.org/jmcs/ecological.svg?branch=master\n   :target: https://travis-ci.org/jmcs/ecological\n\n.. image:: https://api.codacy.com/project/badge/Grade/1ff45d0e1a5a40b8ad0569e3edb0539d\n   :alt: Codacy Badge\n   :target: https://www.codacy.com/app/jmcs/ecological?utm_source=github.com&utm_medium=referral&utm_content=jmcs/ecological&utm_campaign=badger\n\n.. image:: https://api.codacy.com/project/badge/Coverage/1ff45d0e1a5a40b8ad0569e3edb0539d\n   :target: https://www.codacy.com/app/jmcs/ecological?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=jmcs/ecological&amp;utm_campaign=Badge_Coverage\n\n==========\nEcological\n==========\n\n``Ecological`` combines PEP526_ and environment variables to make the configuration of\n`12 factor apps <https://12factor.net/config>`_ easy.\n\nGetting Started\n===============\n``Ecological`` automatically gets and converts environment variables according to the configuration class definition.\n\nFor example, imagine your application has a configurable (integer) Port and (boolean) Debug flag and a (string) Log\nLevel, that is ``INFO`` by default, you could simply declare your configuration as:\n\n.. code-block:: python\n\n    class Configuration(ecological.Config):\n        port: int\n        debug: bool\n        log_level: str = "INFO"\n\nAnd then set the environment variables ``PORT``, ``DEBUG`` and ``LOG_LEVEL``. ``Ecological`` will automatically set the\nclass properties from the environment variables with the same (but upper cased) name.\n\nBy default the values are set at the class definition type and assigned to the class itself (i.e. the class doesn\'t need to be\ninstantiated). If needed this behavior can be changed (see the Autoloading section).\n\nTutorial\n--------\nThe `tutorial <tutorial.ipynb>`_  can be used to get to know with the library\'s basic features interactively.\n\nTyping Support\n==============\n``Ecological`` also supports some of the types defined in PEP484_, for example:\n\n.. code-block:: python\n\n\n    class Configuration(ecological.Config):\n        list_of_values: List[str]\n\nWill automatically parse the environment variable value as a list.\n\n.. note:: Please note that while this will ensure ``Configuration.list_of_values`` is a list it will not check that it\n          contains only strings.\n\nPrefixed Configuration\n======================\nYou can also decide to prefix your application configuration, for example, to avoid collisions:\n\n.. code-block:: python\n\n    class Configuration(ecological.Config, prefix=\'myapp\'):\n        home: str\n\n\nIn this case the ``home`` property will be fetched from the ``MYAPP_HOME`` environment property.\n\nNested Configuration\n=====================\n``Ecological.Config`` also supports nested configurations, for example:\n\n.. code-block:: python\n\n\n    class Configuration(ecological.Config):\n        integer: int\n\n        class Nested(ecological.Config, prefix=\'nested\'):\n            boolean: bool\n\nThis way you can group related configuration properties hierarchically.\n\nAdvanced\n========\n\nFine-grained Control\n---------------------\nYou can control some behavior of how the configuration properties are set.\n\nIt can be achieved by providing a ``ecological.Variable`` instance as the default\nvalue for an attribute or by specifying global options on the class level:\n\n.. code-block:: python\n\n    my_source = {"KEY1": "VALUE1"}\n\n    class Configuration(ecological.Config, transform=lambda v, wt: v, wanted_type=int, ...):\n        my_var1: WantedType = ecological.Variable(transform=lambda v, wt: wt(v), source=my_source, ...)\n        my_var2: str\n        # ...\n\nAll possible options and their meaning can be found in the table below:\n\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| Option            | Class level   | Variable level  | Default                                         | Description                                                       |\n+===================+===============+=================+=================================================+===================================================================+\n| ``prefix``        | yes           | no              | ``None``                                        | A prefix that is uppercased and prepended when a variable name    |\n|                   |               |                 |                                                 | is derived from an attribute name.                                |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| ``variable_name`` | yes           | yes             | Derived from attribute name and prefixed        | When specified on the variable level it states                    |\n|                   |               |                 | with ``prefix`` if specified; uppercased.       | the exact name of the source variable that will be used.          |\n|                   |               |                 |                                                 |                                                                   |\n|                   |               |                 |                                                 | When specified on the class level it is treated as a function     |\n|                   |               |                 |                                                 | that returns a variable name from the attribute name with         |\n|                   |               |                 |                                                 | the following signature:                                          |\n|                   |               |                 |                                                 |                                                                   |\n|                   |               |                 |                                                 | ``def func(attribute_name: str, prefix: Optional[str] = None)``   |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| ``default``       | no            | yes             | (no default)                                    | Default value for the property if it isn\'t set.                   |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| ``transform``     | yes           | yes             | A source value is casted to the ``wanted_type`` | A function that converts a value from the ``source`` to the value |\n|                   |               |                 | In case of non-scalar types (+ scalar ``bool``) | and ``wanted_type`` you expect with the following signature:      |\n|                   |               |                 | the value is Python-parsed first.               |                                                                   |\n|                   |               |                 |                                                 | ``def func(source_value: str, wanted_type: Union[Type, str])``    |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| ``source``        | yes           | yes             | ``os.environ``                                  | Dictionary that the value will be loaded from.                    |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n| ``wanted_type``   | yes           | yes             | ``str``                                         | Desired Python type of the attribute\'s value.                     |\n|                   |               |                 |                                                 |                                                                   |\n|                   |               |                 |                                                 | On the variable level it is specified via a type annotation on    |\n|                   |               |                 |                                                 | the attribute: ``my_var_1: my_wanted_type``.                      |\n|                   |               |                 |                                                 |                                                                   |\n|                   |               |                 |                                                 | However it can be also specified on the class level, then it acts |\n|                   |               |                 |                                                 | as a default when the annotation is not provided:                 |\n|                   |               |                 |                                                 |                                                                   |\n|                   |               |                 |                                                 | ``class MyConfig(ecological.Config, wanted_type=int, ...)``       |\n+-------------------+---------------+-----------------+-------------------------------------------------+-------------------------------------------------------------------+\n\nThe following rules apply when options are resolved:\n\n- when options are specified on both levels (variable and class),\n  the variable ones take precedence over class ones,\n- when some options are missing on the variable level, their default values\n  are taken from the class level,\n- it is not necessary to assign an ``ecological.Variable`` instance to\n  change the behavior; it can still be changed on the class level (globally).\n\nAutoloading\n------------\nIt is possible to defer/disable autoloading (setting) of variable values by specifying the ``autoload`` option on class definition.\n\nOn class creation (default)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\nWhen no option is provided values are loaded immediately on class creation and assigned to class attributes:\n\n.. code-block:: python\n\n    class Configuration(ecological.Config):\n        port: int\n    # Values already read and set at this point.\n    # assert Configuration.port == <value-of-PORT-env-var>\n\nNever\n~~~~~\nWhen this option is chosen, no autoloading happens. In order to set variable values, the ``Config.load`` method needs to be called explicitly:\n\n.. code-block:: python\n\n    class Configuration(ecological.Config, autoload=ecological.Autoload.NEVER):\n        port: int\n    # Values not set at this point.\n    # Accessing Configuration.port would throw AttributeError.\n\n    Configuration.load()\n    # Values read and set at this point.\n    # assert Configuration.port == <value-of-PORT-env-var>\n\nOn object instance initialization\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nIf it is preferred to load and store attribute values on the object instance instead of the class itself, the ``Autoload.OBJECT`` strategy can be used:\n\n.. code-block:: python\n\n    class Configuration(ecological.Config, autoload=ecological.Autoload.OBJECT):\n        port: int\n    # Values not set at this point.\n\n    config = Configuration()\n    # Values read and set at this point on ``config``.\n    # assert config.port == <value-of-PORT-env-var>\n    # Accessing ``Configuration.port`` would throw AttributeError.\n\nCaveats and Known Limitations\n=============================\n\n- ``Ecological`` doesn\'t support (public) methods in ``Config`` classes\n\n.. _PEP484: https://www.python.org/dev/peps/pep-0484/\n.. _PEP526: https://www.python.org/dev/peps/pep-0526/\n',
    'author': 'João Santos',
    'author_email': 'jmcs@jsantos.eu',
    'url': 'https://github.com/jmcs/ecological',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
