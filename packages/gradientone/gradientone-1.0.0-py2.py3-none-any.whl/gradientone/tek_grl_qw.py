import json
import sys
import ivi
from os.path import join, dirname, abspath
# TODO: change instruments to a package to avoid this nonsense
sys.path.append(join(dirname(abspath(__file__)), "device_drivers"))
import usb_controller

tek = ivi.tektronix.tektronixDPO7354C("TCPIP0::10.0.0.2::INSTR")
usbc = usb_controller.RawUsbController(vendor_id=0x227f,
                                       product_id=0x0002)
#first set
tek._write("SELECT:CH1 ON")
tek._write("SELECT:CH2 ON")
tek._write("HORIZONTAL:ROLL AUTO")
tek._write("TRIGGER:A:MODE AUTO")
tek._write("ACQUIRE:STOPAFTER RUNSTOP")
tek._write("ACQUIRE:STATE 1")
tek._write("AUTOSet EXECute")
tek._write(":HORIZONTAL:Mode MANUAL")
tek._write("HORizontal:MODE:SCAle 0.1")
tek._write("HORizontal:MODE MANUAL")
tek._write("ACQuire:MODE HiRes")
tek._write("HORizontal:MODE:SAMPLERate 4000000")
tek._write("CH3:PROBECOntrol MANual")
tek._write("CH3:PROBE:FORCEDRANGE 30")
#second set
tek._write("SELECT:CH1 ON")
tek._write("SELECT:CH2 ON")
tek._write("SELECT:CH3 ON")
tek._write("SELECT:CH4 ON")
tek._write("HORizontal:MODE:SCAle 0.2")
tek._write("HORizontal:MODE MANUAL")
tek._write("ACQuire:MODE HiRes")
tek._write("HORizontal:MODE:SAMPLERate 4000000")
tek._write("HORizontal:MODE:RECOrdlength 8000000")
tek._write("HORizontal:POSition 10")
tek._write("CH1:SCALE 0.3")
tek._write("CH1:POSition 0")
tek._write("CH1:OFFSET 0.9")
tek._write("CH2:SCALE 2")
tek._write("CH2:POSition 0")
tek._write("CH2:OFFSET 7.4")
tek._write("CH3:SCALE 1")
tek._write("CH3:POSition 0")
tek._write("CH3:OFFSET 0")
tek._write("ACQuire:MODE HIRes")
tek._write("HORIZONTAL:ROLL OFF")
tek._write("TRIGGER:A:MODE NORMAL")
tek._write("TRIGGER:A:EDGE:SOURCE CH2")
tek._write("TRIGGER:A:EDGE:SLOPE:CH2 RISE")
tek._write("TRIGGER:A:LEVEL:CH2 2.5")
#third set
usbc.write(command='\x14\x05')
usbc.write(command='\x1B\x03')
usbc.write(command='\x1C\x02')
usbc.write(command='\x1A\x02')
#fourth set
tek._write("CH1:SCALE 0.16")
tek._write("CH1:POSition 0")
tek._write("CH1:OFFSET 0.56")
tek._write("HORizontal:MODE:SCAle 0.02")
tek._write("HORizontal:MODE MANUAL")
tek._write("ACQuire:MODE HiRes")
tek._write("HORizontal:MODE:RECOrdlength 10000000")
tek._write("HORizontal:MODE:SAMPLERate 50000000")
tek._write("HORizontal:POSition 10")
tek._write("CH2:SCALE 3")
tek._write("CH2:POSition 0")
tek._write("CH2:OFFSET 11.1")
#fifth set
usbc.write(command='\x3D\x00\x00\x00\x10')
#sixth set
tek._write("HORIZONTAL:ROLL OFF")
tek._write("TRIGGER:A:MODE NORMAL")
tek._write("TRIGGER:A:EDGE:SOURCE CH4")
tek._write("TRIGGER:A:EDGE:SLOPE:CH4 EITHER")
tek._write("TRIGGER:A:LEVEL:CH4 0.6")
tek._write("CH4:POSition 0")
tek._write("CH4:OFFSET 0")
tek._write("CH4:SCALE 0.5")
tek._write("DISPLAY:PERSISTENCE:RESET")
tek._write("ACQUIRE:STOPAFTER SEQUENCE")
tek._write("ACQUIRE:STATE 1")
setup = tek.system.fetch_setup()
with open('prebist_scpi2.txt', 'wb') as f:
    f.write(setup)
#seventh set
usbc.write(command='\xF2\x07\x01\x43\x10\x00\x00\x00\x50')
#eighth set
waveform = tek.channels[0].measurement.fetch_waveform()
filename = "grl_waveform_good_object_2.p"
with open(filename, 'wb') as f:
    f.write(json.dumps(waveform))
tek._ask("*OPC?")
tek._write("SAVe:WAVEform:FILEFormat INTERNal")
tek._write("DATa:STARt 0")
tek._write("DATa:STOP 1E10")
tek._write("SAVe:WAVEform CH1, REF1")
tek._ask("*OPC?")
tek._write("ACQUIRE:STOPAFTER RUNSTOP")
tek._write("ACQUIRE:STATE 1")
tek._write("HORIZONTAL:ROLL AUTO")
tek._write("TRIGGER:A:MODE AUTO")
usbc.write(command='\x18\x04')
tek._write("HORIZONTAL:ROLL AUTO")
tek._write("TRIGGER:A:MODE AUTO")
tek._write("ACQUIRE:STOPAFTER RUNSTOP")
tek._write("ACQUIRE:STATE 1")
