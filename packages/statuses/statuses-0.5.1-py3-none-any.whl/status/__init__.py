from functools import total_ordering


@total_ordering
class Status:
    """
    The `Status` class represents the status of some event. It is one of
    either:

    - `Failed`
    - `NotStarted`
    - `InProgress(progress)`
    - `Succeeded`
    """

    def __init__(self: "Status") -> None:
        """
        Initializes a Status, but is actually unused. Instead you should
        initialize one of:

        - `Failed`
        - `NotStarted`
        - `InProgress(progress)`
        - `Succeeded`
        """
        raise NotImplementedError(
            "Please instantiate one of the `Status` "
            "subclasses:\n"
            "\n\t- `Failed`"
            "\n\t- `NotStarted`"
            "\n\t- `InProgress(progress)`"
            "\n\t- `Succeeded`"
        )

    def __eq__(self: "Status", other: "Status") -> bool:  # type: ignore
        """
        Determines if two status are equal.

        Two statues are considered equal if they are of the same Status type;
        if both `Status`es are `InProgress`, then their progress values must
        compare equal also.
        """
        self_type = type(self)
        other_type = type(other)

        if self_type is InProgress and other_type is InProgress:
            return self.progress == other.progress  # type: ignore
        else:
            return self_type == other_type

    def __lt__(self: "Status", other: "Status") -> bool:
        """
        Determines if one `Status` is less than another one.

        The `Status` ordering hierarchy is as follows:

        ```
        Failed < NotStarted < InProgress(x) < InProgress(y) < Succeeded
        # (where x is < y)
        ```

        The `Status.__lte__`, `Status.__gt__`, and `Status.__gte__` methods are
        autogenerated from this method using `functools.total_ordering` and
        subsequently have no documentation.
        """
        self_type = type(self)
        other_type = type(other)
        both_not_in_progress = not self.in_progress and not other.in_progress

        if both_not_in_progress and self_type is other_type:
            return False
        elif self_type is Failed:
            return True
        elif self_type is NotStarted and other_type in (InProgress, Succeeded):
            return True
        elif self_type is InProgress and other_type is InProgress:
            return self.progress < other.progress  # type: ignore
        elif self_type is InProgress and other_type is Succeeded:
            return True
        else:
            return False

    @property
    def in_progress(self: "Status") -> bool:
        """
        Determines if this `Status` is in progress or not.

        This is different from a comparison to an `InProgress` because said
        comparison would require both `Status` to have the same `progress`
        values (if they are both indeed `InProgress`), while this method
        returns true for any `InProgress` progress value.
        """
        return isinstance(self, InProgress)


class Failed(Status):
    """Represents that the event has failed."""

    def __init__(self: "Failed") -> None:
        self.progress = None

    def __repr__(self: "Failed") -> str:
        """Returns the string representation of this `Failure` `Status`."""
        return "Failed()"


class NotStarted(Status):
    """Represents that the event has not yet been started."""

    def __init__(self: "NotStarted") -> None:
        self.progress = None

    def __repr__(self: "NotStarted") -> str:
        """Returns the string representation of this `NotStarted` `Status`."""
        return "NotStarted()"


class InProgress(Status):
    """Represents that the event is in progress."""

    def __init__(self: "InProgress", progress: int = 0) -> None:
        """
        Creates a new `InProgress` status.

        If the given `progress` is not `0 <= progress <= 100`, then the value
        is either reduced to 100 or increased to 0. This is done because
        sometime programatic progress updating can end up creating a
        `InProgress` with a negative or > 100 progress.
        """
        self.progress = max(0, min(progress, 100))

    def __repr__(self: "InProgress") -> str:
        """Returns the string representation of this `InProgress` `Status`."""
        return f"InProgress({self.progress})"


class Succeeded(Status):
    """Represents that an event has succeeded."""

    def __init__(self: "Succeeded") -> None:
        self.progress = None

    def __repr__(self: "Succeeded") -> str:
        """Returns the string representation of this `Succeeded` `Status`."""
        return "Succeeded()"
