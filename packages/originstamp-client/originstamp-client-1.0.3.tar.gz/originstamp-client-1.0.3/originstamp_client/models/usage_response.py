# coding: utf-8

"""
    OriginStamp Client

    OpenAPI spec version: 3.0
    OriginStamp Documentation: https://docs.originstamp.com
    Contact: mail@originstamp.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UsageResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'consumed_credits': 'float',
        'credits_per_month': 'float',
        'remaining_credits': 'float'
    }

    attribute_map = {
        'consumed_credits': 'consumed_credits',
        'credits_per_month': 'credits_per_month',
        'remaining_credits': 'remaining_credits'
    }

    def __init__(self, consumed_credits=None, credits_per_month=None, remaining_credits=None):  # noqa: E501
        """UsageResponse - a model defined in Swagger"""  # noqa: E501

        self._consumed_credits = None
        self._credits_per_month = None
        self._remaining_credits = None
        self.discriminator = None

        if consumed_credits is not None:
            self.consumed_credits = consumed_credits
        if credits_per_month is not None:
            self.credits_per_month = credits_per_month
        if remaining_credits is not None:
            self.remaining_credits = remaining_credits

    @property
    def consumed_credits(self):
        """Gets the consumed_credits of this UsageResponse.  # noqa: E501

        Represents the number of used credits for the current month.  # noqa: E501

        :return: The consumed_credits of this UsageResponse.  # noqa: E501
        :rtype: float
        """
        return self._consumed_credits

    @consumed_credits.setter
    def consumed_credits(self, consumed_credits):
        """Sets the consumed_credits of this UsageResponse.

        Represents the number of used credits for the current month.  # noqa: E501

        :param consumed_credits: The consumed_credits of this UsageResponse.  # noqa: E501
        :type: float
        """

        self._consumed_credits = consumed_credits

    @property
    def credits_per_month(self):
        """Gets the credits_per_month of this UsageResponse.  # noqa: E501

        Represents the total number of credits per month.  # noqa: E501

        :return: The credits_per_month of this UsageResponse.  # noqa: E501
        :rtype: float
        """
        return self._credits_per_month

    @credits_per_month.setter
    def credits_per_month(self, credits_per_month):
        """Sets the credits_per_month of this UsageResponse.

        Represents the total number of credits per month.  # noqa: E501

        :param credits_per_month: The credits_per_month of this UsageResponse.  # noqa: E501
        :type: float
        """

        self._credits_per_month = credits_per_month

    @property
    def remaining_credits(self):
        """Gets the remaining_credits of this UsageResponse.  # noqa: E501

        Represents the remaining number of credits for the current month.  # noqa: E501

        :return: The remaining_credits of this UsageResponse.  # noqa: E501
        :rtype: float
        """
        return self._remaining_credits

    @remaining_credits.setter
    def remaining_credits(self, remaining_credits):
        """Sets the remaining_credits of this UsageResponse.

        Represents the remaining number of credits for the current month.  # noqa: E501

        :param remaining_credits: The remaining_credits of this UsageResponse.  # noqa: E501
        :type: float
        """

        self._remaining_credits = remaining_credits

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
