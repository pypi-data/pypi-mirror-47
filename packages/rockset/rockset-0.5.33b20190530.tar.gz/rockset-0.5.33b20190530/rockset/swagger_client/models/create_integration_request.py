# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rockset.swagger_client.models.aws_external_id_integration import AwsExternalIdIntegration  # noqa: F401,E501
from rockset.swagger_client.models.aws_key_integration import AwsKeyIntegration  # noqa: F401,E501
from rockset.swagger_client.models.aws_redshift_cluster_integration import AwsRedshiftClusterIntegration  # noqa: F401,E501
from rockset.swagger_client.models.gcp_service_account import GcpServiceAccount  # noqa: F401,E501


class CreateIntegrationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'aws': 'AwsKeyIntegration',
        'aws_external_id': 'AwsExternalIdIntegration',
        'gcp_service_account': 'GcpServiceAccount',
        'aws_redshift_cluster': 'AwsRedshiftClusterIntegration'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'aws': 'aws',
        'aws_external_id': 'aws_external_id',
        'gcp_service_account': 'gcp_service_account',
        'aws_redshift_cluster': 'aws_redshift_cluster'
    }

    def __init__(self, name, **kwargs):  # noqa: E501
        """CreateIntegrationRequest - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._aws = None
        self._aws_external_id = None
        self._gcp_service_account = None
        self._aws_redshift_cluster = None
        self.discriminator = None

        self.name = name
        self.description = kwargs.pop('description', None)
        self.aws = kwargs.pop('aws', None)
        self.aws_external_id = kwargs.pop('aws_external_id', None)
        self.gcp_service_account = kwargs.pop('gcp_service_account', None)
        self.aws_redshift_cluster = kwargs.pop('aws_redshift_cluster', None)

    @property
    def name(self):
        """Gets the name of this CreateIntegrationRequest.  # noqa: E501

        descriptive label  # noqa: E501

        :return: The name of this CreateIntegrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateIntegrationRequest.

        descriptive label  # noqa: E501

        :param name: The name of this CreateIntegrationRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this CreateIntegrationRequest.  # noqa: E501

        longer explanation for the integration  # noqa: E501

        :return: The description of this CreateIntegrationRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateIntegrationRequest.

        longer explanation for the integration  # noqa: E501

        :param description: The description of this CreateIntegrationRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def aws(self):
        """Gets the aws of this CreateIntegrationRequest.  # noqa: E501

        credentials for an AWS key integration  # noqa: E501

        :return: The aws of this CreateIntegrationRequest.  # noqa: E501
        :rtype: AwsKeyIntegration
        """
        return self._aws

    @aws.setter
    def aws(self, aws):
        """Sets the aws of this CreateIntegrationRequest.

        credentials for an AWS key integration  # noqa: E501

        :param aws: The aws of this CreateIntegrationRequest.  # noqa: E501
        :type: AwsKeyIntegration
        """

        self._aws = aws

    @property
    def aws_external_id(self):
        """Gets the aws_external_id of this CreateIntegrationRequest.  # noqa: E501

        details for an AWS External Id integration  # noqa: E501

        :return: The aws_external_id of this CreateIntegrationRequest.  # noqa: E501
        :rtype: AwsExternalIdIntegration
        """
        return self._aws_external_id

    @aws_external_id.setter
    def aws_external_id(self, aws_external_id):
        """Sets the aws_external_id of this CreateIntegrationRequest.

        details for an AWS External Id integration  # noqa: E501

        :param aws_external_id: The aws_external_id of this CreateIntegrationRequest.  # noqa: E501
        :type: AwsExternalIdIntegration
        """

        self._aws_external_id = aws_external_id

    @property
    def gcp_service_account(self):
        """Gets the gcp_service_account of this CreateIntegrationRequest.  # noqa: E501

        details of a GCP Service Account integration  # noqa: E501

        :return: The gcp_service_account of this CreateIntegrationRequest.  # noqa: E501
        :rtype: GcpServiceAccount
        """
        return self._gcp_service_account

    @gcp_service_account.setter
    def gcp_service_account(self, gcp_service_account):
        """Sets the gcp_service_account of this CreateIntegrationRequest.

        details of a GCP Service Account integration  # noqa: E501

        :param gcp_service_account: The gcp_service_account of this CreateIntegrationRequest.  # noqa: E501
        :type: GcpServiceAccount
        """

        self._gcp_service_account = gcp_service_account

    @property
    def aws_redshift_cluster(self):
        """Gets the aws_redshift_cluster of this CreateIntegrationRequest.  # noqa: E501

        details of redshift cluster integration  # noqa: E501

        :return: The aws_redshift_cluster of this CreateIntegrationRequest.  # noqa: E501
        :rtype: AwsRedshiftClusterIntegration
        """
        return self._aws_redshift_cluster

    @aws_redshift_cluster.setter
    def aws_redshift_cluster(self, aws_redshift_cluster):
        """Sets the aws_redshift_cluster of this CreateIntegrationRequest.

        details of redshift cluster integration  # noqa: E501

        :param aws_redshift_cluster: The aws_redshift_cluster of this CreateIntegrationRequest.  # noqa: E501
        :type: AwsRedshiftClusterIntegration
        """

        self._aws_redshift_cluster = aws_redshift_cluster

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateIntegrationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateIntegrationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    def __getitem__(self, item):
        return getattr(self, item)

    def get(self, item):
        return getattr(self, item)

    def items(self):
        return self.to_dict().items()

    def __setitem__(self, item, value):
        return seattr(self, item, value)
