# coding: utf-8

"""
    REST API

    Rockset's REST API allows for creating and managing all resources in Rockset. Each supported endpoint is documented below.  All requests must be authorized with a Rockset API key, which can be created in the [Rockset console](https://console.rockset.com). The API key must be provided as `ApiKey <api_key>` in the `Authorization` request header. For example: ``` Authorization: ApiKey aB35kDjg93J5nsf4GjwMeErAVd832F7ad4vhsW1S02kfZiab42sTsfW5Sxt25asT ```  All endpoints are only accessible via https.  Build something awesome!  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from rockset.swagger_client.models.aws_key_integration import AwsKeyIntegration  # noqa: F401,E501


class AwsRedshiftClusterIntegration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aws_key': 'AwsKeyIntegration',
        'username': 'str',
        'password': 'str',
        'host': 'str',
        'port': 'int'
    }

    attribute_map = {
        'aws_key': 'aws_key',
        'username': 'username',
        'password': 'password',
        'host': 'host',
        'port': 'port'
    }

    def __init__(self, username, password, host, port, **kwargs):  # noqa: E501
        """AwsRedshiftClusterIntegration - a model defined in Swagger"""  # noqa: E501

        self._aws_key = None
        self._username = None
        self._password = None
        self._host = None
        self._port = None
        self.discriminator = None

        self.aws_key = kwargs.pop('aws_key', None)
        self.username = username
        self.password = password
        self.host = host
        self.port = port

    @property
    def aws_key(self):
        """Gets the aws_key of this AwsRedshiftClusterIntegration.  # noqa: E501

        AWS Access and Secret keys  # noqa: E501

        :return: The aws_key of this AwsRedshiftClusterIntegration.  # noqa: E501
        :rtype: AwsKeyIntegration
        """
        return self._aws_key

    @aws_key.setter
    def aws_key(self, aws_key):
        """Sets the aws_key of this AwsRedshiftClusterIntegration.

        AWS Access and Secret keys  # noqa: E501

        :param aws_key: The aws_key of this AwsRedshiftClusterIntegration.  # noqa: E501
        :type: AwsKeyIntegration
        """

        self._aws_key = aws_key

    @property
    def username(self):
        """Gets the username of this AwsRedshiftClusterIntegration.  # noqa: E501

        Username associated with Redshift cluster  # noqa: E501

        :return: The username of this AwsRedshiftClusterIntegration.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AwsRedshiftClusterIntegration.

        Username associated with Redshift cluster  # noqa: E501

        :param username: The username of this AwsRedshiftClusterIntegration.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def password(self):
        """Gets the password of this AwsRedshiftClusterIntegration.  # noqa: E501

        Password associated with Redshift cluster  # noqa: E501

        :return: The password of this AwsRedshiftClusterIntegration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AwsRedshiftClusterIntegration.

        Password associated with Redshift cluster  # noqa: E501

        :param password: The password of this AwsRedshiftClusterIntegration.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def host(self):
        """Gets the host of this AwsRedshiftClusterIntegration.  # noqa: E501

        Redshift Cluster host  # noqa: E501

        :return: The host of this AwsRedshiftClusterIntegration.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this AwsRedshiftClusterIntegration.

        Redshift Cluster host  # noqa: E501

        :param host: The host of this AwsRedshiftClusterIntegration.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def port(self):
        """Gets the port of this AwsRedshiftClusterIntegration.  # noqa: E501

        Redshift Cluster port  # noqa: E501

        :return: The port of this AwsRedshiftClusterIntegration.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this AwsRedshiftClusterIntegration.

        Redshift Cluster port  # noqa: E501

        :param port: The port of this AwsRedshiftClusterIntegration.  # noqa: E501
        :type: int
        """

        self._port = port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AwsRedshiftClusterIntegration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AwsRedshiftClusterIntegration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    def __getitem__(self, item):
        return getattr(self, item)

    def get(self, item):
        return getattr(self, item)

    def items(self):
        return self.to_dict().items()

    def __setitem__(self, item, value):
        return seattr(self, item, value)
