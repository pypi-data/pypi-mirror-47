Metadata-Version: 1.1
Name: deconvoluted
Version: 0.1.0
Summary: Deconvoluted makes performing integral transforms simple and pythonic!
Home-page: https://github.com/tbuli/deconvoluted
Author: Martin Roelfs
Author-email: martin.roelfs@kuleuven.be
License: MIT license
Description: ============
        Deconvoluted
        ============
        
        
        .. image:: https://img.shields.io/pypi/v/deconvoluted.svg
                :target: https://pypi.python.org/pypi/deconvoluted
        
        .. image:: https://img.shields.io/travis/tbuli/deconvoluted.svg
                :target: https://travis-ci.org/tbuli/deconvoluted
        
        .. image:: https://readthedocs.org/projects/deconvoluted/badge/?version=latest
                :target: https://deconvoluted.readthedocs.io/en/latest/?badge=latest
                :alt: Documentation Status
        
        
        
        
        Deconvoluted makes performing numerical integral transforms simple and pythonic!
        
        
        * Free software: MIT license
        * Documentation: https://deconvoluted.readthedocs.io.
        
        
        Features
        --------
        
        Fourier Transforms
        ~~~~~~~~~~~~~~~~~~
        
        As a first example, let's perform a Fourier transform:
        
        .. code-block:: python
        
            F, p = fourier_transform(f, x)
        
        By default, Fourier transforms use Fourier coefficients `a=0`,
        `b=-2\pi`. Using another convention is simple:
        
        .. code-block:: python
        
            F, k = fourier_transform(f, x, convention=(-1, 1))
        
        As a physicist myself, I therefore switch the labelling of the output from
        `p` for momentum, to `k` for wavevector.
        
        Performing multidimensional transforms is just as easy. For example:
        
        .. code-block:: python
        
            F_pq, p, q = fourier_transform(f_xy, x, y)
        
        transforms both `x` and `y` at the same time.
        Transforming only one of the two variables can be done simply by setting those
        that shouldn't transform to ``None``:
        
        .. code-block:: python
        
            F_py, p = fourier_transform(f_xy, x, None)
            F_xq, q = fourier_transform(f_xy, None, y)
        
        
        =======
        History
        =======
        
        0.1.0 (2019-06-03)
        ------------------
        
        * First release on PyPI.
        
Keywords: deconvoluted
Platform: UNKNOWN
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
