# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from controlm_client.api_client import ApiClient


class SamplesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_many_samples(self, samples_file, **kwargs):  # noqa: E501
        """Upload samples file  # noqa: E501

        Bulk create many samples by uploading a file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_many_samples(samples_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file samples_file: Samples file to upload. (required)
        :return: SamplesLoadData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_many_samples_with_http_info(samples_file, **kwargs)  # noqa: E501
        else:
            (data) = self.add_many_samples_with_http_info(samples_file, **kwargs)  # noqa: E501
            return data

    def add_many_samples_with_http_info(self, samples_file, **kwargs):  # noqa: E501
        """Upload samples file  # noqa: E501

        Bulk create many samples by uploading a file.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_many_samples_with_http_info(samples_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file samples_file: Samples file to upload. (required)
        :return: SamplesLoadData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['samples_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_many_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'samples_file' is set
        if ('samples_file' not in params or
                params['samples_file'] is None):
            raise ValueError("Missing the required parameter `samples_file` when calling `add_many_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'samples_file' in params:
            local_var_files['samplesFile'] = params['samples_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/samples/load', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SamplesLoadData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_sample(self, new_sample, **kwargs):  # noqa: E501
        """Create sample  # noqa: E501

        Create a new sample in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sample(new_sample, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSample new_sample: Sample to add (required)
        :return: AddRemoveSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_sample_with_http_info(new_sample, **kwargs)  # noqa: E501
        else:
            (data) = self.add_sample_with_http_info(new_sample, **kwargs)  # noqa: E501
            return data

    def add_sample_with_http_info(self, new_sample, **kwargs):  # noqa: E501
        """Create sample  # noqa: E501

        Create a new sample in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_sample_with_http_info(new_sample, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param NewSample new_sample: Sample to add (required)
        :return: AddRemoveSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['new_sample']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'new_sample' is set
        if ('new_sample' not in params or
                params['new_sample'] is None):
            raise ValueError("Missing the required parameter `new_sample` when calling `add_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_sample' in params:
            body_params = params['new_sample']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/samples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddRemoveSuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_sample(self, sample_id, **kwargs):  # noqa: E501
        """Delete sample  # noqa: E501

        Deletes a single sample based on the ID supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sample(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: ID of sample to delete (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_sample_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def delete_sample_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Delete sample  # noqa: E501

        Deletes a single sample based on the ID supplied.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_sample_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: ID of sample to delete (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_sample" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if ('sample_id' not in params or
                params['sample_id'] is None):
            raise ValueError("Missing the required parameter `sample_id` when calling `delete_sample`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleId'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/samples/{sampleId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def find_sample_by_id(self, sample_id, **kwargs):  # noqa: E501
        """Get sample  # noqa: E501

        Get a specific sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_sample_by_id(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: ID of the sample to return. (required)
        :return: Sample
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.find_sample_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
        else:
            (data) = self.find_sample_by_id_with_http_info(sample_id, **kwargs)  # noqa: E501
            return data

    def find_sample_by_id_with_http_info(self, sample_id, **kwargs):  # noqa: E501
        """Get sample  # noqa: E501

        Get a specific sample.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.find_sample_by_id_with_http_info(sample_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int sample_id: ID of the sample to return. (required)
        :return: Sample
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sample_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method find_sample_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sample_id' is set
        if ('sample_id' not in params or
                params['sample_id'] is None):
            raise ValueError("Missing the required parameter `sample_id` when calling `find_sample_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sample_id' in params:
            path_params['sampleId'] = params['sample_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/samples/{sampleId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Sample',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_samples(self, **kwargs):  # noqa: E501
        """Get all samples  # noqa: E501

        List all samples defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_samples(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sample]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_samples_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_samples_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_samples_with_http_info(self, **kwargs):  # noqa: E501
        """Get all samples  # noqa: E501

        List all samples defined in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_samples_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sample]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_samples" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Sample]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
