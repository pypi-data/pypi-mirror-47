# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from controlm_client.api_client import ApiClient


class ConfigApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_agent(self, ctm, body, **kwargs):  # noqa: E501
        """add agent to Control-M Server  # noqa: E501

        Add an agent to Control-M Server. This command does not install or configure the agent. It only defines the agent in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_agent(ctm, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is going to be added to. (required)
        :param AddAgentParams body: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_agent_with_http_info(ctm, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_agent_with_http_info(ctm, body, **kwargs)  # noqa: E501
            return data

    def add_agent_with_http_info(self, ctm, body, **kwargs):  # noqa: E501
        """add agent to Control-M Server  # noqa: E501

        Add an agent to Control-M Server. This command does not install or configure the agent. It only defines the agent in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_agent_with_http_info(ctm, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is going to be added to. (required)
        :param AddAgentParams body: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `add_agent`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_host_to_hostgroup(self, ctm, hostgroup, agent, **kwargs):  # noqa: E501
        """add agent to hostgroup  # noqa: E501

        Add an agent to hostgroup. Create the the hostgroup if it does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_to_hostgroup(ctm, hostgroup, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :param AgentInGroupParams agent: The hostname of the new agent (required)
        :return: AgentsInGroupSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_host_to_hostgroup_with_http_info(ctm, hostgroup, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.add_host_to_hostgroup_with_http_info(ctm, hostgroup, agent, **kwargs)  # noqa: E501
            return data

    def add_host_to_hostgroup_with_http_info(self, ctm, hostgroup, agent, **kwargs):  # noqa: E501
        """add agent to hostgroup  # noqa: E501

        Add an agent to hostgroup. Create the the hostgroup if it does not exist.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_host_to_hostgroup_with_http_info(ctm, hostgroup, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :param AgentInGroupParams agent: The hostname of the new agent (required)
        :return: AgentsInGroupSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'hostgroup', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_host_to_hostgroup" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `add_host_to_hostgroup`")  # noqa: E501
        # verify the required parameter 'hostgroup' is set
        if ('hostgroup' not in params or
                params['hostgroup'] is None):
            raise ValueError("Missing the required parameter `hostgroup` when calling `add_host_to_hostgroup`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `add_host_to_hostgroup`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'hostgroup' in params:
            path_params['hostgroup'] = params['hostgroup']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'agent' in params:
            body_params = params['agent']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/hostgroup/{hostgroup}/agent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentsInGroupSuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_remote_host(self, ctm, **kwargs):  # noqa: E501
        """add remote host to Control-M Server  # noqa: E501

        Add a remote host to Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_remote_host(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is going to be added to. (required)
        :param AddRemoteHostParams data: The non default, advanced configuration data
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_remote_host_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.add_remote_host_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def add_remote_host_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """add remote host to Control-M Server  # noqa: E501

        Add a remote host to Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_remote_host_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is going to be added to. (required)
        :param AddRemoteHostParams data: The non default, advanced configuration data
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_remote_host" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `add_remote_host`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'data' in params:
            body_params = params['data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/remotehost', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_role(self, role_file, **kwargs):  # noqa: E501
        """Add Authorization Role  # noqa: E501

        Add Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role(role_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file role_file: File with contenet of Role Data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_role_with_http_info(role_file, **kwargs)  # noqa: E501
        else:
            (data) = self.add_role_with_http_info(role_file, **kwargs)  # noqa: E501
            return data

    def add_role_with_http_info(self, role_file, **kwargs):  # noqa: E501
        """Add Authorization Role  # noqa: E501

        Add Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_with_http_info(role_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file role_file: File with contenet of Role Data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role_file' is set
        if ('role_file' not in params or
                params['role_file'] is None):
            raise ValueError("Missing the required parameter `role_file` when calling `add_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'role_file' in params:
            local_var_files['roleFile'] = params['role_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/role', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_role_to_ldap_group(self, ldapgroup, role, **kwargs):  # noqa: E501
        """Add a role to LDAP group  # noqa: E501

        Add a role to LDAP group so any user belong to the LDAP group will get all permissions defined in the role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_ldap_group(ldapgroup, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of LDAP group (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_role_to_ldap_group_with_http_info(ldapgroup, role, **kwargs)  # noqa: E501
        else:
            (data) = self.add_role_to_ldap_group_with_http_info(ldapgroup, role, **kwargs)  # noqa: E501
            return data

    def add_role_to_ldap_group_with_http_info(self, ldapgroup, role, **kwargs):  # noqa: E501
        """Add a role to LDAP group  # noqa: E501

        Add a role to LDAP group so any user belong to the LDAP group will get all permissions defined in the role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_ldap_group_with_http_info(ldapgroup, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of LDAP group (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ldapgroup', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_to_ldap_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ldapgroup' is set
        if ('ldapgroup' not in params or
                params['ldapgroup'] is None):
            raise ValueError("Missing the required parameter `ldapgroup` when calling `add_role_to_ldap_group`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `add_role_to_ldap_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ldapgroup' in params:
            path_params['ldapgroup'] = params['ldapgroup']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/ldap/{ldapgroup}/role/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_role_to_user(self, user, role, **kwargs):  # noqa: E501
        """Add a role to user  # noqa: E501

        Add a role to user so that user will inherit role authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_user(user, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Name of user (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_role_to_user_with_http_info(user, role, **kwargs)  # noqa: E501
        else:
            (data) = self.add_role_to_user_with_http_info(user, role, **kwargs)  # noqa: E501
            return data

    def add_role_to_user_with_http_info(self, user, role, **kwargs):  # noqa: E501
        """Add a role to user  # noqa: E501

        Add a role to user so that user will inherit role authorization  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_role_to_user_with_http_info(user, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Name of user (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_role_to_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `add_role_to_user`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `add_role_to_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user/{user}/role/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_secret(self, name_value, **kwargs):  # noqa: E501
        """Add a new secret  # noqa: E501

        Add a new secret to the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_secret(name_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecretKeyValue name_value: The new secret value (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_secret_with_http_info(name_value, **kwargs)  # noqa: E501
        else:
            (data) = self.add_secret_with_http_info(name_value, **kwargs)  # noqa: E501
            return data

    def add_secret_with_http_info(self, name_value, **kwargs):  # noqa: E501
        """Add a new secret  # noqa: E501

        Add a new secret to the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_secret_with_http_info(name_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SecretKeyValue name_value: The new secret value (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name_value' is set
        if ('name_value' not in params or
                params['name_value'] is None):
            raise ValueError("Missing the required parameter `name_value` when calling `add_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'name_value' in params:
            body_params = params['name_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/secret', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_server(self, body, **kwargs):  # noqa: E501
        """add Control-M server to the system  # noqa: E501

        Add a Control-M Server. This command setting up new Control-M server in the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_server(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddServerParams body: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_server_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_server_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def add_server_with_http_info(self, body, **kwargs):  # noqa: E501
        """add Control-M server to the system  # noqa: E501

        Add a Control-M Server. This command setting up new Control-M server in the system  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_server_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddServerParams body: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_user(self, user_file, **kwargs):  # noqa: E501
        """Add user  # noqa: E501

        Add user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user(user_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file user_file: File with contenet of user data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_user_with_http_info(user_file, **kwargs)  # noqa: E501
        else:
            (data) = self.add_user_with_http_info(user_file, **kwargs)  # noqa: E501
            return data

    def add_user_with_http_info(self, user_file, **kwargs):  # noqa: E501
        """Add user  # noqa: E501

        Add user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_user_with_http_info(user_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file user_file: File with contenet of user data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_file' is set
        if ('user_file' not in params or
                params['user_file'] is None):
            raise ValueError("Missing the required parameter `user_file` when calling `add_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_file' in params:
            local_var_files['userFile'] = params['user_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def authorize_ssh_known_remotehost(self, ctm, remotehost, **kwargs):  # noqa: E501
        """Authorize  # noqa: E501

        Authorized known ssh remote host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorize_ssh_known_remotehost(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is connected to. (required)
        :param str remotehost: The name of the remote host. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.authorize_ssh_known_remotehost_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
        else:
            (data) = self.authorize_ssh_known_remotehost_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
            return data

    def authorize_ssh_known_remotehost_with_http_info(self, ctm, remotehost, **kwargs):  # noqa: E501
        """Authorize  # noqa: E501

        Authorized known ssh remote host.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.authorize_ssh_known_remotehost_with_http_info(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is connected to. (required)
        :param str remotehost: The name of the remote host. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'remotehost']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method authorize_ssh_known_remotehost" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `authorize_ssh_known_remotehost`")  # noqa: E501
        # verify the required parameter 'remotehost' is set
        if ('remotehost' not in params or
                params['remotehost'] is None):
            raise ValueError("Missing the required parameter `remotehost` when calling `authorize_ssh_known_remotehost`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'remotehost' in params:
            path_params['remotehost'] = params['remotehost']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/remotehost/{remotehost}/authorize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_user_password(self, user, **kwargs):  # noqa: E501
        """Change user password  # noqa: E501

        Change user password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_user_password(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: user name (required)
        :param UserPassword password: The new password.
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_user_password_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.change_user_password_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def change_user_password_with_http_info(self, user, **kwargs):  # noqa: E501
        """Change user password  # noqa: E501

        Change user password  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_user_password_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: user name (required)
        :param UserPassword password: The new password.
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'password']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_user_password" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `change_user_password`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'password' in params:
            body_params = params['password']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/user/{user}/password/adminUpdate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_run_as_user(self, ctm, run_as_user_data, **kwargs):  # noqa: E501
        """Add a new Run-as user  # noqa: E501

        Add a new Run-as user to Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run_as_user(ctm, run_as_user_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param RunAsUserData run_as_user_data: Run as user data (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_run_as_user_with_http_info(ctm, run_as_user_data, **kwargs)  # noqa: E501
        else:
            (data) = self.create_run_as_user_with_http_info(ctm, run_as_user_data, **kwargs)  # noqa: E501
            return data

    def create_run_as_user_with_http_info(self, ctm, run_as_user_data, **kwargs):  # noqa: E501
        """Add a new Run-as user  # noqa: E501

        Add a new Run-as user to Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_run_as_user_with_http_info(ctm, run_as_user_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param RunAsUserData run_as_user_data: Run as user data (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'run_as_user_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_run_as_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `create_run_as_user`")  # noqa: E501
        # verify the required parameter 'run_as_user_data' is set
        if ('run_as_user_data' not in params or
                params['run_as_user_data'] is None):
            raise ValueError("Missing the required parameter `run_as_user_data` when calling `create_run_as_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'run_as_user_data' in params:
            body_params = params['run_as_user_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasuser', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_agent(self, ctm, agent, **kwargs):  # noqa: E501
        """delete an agent from Control-M Server  # noqa: E501

        Delete an agent from a Control-M Server. This will not shut the agent down. It only disconnects and removes it from the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to delete. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
            return data

    def delete_agent_with_http_info(self, ctm, agent, **kwargs):  # noqa: E501
        """delete an agent from Control-M Server  # noqa: E501

        Delete an agent from a Control-M Server. This will not shut the agent down. It only disconnects and removes it from the list.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_agent_with_http_info(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to delete. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `delete_agent`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `delete_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_authorization_role(self, role, **kwargs):  # noqa: E501
        """Delete Authorization Role  # noqa: E501

        Delete Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_role(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_authorization_role_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_authorization_role_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def delete_authorization_role_with_http_info(self, role, **kwargs):  # noqa: E501
        """Delete Authorization Role  # noqa: E501

        Delete Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_authorization_role_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_authorization_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `delete_authorization_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/role/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_host_from_group(self, ctm, hostgroup, host, **kwargs):  # noqa: E501
        """delete an agent from a hostgroup  # noqa: E501

        Delete an agent from the specified hostgroup. If the group is empty it will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_from_group(ctm, hostgroup, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :param str host: The agent to be deleted (required)
        :return: AgentsInGroupSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_host_from_group_with_http_info(ctm, hostgroup, host, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_host_from_group_with_http_info(ctm, hostgroup, host, **kwargs)  # noqa: E501
            return data

    def delete_host_from_group_with_http_info(self, ctm, hostgroup, host, **kwargs):  # noqa: E501
        """delete an agent from a hostgroup  # noqa: E501

        Delete an agent from the specified hostgroup. If the group is empty it will also be deleted.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_host_from_group_with_http_info(ctm, hostgroup, host, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :param str host: The agent to be deleted (required)
        :return: AgentsInGroupSuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'hostgroup', 'host']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_host_from_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `delete_host_from_group`")  # noqa: E501
        # verify the required parameter 'hostgroup' is set
        if ('hostgroup' not in params or
                params['hostgroup'] is None):
            raise ValueError("Missing the required parameter `hostgroup` when calling `delete_host_from_group`")  # noqa: E501
        # verify the required parameter 'host' is set
        if ('host' not in params or
                params['host'] is None):
            raise ValueError("Missing the required parameter `host` when calling `delete_host_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'hostgroup' in params:
            path_params['hostgroup'] = params['hostgroup']  # noqa: E501
        if 'host' in params:
            path_params['host'] = params['host']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/hostgroup/{hostgroup}/agent/{host}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentsInGroupSuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_remote_host(self, ctm, remotehost, **kwargs):  # noqa: E501
        """delete a remote host from Control-M Server  # noqa: E501

        Delete a remote host from a Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_remote_host(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is connected to. (required)
        :param str remotehost: The name of the remote host to delete. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_remote_host_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_remote_host_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
            return data

    def delete_remote_host_with_http_info(self, ctm, remotehost, **kwargs):  # noqa: E501
        """delete a remote host from Control-M Server  # noqa: E501

        Delete a remote host from a Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_remote_host_with_http_info(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host is connected to. (required)
        :param str remotehost: The name of the remote host to delete. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'remotehost']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_remote_host" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `delete_remote_host`")  # noqa: E501
        # verify the required parameter 'remotehost' is set
        if ('remotehost' not in params or
                params['remotehost'] is None):
            raise ValueError("Missing the required parameter `remotehost` when calling `delete_remote_host`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'remotehost' in params:
            path_params['remotehost'] = params['remotehost']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/remotehost/{remotehost}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_role_from_ldap_group(self, ldapgroup, role, **kwargs):  # noqa: E501
        """Delete a role from LDAP group  # noqa: E501

        Delete a role from LDAP group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_from_ldap_group(ldapgroup, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of LDAP group (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_role_from_ldap_group_with_http_info(ldapgroup, role, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_role_from_ldap_group_with_http_info(ldapgroup, role, **kwargs)  # noqa: E501
            return data

    def delete_role_from_ldap_group_with_http_info(self, ldapgroup, role, **kwargs):  # noqa: E501
        """Delete a role from LDAP group  # noqa: E501

        Delete a role from LDAP group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_role_from_ldap_group_with_http_info(ldapgroup, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of LDAP group (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ldapgroup', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_role_from_ldap_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ldapgroup' is set
        if ('ldapgroup' not in params or
                params['ldapgroup'] is None):
            raise ValueError("Missing the required parameter `ldapgroup` when calling `delete_role_from_ldap_group`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `delete_role_from_ldap_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ldapgroup' in params:
            path_params['ldapgroup'] = params['ldapgroup']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/ldap/{ldapgroup}/role/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_run_as_user(self, ctm, agent, user, **kwargs):  # noqa: E501
        """delete Run-as user  # noqa: E501

        Delete Run-as user from Control-M server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_as_user(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
            return data

    def delete_run_as_user_with_http_info(self, ctm, agent, user, **kwargs):  # noqa: E501
        """delete Run-as user  # noqa: E501

        Delete Run-as user from Control-M server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_run_as_user_with_http_info(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_run_as_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `delete_run_as_user`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `delete_run_as_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_run_as_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasuser/{agent}/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_secret(self, name, **kwargs):  # noqa: E501
        """Delete an existing secret  # noqa: E501

        Delete an existing secret from the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_secret(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the secret to update (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_secret_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_secret_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def delete_secret_with_http_info(self, name, **kwargs):  # noqa: E501
        """Delete an existing secret  # noqa: E501

        Delete an existing secret from the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_secret_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the secret to update (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/secret/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_user(self, user, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        Delete user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_user_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_user_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def delete_user_with_http_info(self, user, **kwargs):  # noqa: E501
        """Delete user  # noqa: E501

        Delete user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_user_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `delete_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user/{user}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def disable_agent(self, ctm, agent, **kwargs):  # noqa: E501
        """disable agent from the Control-M Server  # noqa: E501

        Disable a Control-M agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_agent(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected too. (required)
        :param str agent: The Control-M agent to be disabled. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.disable_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.disable_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
            return data

    def disable_agent_with_http_info(self, ctm, agent, **kwargs):  # noqa: E501
        """disable agent from the Control-M Server  # noqa: E501

        Disable a Control-M agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.disable_agent_with_http_info(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected too. (required)
        :param str agent: The Control-M agent to be disabled. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method disable_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `disable_agent`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `disable_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}/disable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def enable_agent(self, ctm, agent, **kwargs):  # noqa: E501
        """enable agent from the Control-M Server  # noqa: E501

        Enable a Control-M agent. This command does not install or configure the agent. It only enable existing agent in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_agent(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected too. (required)
        :param str agent: The Control-M agent to be enabled. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.enable_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.enable_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
            return data

    def enable_agent_with_http_info(self, ctm, agent, **kwargs):  # noqa: E501
        """enable agent from the Control-M Server  # noqa: E501

        Enable a Control-M agent. This command does not install or configure the agent. It only enable existing agent in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.enable_agent_with_http_info(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected too. (required)
        :param str agent: The Control-M agent to be enabled. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method enable_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `enable_agent`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `enable_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}/enable', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def failover(self, ctm, **kwargs):  # noqa: E501
        """Perform Manual Failover on a specified Control-M Server  # noqa: E501

        Perform Manual Failover on a specified Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.failover(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.failover_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.failover_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def failover_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """Perform Manual Failover on a specified Control-M Server  # noqa: E501

        Perform Manual Failover on a specified Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.failover_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method failover" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `failover`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/failover', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agent_parameters(self, ctm, agent, **kwargs):  # noqa: E501
        """get agent parameters  # noqa: E501

        Get all the parameters of the specified Control-M Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_parameters(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to query. (required)
        :return: KeyValueListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agent_parameters_with_http_info(ctm, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.get_agent_parameters_with_http_info(ctm, agent, **kwargs)  # noqa: E501
            return data

    def get_agent_parameters_with_http_info(self, ctm, agent, **kwargs):  # noqa: E501
        """get agent parameters  # noqa: E501

        Get all the parameters of the specified Control-M Agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agent_parameters_with_http_info(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to query. (required)
        :return: KeyValueListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agent_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_agent_parameters`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `get_agent_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}/params', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyValueListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_agents(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server agents  # noqa: E501

        Get all the agents of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agents(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. Optionally you can filter agent name of host or alias of the Control-M Agent (required)
        :param str agent: Optionally case insensitive agent name filter of host or alias of the Control-M Agent. `ctm server:agents::get ControlM AgentName` returns all agents which names start with `agentname`
        :return: AgentDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_agents_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_agents_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def get_agents_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server agents  # noqa: E501

        Get all the agents of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_agents_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. Optionally you can filter agent name of host or alias of the Control-M Agent (required)
        :param str agent: Optionally case insensitive agent name filter of host or alias of the Control-M Agent. `ctm server:agents::get ControlM AgentName` returns all agents which names start with `agentname`
        :return: AgentDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_agents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_agents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_authorization_roles(self, **kwargs):  # noqa: E501
        """Get Authorization Roles  # noqa: E501

        Get Authorization Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_authorization_roles(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name.
        :param str description: The Role description.
        :return: RoleHeaderList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_authorization_roles_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_authorization_roles_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_authorization_roles_with_http_info(self, **kwargs):  # noqa: E501
        """Get Authorization Roles  # noqa: E501

        Get Authorization Roles  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_authorization_roles_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name.
        :param str description: The Role description.
        :return: RoleHeaderList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_authorization_roles" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleHeaderList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_roles_associated_with_ldap(self, ldapgroup, **kwargs):  # noqa: E501
        """Get Authorization Roles associated with an LDAP group  # noqa: E501

        Get Authorization Roles associated with an LDAP group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_associated_with_ldap(ldapgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of Ldap group (required)
        :param str role: The Role name.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_roles_associated_with_ldap_with_http_info(ldapgroup, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_roles_associated_with_ldap_with_http_info(ldapgroup, **kwargs)  # noqa: E501
            return data

    def get_all_roles_associated_with_ldap_with_http_info(self, ldapgroup, **kwargs):  # noqa: E501
        """Get Authorization Roles associated with an LDAP group  # noqa: E501

        Get Authorization Roles associated with an LDAP group  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_roles_associated_with_ldap_with_http_info(ldapgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ldapgroup: Name of Ldap group (required)
        :param str role: The Role name.
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ldapgroup', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_roles_associated_with_ldap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ldapgroup' is set
        if ('ldapgroup' not in params or
                params['ldapgroup'] is None):
            raise ValueError("Missing the required parameter `ldapgroup` when calling `get_all_roles_associated_with_ldap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ldapgroup' in params:
            path_params['ldapgroup'] = params['ldapgroup']  # noqa: E501

        query_params = []
        if 'role' in params:
            query_params.append(('role', params['role']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/ldap/{ldapgroup}/roles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_users(self, **kwargs):  # noqa: E501
        """Get users  # noqa: E501

        Get users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The user name.
        :param str full_name: The user full name.
        :param str description: The user description.
        :return: list[UserHeader]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_users_with_http_info(self, **kwargs):  # noqa: E501
        """Get users  # noqa: E501

        Get users  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The user name.
        :param str full_name: The user full name.
        :param str description: The user description.
        :return: list[UserHeader]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'full_name', 'description']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'full_name' in params:
            query_params.append(('fullName', params['full_name']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[UserHeader]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hostgroups(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server hostgroups  # noqa: E501

        Get all the hostgroups of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroups belong to. (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hostgroups_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hostgroups_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def get_hostgroups_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server hostgroups  # noqa: E501

        Get all the hostgroups of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hostgroups_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroups belong to. (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hostgroups" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_hostgroups`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/hostgroups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_hosts_in_group(self, ctm, hostgroup, **kwargs):  # noqa: E501
        """get hostgroup agents  # noqa: E501

        Get the agents that compose the specified hostgroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_in_group(ctm, hostgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :return: AgentsInGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_hosts_in_group_with_http_info(ctm, hostgroup, **kwargs)  # noqa: E501
        else:
            (data) = self.get_hosts_in_group_with_http_info(ctm, hostgroup, **kwargs)  # noqa: E501
            return data

    def get_hosts_in_group_with_http_info(self, ctm, hostgroup, **kwargs):  # noqa: E501
        """get hostgroup agents  # noqa: E501

        Get the agents that compose the specified hostgroup  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_hosts_in_group_with_http_info(ctm, hostgroup, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the hostgroup belongs to. (required)
        :param str hostgroup: The hostgroup name (required)
        :return: AgentsInGroupListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'hostgroup']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_hosts_in_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_hosts_in_group`")  # noqa: E501
        # verify the required parameter 'hostgroup' is set
        if ('hostgroup' not in params or
                params['hostgroup'] is None):
            raise ValueError("Missing the required parameter `hostgroup` when calling `get_hosts_in_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'hostgroup' in params:
            path_params['hostgroup'] = params['hostgroup']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/hostgroup/{hostgroup}/agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AgentsInGroupListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_remote_host_properties(self, ctm, remotehost, **kwargs):  # noqa: E501
        """get a remote host configuration from Control-M Server  # noqa: E501

        Get the remote host configuration properties from the Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_host_properties(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host  is connected to. (required)
        :param str remotehost: The name of the remote host. (required)
        :return: AddRemoteHostParams
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_remote_host_properties_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
        else:
            (data) = self.get_remote_host_properties_with_http_info(ctm, remotehost, **kwargs)  # noqa: E501
            return data

    def get_remote_host_properties_with_http_info(self, ctm, remotehost, **kwargs):  # noqa: E501
        """get a remote host configuration from Control-M Server  # noqa: E501

        Get the remote host configuration properties from the Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_host_properties_with_http_info(ctm, remotehost, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the remote host  is connected to. (required)
        :param str remotehost: The name of the remote host. (required)
        :return: AddRemoteHostParams
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'remotehost']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_host_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_remote_host_properties`")  # noqa: E501
        # verify the required parameter 'remotehost' is set
        if ('remotehost' not in params or
                params['remotehost'] is None):
            raise ValueError("Missing the required parameter `remotehost` when calling `get_remote_host_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'remotehost' in params:
            path_params['remotehost'] = params['remotehost']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/remotehost/{remotehost}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddRemoteHostParams',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_remote_hosts(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server remote hosts  # noqa: E501

        Get all the remote hosts of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_hosts(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_remote_hosts_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_remote_hosts_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def get_remote_hosts_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server remote hosts  # noqa: E501

        Get all the remote hosts of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_remote_hosts_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. (required)
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_remote_hosts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_remote_hosts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/remotehosts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role(self, role, **kwargs):  # noqa: E501
        """Get Authorization Role  # noqa: E501

        Get Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :return: RoleData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def get_role_with_http_info(self, role, **kwargs):  # noqa: E501
        """Get Authorization Role  # noqa: E501

        Get Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :return: RoleData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `get_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/role/{role}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RoleData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_role_associates(self, role, **kwargs):  # noqa: E501
        """Get all authorization entities associated with role  # noqa: E501

        Get all authorization entities associated with role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_associates(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: role name. (required)
        :return: list[AssociateData]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_role_associates_with_http_info(role, **kwargs)  # noqa: E501
        else:
            (data) = self.get_role_associates_with_http_info(role, **kwargs)  # noqa: E501
            return data

    def get_role_associates_with_http_info(self, role, **kwargs):  # noqa: E501
        """Get all authorization entities associated with role  # noqa: E501

        Get all authorization entities associated with role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_role_associates_with_http_info(role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: role name. (required)
        :return: list[AssociateData]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_role_associates" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `get_role_associates`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/role/{role}/associates', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[AssociateData]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_run_as_user(self, ctm, agent, user, **kwargs):  # noqa: E501
        """Get Run-as user  # noqa: E501

        Get Run-as user details from Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_as_user(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :return: RunAsUserData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
            return data

    def get_run_as_user_with_http_info(self, ctm, agent, user, **kwargs):  # noqa: E501
        """Get Run-as user  # noqa: E501

        Get Run-as user details from Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_as_user_with_http_info(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :return: RunAsUserData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_as_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_run_as_user`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `get_run_as_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_run_as_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasuser/{agent}/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunAsUserData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_run_as_users_list(self, ctm, **kwargs):  # noqa: E501
        """Get Run-as user list that match the requested search criteria.  # noqa: E501

        Get Run-as user list that match the requested search criteria from Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_as_users_list(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str user: The Run-as user.
        :param str agent: The agent.
        :return: RunAsUsersList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_run_as_users_list_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_run_as_users_list_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def get_run_as_users_list_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """Get Run-as user list that match the requested search criteria.  # noqa: E501

        Get Run-as user list that match the requested search criteria from Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_run_as_users_list_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str user: The Run-as user.
        :param str agent: The agent.
        :return: RunAsUsersList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'user', 'agent']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_run_as_users_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_run_as_users_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []
        if 'user' in params:
            query_params.append(('user', params['user']))  # noqa: E501
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasusers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RunAsUsersList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_server_parameters(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server parameters  # noqa: E501

        Get all the parameters of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_server_parameters(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. (required)
        :return: KeyValueListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_server_parameters_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_server_parameters_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def get_server_parameters_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """get Control-M Server parameters  # noqa: E501

        Get all the parameters of the specified Control-M Server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_server_parameters_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server to query. (required)
        :return: KeyValueListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_server_parameters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_server_parameters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/params', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyValueListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_servers(self, **kwargs):  # noqa: E501
        """get all the Control-M Servers name and hostname in the system  # noqa: E501

        Get the names and hostnames of all Control-M Servers in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_servers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CtmDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_servers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_servers_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_servers_with_http_info(self, **kwargs):  # noqa: E501
        """get all the Control-M Servers name and hostname in the system  # noqa: E501

        Get the names and hostnames of all Control-M Servers in the system.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_servers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CtmDetailsList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_servers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/servers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CtmDetailsList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_user(self, user, **kwargs):  # noqa: E501
        """Get user  # noqa: E501

        Get user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :return: UserData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_user_with_http_info(user, **kwargs)  # noqa: E501
        else:
            (data) = self.get_user_with_http_info(user, **kwargs)  # noqa: E501
            return data

    def get_user_with_http_info(self, user, **kwargs):  # noqa: E501
        """Get user  # noqa: E501

        Get user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_user_with_http_info(user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :return: UserData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user/{user}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UserData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_secrets(self, **kwargs):  # noqa: E501
        """Get list of secret names  # noqa: E501

        Get the list of names of all the secrets in the vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_secrets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_secrets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_secrets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_secrets_with_http_info(self, **kwargs):  # noqa: E501
        """Get list of secret names  # noqa: E501

        Get the list of names of all the secrets in the vault  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_secrets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: StringListResult
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_secrets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/secrets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='StringListResult',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ping_agent(self, ctm, agent, **kwargs):  # noqa: E501
        """ping to the agent in the Control-M Server  # noqa: E501

        Ping a Control-M agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_agent(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M agent. (required)
        :param PingAgentParams body:
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.ping_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
        else:
            (data) = self.ping_agent_with_http_info(ctm, agent, **kwargs)  # noqa: E501
            return data

    def ping_agent_with_http_info(self, ctm, agent, **kwargs):  # noqa: E501
        """ping to the agent in the Control-M Server  # noqa: E501

        Ping a Control-M agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ping_agent_with_http_info(ctm, agent, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M agent. (required)
        :param PingAgentParams body:
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ping_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `ping_agent`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `ping_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}/ping', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_controlm_server(self, ctm, **kwargs):  # noqa: E501
        """Delete Control-M server  # noqa: E501

        Delete Control-M server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_controlm_server(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server host name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_controlm_server_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_controlm_server_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def remove_controlm_server_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """Delete Control-M server  # noqa: E501

        Delete Control-M server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_controlm_server_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: Control-M Server host name. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_controlm_server" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `remove_controlm_server`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_role_from_user(self, user, role, **kwargs):  # noqa: E501
        """Remove a role from a user  # noqa: E501

        Remove a role from a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_role_from_user(user, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Name of user (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_role_from_user_with_http_info(user, role, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_role_from_user_with_http_info(user, role, **kwargs)  # noqa: E501
            return data

    def remove_role_from_user_with_http_info(self, user, role, **kwargs):  # noqa: E501
        """Remove a role from a user  # noqa: E501

        Remove a role from a user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_role_from_user_with_http_info(user, role, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: Name of user (required)
        :param str role: Name of role (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'role']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_role_from_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `remove_role_from_user`")  # noqa: E501
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `remove_role_from_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user/{user}/role/{role}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_agent_parameter(self, ctm, agent, name, body, **kwargs):  # noqa: E501
        """set agent parameter  # noqa: E501

        Set the value of the specified parameter in the specified agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_agent_parameter(ctm, agent, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to update. (required)
        :param str name: The parameter name. (required)
        :param Value body: The new parameter value. (required)
        :return: KeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_agent_parameter_with_http_info(ctm, agent, name, body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_agent_parameter_with_http_info(ctm, agent, name, body, **kwargs)  # noqa: E501
            return data

    def set_agent_parameter_with_http_info(self, ctm, agent, name, body, **kwargs):  # noqa: E501
        """set agent parameter  # noqa: E501

        Set the value of the specified parameter in the specified agent.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_agent_parameter_with_http_info(ctm, agent, name, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server the agent is connected to. (required)
        :param str agent: The name of the agent to update. (required)
        :param str name: The parameter name. (required)
        :param Value body: The new parameter value. (required)
        :return: KeyValue
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_agent_parameter" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `set_agent_parameter`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `set_agent_parameter`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_agent_parameter`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_agent_parameter`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/agent/{agent}/param/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KeyValue',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_system_param(self, name, new_value, **kwargs):  # noqa: E501
        """set value of a an em system parameter  # noqa: E501

        Set value of an enterprise management system parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_system_param(name, new_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Parameter name (required)
        :param Value new_value: Param new value (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_system_param_with_http_info(name, new_value, **kwargs)  # noqa: E501
        else:
            (data) = self.set_system_param_with_http_info(name, new_value, **kwargs)  # noqa: E501
            return data

    def set_system_param_with_http_info(self, name, new_value, **kwargs):  # noqa: E501
        """set value of a an em system parameter  # noqa: E501

        Set value of an enterprise management system parameter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_system_param_with_http_info(name, new_value, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: Parameter name (required)
        :param Value new_value: Param new value (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'new_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_system_param" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `set_system_param`")  # noqa: E501
        # verify the required parameter 'new_value' is set
        if ('new_value' not in params or
                params['new_value'] is None):
            raise ValueError("Missing the required parameter `new_value` when calling `set_system_param`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'new_value' in params:
            body_params = params['new_value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/em/param/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def setasprimary(self, ctm, **kwargs):  # noqa: E501
        """Set secondary server as Primary on a specified Control-M Server  # noqa: E501

        Set secondary server as Primary on a specified Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setasprimary(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.setasprimary_with_http_info(ctm, **kwargs)  # noqa: E501
        else:
            (data) = self.setasprimary_with_http_info(ctm, **kwargs)  # noqa: E501
            return data

    def setasprimary_with_http_info(self, ctm, **kwargs):  # noqa: E501
        """Set secondary server as Primary on a specified Control-M Server  # noqa: E501

        Set secondary server as Primary on a specified Control-M Server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.setasprimary_with_http_info(ctm, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method setasprimary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `setasprimary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/setasprimary', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_run_as_user(self, ctm, agent, user, **kwargs):  # noqa: E501
        """Test existed Run-as user  # noqa: E501

        Test existing Run-as user in Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_run_as_user(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :param RunAsUserDetailsData run_as_user_details_data: Run as user details data
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.test_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
        else:
            (data) = self.test_run_as_user_with_http_info(ctm, agent, user, **kwargs)  # noqa: E501
            return data

    def test_run_as_user_with_http_info(self, ctm, agent, user, **kwargs):  # noqa: E501
        """Test existed Run-as user  # noqa: E501

        Test existing Run-as user in Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.test_run_as_user_with_http_info(ctm, agent, user, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :param RunAsUserDetailsData run_as_user_details_data: Run as user details data
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'user', 'run_as_user_details_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_run_as_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `test_run_as_user`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `test_run_as_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `test_run_as_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'run_as_user_details_data' in params:
            body_params = params['run_as_user_details_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasuser/{agent}/{user}/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_role(self, role, role_file, **kwargs):  # noqa: E501
        """Update Authorization Role  # noqa: E501

        Update Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role(role, role_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :param file role_file: File with contenet of Role Data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_role_with_http_info(role, role_file, **kwargs)  # noqa: E501
        else:
            (data) = self.update_role_with_http_info(role, role_file, **kwargs)  # noqa: E501
            return data

    def update_role_with_http_info(self, role, role_file, **kwargs):  # noqa: E501
        """Update Authorization Role  # noqa: E501

        Update Authorization Role  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_role_with_http_info(role, role_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str role: The Role name. (required)
        :param file role_file: File with contenet of Role Data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['role', 'role_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_role" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'role' is set
        if ('role' not in params or
                params['role'] is None):
            raise ValueError("Missing the required parameter `role` when calling `update_role`")  # noqa: E501
        # verify the required parameter 'role_file' is set
        if ('role_file' not in params or
                params['role_file'] is None):
            raise ValueError("Missing the required parameter `role_file` when calling `update_role`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'role' in params:
            path_params['role'] = params['role']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'role_file' in params:
            local_var_files['roleFile'] = params['role_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/role/{role}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_run_as_user(self, ctm, agent, user, run_as_user_details_data, **kwargs):  # noqa: E501
        """Update Run-as user  # noqa: E501

        Update Run-as user details in Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_as_user(ctm, agent, user, run_as_user_details_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :param RunAsUserDetailsData run_as_user_details_data: Run as user details data (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_run_as_user_with_http_info(ctm, agent, user, run_as_user_details_data, **kwargs)  # noqa: E501
        else:
            (data) = self.update_run_as_user_with_http_info(ctm, agent, user, run_as_user_details_data, **kwargs)  # noqa: E501
            return data

    def update_run_as_user_with_http_info(self, ctm, agent, user, run_as_user_details_data, **kwargs):  # noqa: E501
        """Update Run-as user  # noqa: E501

        Update Run-as user details in Control-M server.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_run_as_user_with_http_info(ctm, agent, user, run_as_user_details_data, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The Control-M Server. (required)
        :param str agent: The Control-M Agent (required)
        :param str user: The user name (required)
        :param RunAsUserDetailsData run_as_user_details_data: Run as user details data (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'user', 'run_as_user_details_data']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_run_as_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `update_run_as_user`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `update_run_as_user`")  # noqa: E501
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_run_as_user`")  # noqa: E501
        # verify the required parameter 'run_as_user_details_data' is set
        if ('run_as_user_details_data' not in params or
                params['run_as_user_details_data'] is None):
            raise ValueError("Missing the required parameter `run_as_user_details_data` when calling `update_run_as_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'run_as_user_details_data' in params:
            body_params = params['run_as_user_details_data']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/server/{ctm}/runasuser/{agent}/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_secret(self, name, **kwargs):  # noqa: E501
        """Update an existing secret  # noqa: E501

        Update an existing secret in the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_secret(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the secret to update (required)
        :param SecretValue value: The new value for the secret
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_secret_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_secret_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def update_secret_with_http_info(self, name, **kwargs):  # noqa: E501
        """Update an existing secret  # noqa: E501

        Update an existing secret in the secrets vault.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_secret_with_http_info(name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: The name of the secret to update (required)
        :param SecretValue value: The new value for the secret
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_secret" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `update_secret`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'value' in params:
            body_params = params['value']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/secret/{name}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_user(self, user, user_file, **kwargs):  # noqa: E501
        """Update user  # noqa: E501

        Update user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user(user, user_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :param file user_file: File with contenet of user data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_user_with_http_info(user, user_file, **kwargs)  # noqa: E501
        else:
            (data) = self.update_user_with_http_info(user, user_file, **kwargs)  # noqa: E501
            return data

    def update_user_with_http_info(self, user, user_file, **kwargs):  # noqa: E501
        """Update user  # noqa: E501

        Update user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_user_with_http_info(user, user_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user: The user name. (required)
        :param file user_file: File with contenet of user data. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user', 'user_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user' is set
        if ('user' not in params or
                params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `update_user`")  # noqa: E501
        # verify the required parameter 'user_file' is set
        if ('user_file' not in params or
                params['user_file'] is None):
            raise ValueError("Missing the required parameter `user_file` when calling `update_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user' in params:
            path_params['user'] = params['user']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_file' in params:
            local_var_files['userFile'] = params['user_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/config/authorization/user/{user}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
