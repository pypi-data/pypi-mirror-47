# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from controlm_client.models.rule_criteria import RuleCriteria  # noqa: F401,E501


class Rule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'max_output_size': 'int',
        'max_output_size_type': 'str',
        'trim_type': 'str',
        'retension': 'int',
        'retension_type': 'str',
        'active': 'bool',
        'archived_type': 'str',
        'state': 'str',
        'rule_criterias': 'list[RuleCriteria]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'max_output_size': 'maxOutputSize',
        'max_output_size_type': 'maxOutputSizeType',
        'trim_type': 'trimType',
        'retension': 'retension',
        'retension_type': 'retensionType',
        'active': 'active',
        'archived_type': 'archivedType',
        'state': 'state',
        'rule_criterias': 'ruleCriterias'
    }

    def __init__(self, name=None, description=None, max_output_size=None, max_output_size_type=None, trim_type=None, retension=None, retension_type=None, active=None, archived_type=None, state=None, rule_criterias=None):  # noqa: E501
        """Rule - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._description = None
        self._max_output_size = None
        self._max_output_size_type = None
        self._trim_type = None
        self._retension = None
        self._retension_type = None
        self._active = None
        self._archived_type = None
        self._state = None
        self._rule_criterias = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if max_output_size is not None:
            self.max_output_size = max_output_size
        if max_output_size_type is not None:
            self.max_output_size_type = max_output_size_type
        if trim_type is not None:
            self.trim_type = trim_type
        if retension is not None:
            self.retension = retension
        if retension_type is not None:
            self.retension_type = retension_type
        if active is not None:
            self.active = active
        if archived_type is not None:
            self.archived_type = archived_type
        if state is not None:
            self.state = state
        if rule_criterias is not None:
            self.rule_criterias = rule_criterias

    @property
    def name(self):
        """Gets the name of this Rule.  # noqa: E501


        :return: The name of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rule.


        :param name: The name of this Rule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Rule.  # noqa: E501


        :return: The description of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rule.


        :param description: The description of this Rule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def max_output_size(self):
        """Gets the max_output_size of this Rule.  # noqa: E501


        :return: The max_output_size of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._max_output_size

    @max_output_size.setter
    def max_output_size(self, max_output_size):
        """Sets the max_output_size of this Rule.


        :param max_output_size: The max_output_size of this Rule.  # noqa: E501
        :type: int
        """

        self._max_output_size = max_output_size

    @property
    def max_output_size_type(self):
        """Gets the max_output_size_type of this Rule.  # noqa: E501


        :return: The max_output_size_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._max_output_size_type

    @max_output_size_type.setter
    def max_output_size_type(self, max_output_size_type):
        """Sets the max_output_size_type of this Rule.


        :param max_output_size_type: The max_output_size_type of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["KB", "MB"]  # noqa: E501
        if max_output_size_type not in allowed_values:
            raise ValueError(
                "Invalid value for `max_output_size_type` ({0}), must be one of {1}"  # noqa: E501
                .format(max_output_size_type, allowed_values)
            )

        self._max_output_size_type = max_output_size_type

    @property
    def trim_type(self):
        """Gets the trim_type of this Rule.  # noqa: E501


        :return: The trim_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._trim_type

    @trim_type.setter
    def trim_type(self, trim_type):
        """Sets the trim_type of this Rule.


        :param trim_type: The trim_type of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["OMT", "BGN", "END", "MID"]  # noqa: E501
        if trim_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trim_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trim_type, allowed_values)
            )

        self._trim_type = trim_type

    @property
    def retension(self):
        """Gets the retension of this Rule.  # noqa: E501


        :return: The retension of this Rule.  # noqa: E501
        :rtype: int
        """
        return self._retension

    @retension.setter
    def retension(self, retension):
        """Sets the retension of this Rule.


        :param retension: The retension of this Rule.  # noqa: E501
        :type: int
        """

        self._retension = retension

    @property
    def retension_type(self):
        """Gets the retension_type of this Rule.  # noqa: E501


        :return: The retension_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._retension_type

    @retension_type.setter
    def retension_type(self, retension_type):
        """Sets the retension_type of this Rule.


        :param retension_type: The retension_type of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["Y", "M", "D"]  # noqa: E501
        if retension_type not in allowed_values:
            raise ValueError(
                "Invalid value for `retension_type` ({0}), must be one of {1}"  # noqa: E501
                .format(retension_type, allowed_values)
            )

        self._retension_type = retension_type

    @property
    def active(self):
        """Gets the active of this Rule.  # noqa: E501


        :return: The active of this Rule.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Rule.


        :param active: The active of this Rule.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def archived_type(self):
        """Gets the archived_type of this Rule.  # noqa: E501


        :return: The archived_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._archived_type

    @archived_type.setter
    def archived_type(self, archived_type):
        """Sets the archived_type of this Rule.


        :param archived_type: The archived_type of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOG", "OUTPUT", "LOG_AND_OUTPUT", "NONE"]  # noqa: E501
        if archived_type not in allowed_values:
            raise ValueError(
                "Invalid value for `archived_type` ({0}), must be one of {1}"  # noqa: E501
                .format(archived_type, allowed_values)
            )

        self._archived_type = archived_type

    @property
    def state(self):
        """Gets the state of this Rule.  # noqa: E501


        :return: The state of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Rule.


        :param state: The state of this Rule.  # noqa: E501
        :type: str
        """
        allowed_values = ["ADD", "DELETE", "DELETE_INCLUDE_DATA", "UPDATE", "UPDATE_CHANGE_DELETION_DATES", "NONE"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def rule_criterias(self):
        """Gets the rule_criterias of this Rule.  # noqa: E501


        :return: The rule_criterias of this Rule.  # noqa: E501
        :rtype: list[RuleCriteria]
        """
        return self._rule_criterias

    @rule_criterias.setter
    def rule_criterias(self, rule_criterias):
        """Sets the rule_criterias of this Rule.


        :param rule_criterias: The rule_criterias of this Rule.  # noqa: E501
        :type: list[RuleCriteria]
        """

        self._rule_criterias = rule_criterias

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
