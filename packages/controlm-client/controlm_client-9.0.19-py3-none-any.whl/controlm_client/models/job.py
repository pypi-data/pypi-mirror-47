# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ctm': 'str',
        'job_name': 'str',
        'app_type': 'str',
        'order_id': 'str',
        'application': 'str',
        'folder': 'str',
        'start_time': 'str',
        'end_time': 'str',
        'duration': 'int',
        'status': 'str',
        'host': 'str',
        'run_as': 'str',
        'order_date': 'str',
        'number_of_runs': 'int',
        'sub_application': 'str',
        'archive_rule': 'str'
    }

    attribute_map = {
        'ctm': 'ctm',
        'job_name': 'jobName',
        'app_type': 'appType',
        'order_id': 'orderId',
        'application': 'application',
        'folder': 'folder',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'duration': 'duration',
        'status': 'status',
        'host': 'host',
        'run_as': 'runAs',
        'order_date': 'orderDate',
        'number_of_runs': 'numberOfRuns',
        'sub_application': 'subApplication',
        'archive_rule': 'archiveRule'
    }

    def __init__(self, ctm=None, job_name=None, app_type=None, order_id=None, application=None, folder=None, start_time=None, end_time=None, duration=None, status=None, host=None, run_as=None, order_date=None, number_of_runs=None, sub_application=None, archive_rule=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501

        self._ctm = None
        self._job_name = None
        self._app_type = None
        self._order_id = None
        self._application = None
        self._folder = None
        self._start_time = None
        self._end_time = None
        self._duration = None
        self._status = None
        self._host = None
        self._run_as = None
        self._order_date = None
        self._number_of_runs = None
        self._sub_application = None
        self._archive_rule = None
        self.discriminator = None

        if ctm is not None:
            self.ctm = ctm
        if job_name is not None:
            self.job_name = job_name
        if app_type is not None:
            self.app_type = app_type
        if order_id is not None:
            self.order_id = order_id
        if application is not None:
            self.application = application
        if folder is not None:
            self.folder = folder
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if duration is not None:
            self.duration = duration
        if status is not None:
            self.status = status
        if host is not None:
            self.host = host
        if run_as is not None:
            self.run_as = run_as
        if order_date is not None:
            self.order_date = order_date
        if number_of_runs is not None:
            self.number_of_runs = number_of_runs
        if sub_application is not None:
            self.sub_application = sub_application
        if archive_rule is not None:
            self.archive_rule = archive_rule

    @property
    def ctm(self):
        """Gets the ctm of this Job.  # noqa: E501


        :return: The ctm of this Job.  # noqa: E501
        :rtype: str
        """
        return self._ctm

    @ctm.setter
    def ctm(self, ctm):
        """Sets the ctm of this Job.


        :param ctm: The ctm of this Job.  # noqa: E501
        :type: str
        """

        self._ctm = ctm

    @property
    def job_name(self):
        """Gets the job_name of this Job.  # noqa: E501


        :return: The job_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._job_name

    @job_name.setter
    def job_name(self, job_name):
        """Sets the job_name of this Job.


        :param job_name: The job_name of this Job.  # noqa: E501
        :type: str
        """

        self._job_name = job_name

    @property
    def app_type(self):
        """Gets the app_type of this Job.  # noqa: E501


        :return: The app_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._app_type

    @app_type.setter
    def app_type(self, app_type):
        """Sets the app_type of this Job.


        :param app_type: The app_type of this Job.  # noqa: E501
        :type: str
        """

        self._app_type = app_type

    @property
    def order_id(self):
        """Gets the order_id of this Job.  # noqa: E501


        :return: The order_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Job.


        :param order_id: The order_id of this Job.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def application(self):
        """Gets the application of this Job.  # noqa: E501


        :return: The application of this Job.  # noqa: E501
        :rtype: str
        """
        return self._application

    @application.setter
    def application(self, application):
        """Sets the application of this Job.


        :param application: The application of this Job.  # noqa: E501
        :type: str
        """

        self._application = application

    @property
    def folder(self):
        """Gets the folder of this Job.  # noqa: E501


        :return: The folder of this Job.  # noqa: E501
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this Job.


        :param folder: The folder of this Job.  # noqa: E501
        :type: str
        """

        self._folder = folder

    @property
    def start_time(self):
        """Gets the start_time of this Job.  # noqa: E501


        :return: The start_time of this Job.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Job.


        :param start_time: The start_time of this Job.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this Job.  # noqa: E501


        :return: The end_time of this Job.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Job.


        :param end_time: The end_time of this Job.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def duration(self):
        """Gets the duration of this Job.  # noqa: E501


        :return: The duration of this Job.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Job.


        :param duration: The duration of this Job.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: str
        """
        allowed_values = ["EndedOk", "EndedNotOk"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def host(self):
        """Gets the host of this Job.  # noqa: E501


        :return: The host of this Job.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this Job.


        :param host: The host of this Job.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def run_as(self):
        """Gets the run_as of this Job.  # noqa: E501


        :return: The run_as of this Job.  # noqa: E501
        :rtype: str
        """
        return self._run_as

    @run_as.setter
    def run_as(self, run_as):
        """Sets the run_as of this Job.


        :param run_as: The run_as of this Job.  # noqa: E501
        :type: str
        """

        self._run_as = run_as

    @property
    def order_date(self):
        """Gets the order_date of this Job.  # noqa: E501


        :return: The order_date of this Job.  # noqa: E501
        :rtype: str
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Job.


        :param order_date: The order_date of this Job.  # noqa: E501
        :type: str
        """

        self._order_date = order_date

    @property
    def number_of_runs(self):
        """Gets the number_of_runs of this Job.  # noqa: E501


        :return: The number_of_runs of this Job.  # noqa: E501
        :rtype: int
        """
        return self._number_of_runs

    @number_of_runs.setter
    def number_of_runs(self, number_of_runs):
        """Sets the number_of_runs of this Job.


        :param number_of_runs: The number_of_runs of this Job.  # noqa: E501
        :type: int
        """

        self._number_of_runs = number_of_runs

    @property
    def sub_application(self):
        """Gets the sub_application of this Job.  # noqa: E501


        :return: The sub_application of this Job.  # noqa: E501
        :rtype: str
        """
        return self._sub_application

    @sub_application.setter
    def sub_application(self, sub_application):
        """Sets the sub_application of this Job.


        :param sub_application: The sub_application of this Job.  # noqa: E501
        :type: str
        """

        self._sub_application = sub_application

    @property
    def archive_rule(self):
        """Gets the archive_rule of this Job.  # noqa: E501


        :return: The archive_rule of this Job.  # noqa: E501
        :rtype: str
        """
        return self._archive_rule

    @archive_rule.setter
    def archive_rule(self, archive_rule):
        """Sets the archive_rule of this Job.


        :param archive_rule: The archive_rule of this Job.  # noqa: E501
        :type: str
        """

        self._archive_rule = archive_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
