# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientAccessPrivilegeCategory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'self_service_access': 'str',
        'workload_change_manager_access': 'str',
        'utilities_access': 'str',
        'application_integrator_access': 'str'
    }

    attribute_map = {
        'self_service_access': 'SelfServiceAccess',
        'workload_change_manager_access': 'WorkloadChangeManagerAccess',
        'utilities_access': 'UtilitiesAccess',
        'application_integrator_access': 'ApplicationIntegratorAccess'
    }

    def __init__(self, self_service_access=None, workload_change_manager_access=None, utilities_access=None, application_integrator_access=None):  # noqa: E501
        """ClientAccessPrivilegeCategory - a model defined in Swagger"""  # noqa: E501

        self._self_service_access = None
        self._workload_change_manager_access = None
        self._utilities_access = None
        self._application_integrator_access = None
        self.discriminator = None

        if self_service_access is not None:
            self.self_service_access = self_service_access
        if workload_change_manager_access is not None:
            self.workload_change_manager_access = workload_change_manager_access
        if utilities_access is not None:
            self.utilities_access = utilities_access
        if application_integrator_access is not None:
            self.application_integrator_access = application_integrator_access

    @property
    def self_service_access(self):
        """Gets the self_service_access of this ClientAccessPrivilegeCategory.  # noqa: E501

        Control-M Self Service access level (None, Full)  # noqa: E501

        :return: The self_service_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._self_service_access

    @self_service_access.setter
    def self_service_access(self, self_service_access):
        """Sets the self_service_access of this ClientAccessPrivilegeCategory.

        Control-M Self Service access level (None, Full)  # noqa: E501

        :param self_service_access: The self_service_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._self_service_access = self_service_access

    @property
    def workload_change_manager_access(self):
        """Gets the workload_change_manager_access of this ClientAccessPrivilegeCategory.  # noqa: E501

        Control-M Workload Change Manager access level (None, Full)  # noqa: E501

        :return: The workload_change_manager_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._workload_change_manager_access

    @workload_change_manager_access.setter
    def workload_change_manager_access(self, workload_change_manager_access):
        """Sets the workload_change_manager_access of this ClientAccessPrivilegeCategory.

        Control-M Workload Change Manager access level (None, Full)  # noqa: E501

        :param workload_change_manager_access: The workload_change_manager_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._workload_change_manager_access = workload_change_manager_access

    @property
    def utilities_access(self):
        """Gets the utilities_access of this ClientAccessPrivilegeCategory.  # noqa: E501

        Control-M, Utilitiesm EM API, BIM Web, UI access level (None, Full)  # noqa: E501

        :return: The utilities_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._utilities_access

    @utilities_access.setter
    def utilities_access(self, utilities_access):
        """Sets the utilities_access of this ClientAccessPrivilegeCategory.

        Control-M, Utilitiesm EM API, BIM Web, UI access level (None, Full)  # noqa: E501

        :param utilities_access: The utilities_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._utilities_access = utilities_access

    @property
    def application_integrator_access(self):
        """Gets the application_integrator_access of this ClientAccessPrivilegeCategory.  # noqa: E501

        Control-M Application Integrator access level (None, Full)  # noqa: E501

        :return: The application_integrator_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :rtype: str
        """
        return self._application_integrator_access

    @application_integrator_access.setter
    def application_integrator_access(self, application_integrator_access):
        """Sets the application_integrator_access of this ClientAccessPrivilegeCategory.

        Control-M Application Integrator access level (None, Full)  # noqa: E501

        :param application_integrator_access: The application_integrator_access of this ClientAccessPrivilegeCategory.  # noqa: E501
        :type: str
        """

        self._application_integrator_access = application_integrator_access

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientAccessPrivilegeCategory, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientAccessPrivilegeCategory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
