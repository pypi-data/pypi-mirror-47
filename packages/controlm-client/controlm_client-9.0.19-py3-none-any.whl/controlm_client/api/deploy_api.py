# coding: utf-8

"""
    Control-M Services

    Provides access to BMC Control-M Services  # noqa: E501

    OpenAPI spec version: 9.18.3
    Contact: support@bmc.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from controlm_client.api_client import ApiClient


class DeployApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_connection_profile(self, ctm, agent, type, name, **kwargs):  # noqa: E501
        """Delete a Connection Profile  # noqa: E501

        Delete a Connection Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_profile(ctm, agent, type, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The name of the Control-M in which the connection profile is deployed. (required)
        :param str agent: The name of the agent the connection profile is deployed on. (required)
        :param str type: The name of the agent the connection profile is deployed on. (required)
        :param str name: Name of the Connection Profile (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_connection_profile_with_http_info(ctm, agent, type, name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_connection_profile_with_http_info(ctm, agent, type, name, **kwargs)  # noqa: E501
            return data

    def delete_connection_profile_with_http_info(self, ctm, agent, type, name, **kwargs):  # noqa: E501
        """Delete a Connection Profile  # noqa: E501

        Delete a Connection Profile  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_connection_profile_with_http_info(ctm, agent, type, name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The name of the Control-M in which the connection profile is deployed. (required)
        :param str agent: The name of the agent the connection profile is deployed on. (required)
        :param str type: The name of the agent the connection profile is deployed on. (required)
        :param str name: Name of the Connection Profile (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'type', 'name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_connection_profile" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `delete_connection_profile`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `delete_connection_profile`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `delete_connection_profile`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `delete_connection_profile`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ctm' in params:
            path_params['ctm'] = params['ctm']  # noqa: E501
        if 'agent' in params:
            path_params['agent'] = params['agent']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501
        if 'name' in params:
            path_params['name'] = params['name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy/connectionprofile/{ctm}/{agent}/{type}/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_folder(self, control_m, folder_name, **kwargs):  # noqa: E501
        """delete a folder  # noqa: E501

        Delete a folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder(control_m, folder_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_m: The name of the Control-M in which the folder(s) are deployed. Wildcards can be used. (required)
        :param str folder_name: The name of the required folder(s). Wildcards can be used. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_folder_with_http_info(control_m, folder_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_folder_with_http_info(control_m, folder_name, **kwargs)  # noqa: E501
            return data

    def delete_folder_with_http_info(self, control_m, folder_name, **kwargs):  # noqa: E501
        """delete a folder  # noqa: E501

        Delete a folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_folder_with_http_info(control_m, folder_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str control_m: The name of the Control-M in which the folder(s) are deployed. Wildcards can be used. (required)
        :param str folder_name: The name of the required folder(s). Wildcards can be used. (required)
        :return: SuccessData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['control_m', 'folder_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_folder" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'control_m' is set
        if ('control_m' not in params or
                params['control_m'] is None):
            raise ValueError("Missing the required parameter `control_m` when calling `delete_folder`")  # noqa: E501
        # verify the required parameter 'folder_name' is set
        if ('folder_name' not in params or
                params['folder_name'] is None):
            raise ValueError("Missing the required parameter `folder_name` when calling `delete_folder`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'control_m' in params:
            path_params['controlM'] = params['control_m']  # noqa: E501
        if 'folder_name' in params:
            path_params['folderName'] = params['folder_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy/folder/{controlM}/{folderName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SuccessData',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deploy_file(self, definitions_file, **kwargs):  # noqa: E501
        """Deploy definitions file  # noqa: E501

        Deploy the provided definition file (JSON, XML or zip) to Control-M  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_file(definitions_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file definitions_file: A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files. (required)
        :param file deploy_descriptor_file: Deploy Descriptor JSON file.
        :return: list[DeploymentFileResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deploy_file_with_http_info(definitions_file, **kwargs)  # noqa: E501
        else:
            (data) = self.deploy_file_with_http_info(definitions_file, **kwargs)  # noqa: E501
            return data

    def deploy_file_with_http_info(self, definitions_file, **kwargs):  # noqa: E501
        """Deploy definitions file  # noqa: E501

        Deploy the provided definition file (JSON, XML or zip) to Control-M  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deploy_file_with_http_info(definitions_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file definitions_file: A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files. (required)
        :param file deploy_descriptor_file: Deploy Descriptor JSON file.
        :return: list[DeploymentFileResults]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['definitions_file', 'deploy_descriptor_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'definitions_file' is set
        if ('definitions_file' not in params or
                params['definitions_file'] is None):
            raise ValueError("Missing the required parameter `definitions_file` when calling `deploy_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'definitions_file' in params:
            local_var_files['definitionsFile'] = params['definitions_file']  # noqa: E501
        if 'deploy_descriptor_file' in params:
            local_var_files['deployDescriptorFile'] = params['deploy_descriptor_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[DeploymentFileResults]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployed_connection_profiles(self, ctm, agent, type, **kwargs):  # noqa: E501
        """Get deployed folder  # noqa: E501

        Export currently deployed folders to XML.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployed_connection_profiles(ctm, agent, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The name of the Control-M in which the connection profile is deployed on. (required)
        :param str agent: The name of the agent the connection profile is deployed on. (required)
        :param str type: The type of connection profile such as Hadoop, Database, FileTransfer. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployed_connection_profiles_with_http_info(ctm, agent, type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployed_connection_profiles_with_http_info(ctm, agent, type, **kwargs)  # noqa: E501
            return data

    def get_deployed_connection_profiles_with_http_info(self, ctm, agent, type, **kwargs):  # noqa: E501
        """Get deployed folder  # noqa: E501

        Export currently deployed folders to XML.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployed_connection_profiles_with_http_info(ctm, agent, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ctm: The name of the Control-M in which the connection profile is deployed on. (required)
        :param str agent: The name of the agent the connection profile is deployed on. (required)
        :param str type: The type of connection profile such as Hadoop, Database, FileTransfer. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ctm', 'agent', 'type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployed_connection_profiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ctm' is set
        if ('ctm' not in params or
                params['ctm'] is None):
            raise ValueError("Missing the required parameter `ctm` when calling `get_deployed_connection_profiles`")  # noqa: E501
        # verify the required parameter 'agent' is set
        if ('agent' not in params or
                params['agent'] is None):
            raise ValueError("Missing the required parameter `agent` when calling `get_deployed_connection_profiles`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `get_deployed_connection_profiles`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501
        if 'agent' in params:
            query_params.append(('agent', params['agent']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy/connectionprofiles', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployed_folders_new(self, **kwargs):  # noqa: E501
        """Get deployed jobs that match the search criteria.  # noqa: E501

        Get definition of jobs and folders (in the desired format - JSON or XML) that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployed_folders_new(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Output format (json or xml)
        :param str folder:
        :param str ctm:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployed_folders_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_deployed_folders_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_deployed_folders_new_with_http_info(self, **kwargs):  # noqa: E501
        """Get deployed jobs that match the search criteria.  # noqa: E501

        Get definition of jobs and folders (in the desired format - JSON or XML) that match the requested search criteria.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployed_folders_new_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str format: Output format (json or xml)
        :param str folder:
        :param str ctm:
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['format', 'folder', 'ctm']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployed_folders_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501
        if 'folder' in params:
            query_params.append(('folder', params['folder']))  # noqa: E501
        if 'ctm' in params:
            query_params.append(('ctm', params['ctm']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy/jobs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def transform_file(self, definitions_file, deploy_descriptor_file, **kwargs):  # noqa: E501
        """Transform a definitions file  # noqa: E501

        Transform the provided definitions file (JSON) according to the provided Deploy Descriptor file (JSON).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transform_file(definitions_file, deploy_descriptor_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file definitions_file: A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files. (required)
        :param file deploy_descriptor_file: Deploy Descriptor JSON file. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.transform_file_with_http_info(definitions_file, deploy_descriptor_file, **kwargs)  # noqa: E501
        else:
            (data) = self.transform_file_with_http_info(definitions_file, deploy_descriptor_file, **kwargs)  # noqa: E501
            return data

    def transform_file_with_http_info(self, definitions_file, deploy_descriptor_file, **kwargs):  # noqa: E501
        """Transform a definitions file  # noqa: E501

        Transform the provided definitions file (JSON) according to the provided Deploy Descriptor file (JSON).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.transform_file_with_http_info(definitions_file, deploy_descriptor_file, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param file definitions_file: A file that contains definitions to be deployed to the server. Can be either a JSON definition file, an XML definition file, or a zip file that contains multiple JSON or XML definition files. (required)
        :param file deploy_descriptor_file: Deploy Descriptor JSON file. (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['definitions_file', 'deploy_descriptor_file']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method transform_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'definitions_file' is set
        if ('definitions_file' not in params or
                params['definitions_file'] is None):
            raise ValueError("Missing the required parameter `definitions_file` when calling `transform_file`")  # noqa: E501
        # verify the required parameter 'deploy_descriptor_file' is set
        if ('deploy_descriptor_file' not in params or
                params['deploy_descriptor_file'] is None):
            raise ValueError("Missing the required parameter `deploy_descriptor_file` when calling `transform_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'definitions_file' in params:
            local_var_files['definitionsFile'] = params['definitions_file']  # noqa: E501
        if 'deploy_descriptor_file' in params:
            local_var_files['deployDescriptorFile'] = params['deploy_descriptor_file']  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Bearer']  # noqa: E501

        return self.api_client.call_api(
            '/deploy/transform', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
