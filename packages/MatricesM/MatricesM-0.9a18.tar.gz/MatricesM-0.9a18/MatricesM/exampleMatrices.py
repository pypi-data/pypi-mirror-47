# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from MatricesM.matrix import Matrix
from MatricesM.constructors.matrices import Identity
try:
    plotting=bool(int(input("Enable plotting ?(0/1) (Requires matplotlib)")))
except:
    plotting=0
# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,fill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=Matrix([4,3],dtype="float")
e=Matrix(8,fill="gauss",ranged=[0,3])
f=Matrix(dim=6,ranged=[-1250,1250],dtype="float")
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=Matrix(4,dtype="float")
q1=Matrix(9,decimal=2,dtype="float")
q2=Matrix(6,decimal=6,dtype="float")
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=Matrix(5,dtype="complex")
c2=Matrix([7,3],ranged=[-10,10],dtype="complex")
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid,dtype="integer")
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"],dtype="dataframe",coldtypes=[int]*3)
# =============================================================================
# Identity Matrices
# =============================================================================
id1=Matrix(listed=Identity())
id2=Matrix(listed=Identity(5))
id3=id2[:3,:3]
id4=Matrix(listed=Identity(6))

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f[:4,1:3]:\n",f[:4,1:3],"\n")
print(f)
print("f.delDim(2)")
f.delDim(2)
print(f)
print("[L,U]=f.LU")
[L,U]=f.LU
print("L.p")
L.p
print("U.p")
U.p
print("f-(L@U)")
print(f-(L@U))
print("[Q,R]=f.QR")
[Q,R]=f.QR
print("Q.p")
Q.p
print("R.p")
R.p
print("f-(Q@R)")
print(f-(Q@R))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj[11:18,4:11]
print("h=proj[11:18,4:11]:\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4,returndet=False):\n",h.minor(3,4,returndet=False),"\n")
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
      
j=g[:2,:4]
print("j=g.[:2,:4]:\n",j,"\n")
print("j.obj:\n",j.obj)

print('\n################')
      
print("proj=proj[:5,:15]:\n")
proj=proj[:5,:15]
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(2,1)\np.p")
p.remove(2,1)
p.p
print("p.add(col=2,lis=[55]*4):")
p.add(col=2,lis=[55]*4)
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
print(proj.find(40))
print("\nproj.find(40,0)")
print(proj.find(40,0))
print("\nproj.find(111)")
proj.find(111)

print("################\n")

print("r=p.t")
r=p.t
print("r.remove(2):")
r.remove(2)
print(r)
print("r.rank:",r.rank)
print("\nr.matrix[0]=r.matrix[1][:]")
r.matrix[0]=r.matrix[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Matrix(listed=Identity(e.dim[0]))*99")
e+=Matrix(listed=Identity(e.dim[0]))*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=Matrix(e.dim):")
e+=Matrix(e.dim,dtype="float")
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nbool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):")
print(bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.var()")
print(validStr4.var())
print("")

print('################')
print("Linear model for validStr4:")
print("""
validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("Model range:",var.ranged()["Weight"])
print("Average error:",err.mean()["Difference"])

""")

validStr4.corr().p

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("\nModel range:",var.ranged()["Weight"])
print("\nAverage error:",err.mean()["Difference"])

if plotting:
    try:
        from matplotlib import pyplot as plt
    except ImportError:
        print("Couldn't import matplotlib")
    else:
        model = plt.figure()
        
        #Data in a scatter plot
        plt.scatter(var.col(2,0),out.col(1,0))
        
        #Linear model to predict
        plt.plot(var.col(2,0),preds.col(1,0),c="red")
        
        #Titles
        plt.xlabel(validStr4.features[1])
        plt.ylabel(validStr4.features[0])
        plt.legend(["Linear model","Data points"],loc=4)
        model.suptitle("Height prediction")
        plt.show()

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 


Square matrix
Dimension: 1x1

0.4522 


Dimension: 2x4

30.7719  45.9955  -8.2014  23.1491 
48.7479 -27.9535 -19.3155 -11.2331 


Dimension: 4x3

0.1453 0.8092 0.0955 
0.1698 0.3456 0.5259 
0.6507 0.4139 0.8089 
0.7779 0.2829 0.4082 


Square matrix
Dimension: 8x8

-2.6068 -1.2985 -2.0650 -2.3758 -0.5580  1.6616  2.8983 -2.0451 
 1.3237  0.1399  0.1009  0.8958 -1.3622 -3.0673  3.2715 -4.6969 
 7.1294 -3.5432 -3.9119 -1.8825 -1.4804 -0.6559  2.4710 -1.5360 
-4.0277 -0.2446 -2.1506 -5.1320  1.8430 -1.7349  2.2224 -1.3282 
-0.2854 -2.0149  0.7828 -4.3573 -1.1861  3.4027  2.1352  4.0140 
-4.8376 -1.5943 -2.8278  5.6857 -5.6352 -2.4616  2.9659  7.2542 
-2.6198  2.2492  2.4922 -2.4768  2.2011  4.0343 -1.7380  0.8991 
 5.0497  4.9387  2.2054  3.5041  1.4787 -0.8500 -2.7019  3.5722 


Square matrix
Dimension: 6x6

 -871.5642  161.2431  1132.3828 -330.3293  -90.1835 1000.5345 
  705.9153  460.0024 -1139.1852  884.4876 -690.3641  104.3015 
 -553.8465  132.4287   739.3440 -643.2385 -375.7461  210.1659 
  150.5241  165.9917     4.7293  -80.1714 -667.9825  366.6029 
 -932.8678 -257.0940  -340.7581  333.7048  224.6898  301.2661 
-1222.6734 -485.0774   -67.8579  494.2874  939.0019  -93.9025 


Dimension: 3x6

4.9441 8.0281 6.7577 2.0375 3.7930 8.7468 
2.6488 7.2165 5.4464 4.5083 2.0117 9.7963 
9.1388 8.2940 4.4058 9.0262 3.6013 3.3951 


Square matrix
Dimension: 5x5

 4.6069 39.1653  7.9129 31.0484 66.4385 
14.6383  6.5428 31.1701 26.0226 49.0918 
85.4319 35.3008 39.5057 72.1015 29.6048 
69.1011 32.8729  5.7662 11.9221 80.6498 
24.4528 23.6098 27.6569 85.3967 91.7702 


Square matrix
Dimension: 4x4

0.7904 0.7890 0.8593 0.4241 
0.9801 0.3277 0.4373 0.5546 
0.6535 0.1387 0.4343 0.5023 
0.3082 0.7377 0.7778 0.5598 


Square matrix
Dimension: 9x9

0.81 0.10 0.19 0.28 0.67 0.75 0.48 0.55 0.46 
0.29 0.92 0.75 0.45 0.16 0.89 0.83 0.81 0.31 
0.59 0.75 0.69 0.69 0.50 0.47 0.43 0.18 0.83 
0.35 0.42 0.64 0.42 0.09 0.44 0.45 0.27 0.69 
0.01 0.27 0.46 0.38 0.46 0.27 0.46 0.32 0.31 
0.70 0.59 0.68 0.76 0.00 0.85 0.12 0.75 0.30 
0.52 0.25 0.46 0.52 0.00 0.90 0.68 0.87 0.37 
0.14 0.92 0.14 0.80 0.54 0.77 0.31 0.58 0.72 
0.23 0.13 0.86 0.83 0.62 0.99 0.78 0.78 0.81 


Square matrix
Dimension: 6x6

0.575854 0.696890 0.479202 0.123173 0.436811 0.604572 
0.739677 0.026093 0.770928 0.186407 0.102939 0.025941 
0.254250 0.031922 0.447371 0.046846 0.937162 0.021851 
0.535661 0.086367 0.469955 0.775903 0.296213 0.496414 
0.885403 0.430769 0.114353 0.234748 0.468795 0.154363 
0.914518 0.743645 0.747520 0.302805 0.314463 0.611438 


Square matrix
Dimension: 3x3

3.0000 5.0000 7.0000 
8.0000 3.0000 4.0000 
5.0000 2.0000 5.0000 


Square matrix
Dimension: 5x5

 0.2056+0.9425j   0.3435+0.0807j   0.2331+0.6333j   0.6384+0.2319j   0.3938+0.5345j  
 0.7289+0.9761j   0.4659+0.6302j   0.3686+0.0891j   0.5608+0.3749j   0.6622+0.3833j  
  0.931+0.3584j   0.4326+0.3671j   0.0519+0.5728j   0.1128+0.4382j   0.1462+0.0372j  
 0.0312+0.2123j   0.9541+0.9418j   0.7165+0.9783j   0.7441+0.4631j   0.5415+0.8938j  
 0.5652+0.3455j   0.3041+0.7003j   0.1229+0.3428j   0.0822+0.4273j   0.9059+0.3043j  


Dimension: 7x3

 -9.1156-7.3666j    -5.8359+6.133j    -0.1676+7.332j  
  4.3259+9.4455j   -7.5523-3.2281j   -4.9188+7.5519j  
  -9.3259+0.793j    3.0652-2.4058j    9.3732+6.9431j  
   9.2604+2.619j   -3.0946+1.7438j    7.5073-1.6643j  
 -9.8873+1.2605j    4.0968+4.5166j    3.8113+7.2896j  
  8.0838+0.0277j    -0.5926+6.965j    -4.578-7.4318j  
  -0.154+4.7556j    3.2119+5.8032j     8.235+8.0237j  

################################
################################
Identity matrices

Square matrix
Dimension: 1x1

1.0000 


Square matrix
Dimension: 5x5

1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 


Square matrix
Dimension: 3x3

1.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 
0.0000 0.0000 1.0000 


Square matrix
Dimension: 6x6

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 

################################
################################
Attribute call outputs

################

d:

Dimension: 4x3

0.1453 0.8092 0.0955 
0.1698 0.3456 0.5259 
0.6507 0.4139 0.8089 
0.7779 0.2829 0.4082 

d.matrix:

[[0.14529862361522264, 0.8091677602465895, 0.09549241615039522], [0.16980498672444838, 0.3455916013061922, 0.5258949552903837], [0.6506546220282602, 0.4138920255134739, 0.8089236121707816], [0.7779473250526444, 0.28293710135197, 0.40818506424146245]]

################

f[:4,1:3]:
 
Dimension: 4x2

161.2431  1132.3828 
460.0024 -1139.1852 
132.4287   739.3440 
165.9917     4.7293 
 


Square matrix
Dimension: 6x6

 -871.5642  161.2431  1132.3828 -330.3293  -90.1835 1000.5345 
  705.9153  460.0024 -1139.1852  884.4876 -690.3641  104.3015 
 -553.8465  132.4287   739.3440 -643.2385 -375.7461  210.1659 
  150.5241  165.9917     4.7293  -80.1714 -667.9825  366.6029 
 -932.8678 -257.0940  -340.7581  333.7048  224.6898  301.2661 
-1222.6734 -485.0774   -67.8579  494.2874  939.0019  -93.9025 

f.delDim(2)

Square matrix
Dimension: 4x4

-871.5642 161.2431  1132.3828 -330.3293 
 705.9153 460.0024 -1139.1852  884.4876 
-553.8465 132.4287   739.3440 -643.2385 
 150.5241 165.9917     4.7293  -80.1714 

[L,U]=f.LU
L.p

Square matrix
Dimension: 4x4

 1.0000 0.0000 0.0000 0.0000 
-0.8099 1.0000 0.0000 0.0000 
 0.6355 0.0507 1.0000 0.0000 
-0.1727 0.3282 8.8057 1.0000 

U.p

Square matrix
Dimension: 4x4

-871.5642 161.2431 1132.3828 -330.3293 
   0.0000 590.5998 -222.0223  616.9405 
   0.0000   0.0000   31.0215 -464.6278 
   0.0000   0.0000    0.0000 3751.6870 

f-(L@U)

Square matrix
Dimension: 4x4

 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 

[Q,R]=f.QR
Q.p

Square matrix
Dimension: 4x4

-0.6918 0.4529 -0.1086  0.5518 
 0.5603 0.7675 -0.3113  0.0112 
-0.4396 0.3454  0.0306 -0.8286 
 0.1195 0.2941  0.9436  0.0941 

R.p

Square matrix
Dimension: 4x4

1259.8984 107.8100 -1746.0802  997.2742 
   0.0000 520.6430  -104.6759  283.4879 
   0.0000   0.0000   258.7127 -334.7842 
   0.0000   0.0000     0.0000  353.0118 

f-(Q@R)

Square matrix
Dimension: 4x4

 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 
 0.0000  0.0000  0.0000  0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [2.6487789227535137, 9.138832968494112], 'Col 2': [7.216528057480123, 8.294015489639342], 'Col 3': [4.405756241167211, 6.757658609637453], 'Col 4': [2.037511129377574, 9.026242963530567], 'Col 5': [2.0116743421435093, 3.7930318218120744], 'Col 6': [3.395104792600659, 9.796281906255178]}
g: 
Dimension: 3x6

4.9441 8.0281 6.7577 2.0375 3.7930 8.7468 
2.6488 7.2165 5.4464 4.5083 2.0117 9.7963 
9.1388 8.2940 4.4058 9.0262 3.6013 3.3951 

g.remove(3):

Dimension: 2x6

4.9441 8.0281 6.7577 2.0375 3.7930 8.7468 
2.6488 7.2165 5.4464 4.5083 2.0117 9.7963 

################
q1.decimal 2

Square matrix
Dimension: 9x9

0.81 0.10 0.19 0.28 0.67 0.75 0.48 0.55 0.46 
0.29 0.92 0.75 0.45 0.16 0.89 0.83 0.81 0.31 
0.59 0.75 0.69 0.69 0.50 0.47 0.43 0.18 0.83 
0.35 0.42 0.64 0.42 0.09 0.44 0.45 0.27 0.69 
0.01 0.27 0.46 0.38 0.46 0.27 0.46 0.32 0.31 
0.70 0.59 0.68 0.76 0.00 0.85 0.12 0.75 0.30 
0.52 0.25 0.46 0.52 0.00 0.90 0.68 0.87 0.37 
0.14 0.92 0.14 0.80 0.54 0.77 0.31 0.58 0.72 
0.23 0.13 0.86 0.83 0.62 0.99 0.78 0.78 0.81 

q1.decimal=5

Square matrix
Dimension: 9x9

0.80557 0.09595 0.18690 0.27717 0.66848 0.75384 0.48338 0.54817 0.46205 
0.28980 0.91617 0.75457 0.44786 0.16007 0.89459 0.83486 0.81085 0.30821 
0.59227 0.75484 0.69332 0.68877 0.50163 0.46953 0.43370 0.17551 0.83374 
0.34822 0.41682 0.63591 0.42027 0.09348 0.44176 0.45268 0.27381 0.68569 
0.01331 0.27384 0.46248 0.38389 0.46391 0.27271 0.45515 0.31516 0.31141 
0.69869 0.59383 0.68245 0.76000 0.00055 0.84915 0.12320 0.74926 0.30308 
0.51524 0.24955 0.45909 0.51845 0.00055 0.90127 0.67525 0.87384 0.37025 
0.14301 0.92291 0.13596 0.79714 0.53700 0.77383 0.31455 0.57683 0.72207 
0.23383 0.12519 0.86392 0.83090 0.61635 0.99341 0.78460 0.77624 0.80856 

################
h=proj[11:18,4:11]:
 
Square matrix
Dimension: 7x7

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494716522.8682

h.rank: 7

h.rrechelon: 
Square matrix
Dimension: 7x7

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Square matrix
Dimension: 7x7

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4,returndet=False):
 
Square matrix
Dimension: 6x6

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

h.minor(3,4):
 -46677834292.743515 

################
j=g.[:2,:4]:
 
Dimension: 2x4

4.9441 8.0281 6.7577 2.0375 
2.6488 7.2165 5.4464 4.5083 
 

j.obj:
 Matrix(dim=[2, 4],listed=[[4.9440801602266715, 8.028104476938637, 6.757658609637453, 2.037511129377574], [2.6487789227535137, 7.216528057480123, 5.446424597390726, 4.508309297694414]],ranged=[0, 1],fill='uniform',features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=False,directory='',decimal=4,seed=None,dtype='float',coldtypes=[float, float, float, float])

################
proj=proj[:5,:15]:


Dimension: 5x15

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5

 4.6069 39.1653  7.9129 31.0484 66.4385 
14.6383  6.5428 31.1701 26.0226 49.0918 
85.4319 35.3008 39.5057 72.1015 29.6048 
69.1011 32.8729  5.7662 11.9221 80.6498 
24.4528 23.6098 27.6569 85.3967 91.7702 

p.det:
 -446427179.25826424

p.adj:
 
Square matrix
Dimension: 5x5

  5650043.0949   2283228.5576 -1898274.7084 -4805370.4126  -476385.7552 
-15606712.8140   1703159.1201 -4894876.0002  3623614.7319  8782191.4054 
 -3564469.7907 -18029221.4989 -3317013.9254  5011639.5489  8890859.1916 
  2310801.7849   7344080.8795 -1397669.5330  2671734.4163 -7498699.5666 
  1433570.7348  -2447096.9095  4065371.3642 -3648369.4846 -2698623.8807 

p.inv:


Square matrix
Dimension: 5x5

-0.0127 -0.0051  0.0043  0.0108  0.0011 
 0.0350 -0.0038  0.0110 -0.0081 -0.0197 
 0.0080  0.0404  0.0074 -0.0112 -0.0199 
-0.0052 -0.0165  0.0031 -0.0060  0.0168 
-0.0032  0.0055 -0.0091  0.0082  0.0060 

################
p:

Square matrix
Dimension: 5x5

 4.6069 39.1653  7.9129 31.0484 66.4385 
14.6383  6.5428 31.1701 26.0226 49.0918 
85.4319 35.3008 39.5057 72.1015 29.6048 
69.1011 32.8729  5.7662 11.9221 80.6498 
24.4528 23.6098 27.6569 85.3967 91.7702 

p.remove(2,1)
p.p

Square matrix
Dimension: 4x4

39.1653  7.9129 31.0484 66.4385 
35.3008 39.5057 72.1015 29.6048 
32.8729  5.7662 11.9221 80.6498 
23.6098 27.6569 85.3967 91.7702 

p.add(col=2,lis=[55]*4):

Dimension: 4x5

39.1653 55.0000  7.9129 31.0484 66.4385 
35.3008 55.0000 39.5057 72.1015 29.6048 
32.8729 55.0000  5.7662 11.9221 80.6498 
23.6098 55.0000 27.6569 85.3967 91.7702 

p.sdev()
{'Col 2': 5.727579878542344, 'Col': 0.0, 'Col 3': 14.03229861625837, 'Col 4': 29.79277748489146, 'Col 5': 23.444324564685182}
################

proj.find(40)
[(1, 8), (2, 4), (2, 12), (3, 11), (5, 14), (5, 15)]

proj.find(40,0)
[(0, 7), (1, 3), (1, 11), (2, 10), (4, 13), (4, 14)]

proj.find(111)
################

r=p.t
r.remove(2):

Square matrix
Dimension: 4x4

39.1653 35.3008 32.8729 23.6098 
 7.9129 39.5057  5.7662 27.6569 
31.0484 72.1015 11.9221 85.3967 
66.4385 29.6048 80.6498 91.7702 

r.rank: 4

r.matrix[0]=r.matrix[1][:]

Square matrix
Dimension: 4x4

 7.9129 39.5057  5.7662 27.6569 
 7.9129 39.5057  5.7662 27.6569 
31.0484 72.1015 11.9221 85.3967 
66.4385 29.6048 80.6498 91.7702 

r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Dimension: 2x3

 24.9539 43.9505  29.9421 
-18.9701 18.6120 -30.2555 


((((mMulti)+125)**3)%2):

Dimension: 2x3

1.0791 1.4584 1.5684 
1.0340 0.4793 1.1211 

################

f:
 
Square matrix
Dimension: 4x4

-871.5642 161.2431  1132.3828 -330.3293 
 705.9153 460.0024 -1139.1852  884.4876 
-553.8465 132.4287   739.3440 -643.2385 
 150.5241 165.9917     4.7293  -80.1714 

f1=f.intForm

Square matrix
Dimension: 4x4

-871 161  1132 -330 
 705 460 -1139  884 
-553 132   739 -643 
 150 165     4  -80 

f2=f.roundForm(3)

Square matrix
Dimension: 4x4

-871.5600 161.2400  1132.3800 -330.3300 
 705.9200 460.0000 -1139.1900  884.4900 
-553.8500 132.4300   739.3400 -643.2400 
 150.5200 165.9900     4.7300  -80.1700 

f2-f1

Square matrix
Dimension: 4x4

-0.5600 0.2400  0.3800 -0.3300 
 0.9200 0.0000 -0.1900  0.4900 
-0.8500 0.4300  0.3400 -0.2400 
 0.5200 0.9900  0.7300 -0.1700 

################
e+=Matrix(listed=Identity(e.dim[0]))*99

Square matrix
Dimension: 8x8

96.3932 -1.2985 -2.0650 -2.3758 -0.5580  1.6616  2.8983  -2.0451 
 1.3237 99.1399  0.1009  0.8958 -1.3622 -3.0673  3.2715  -4.6969 
 7.1294 -3.5432 95.0881 -1.8825 -1.4804 -0.6559  2.4710  -1.5360 
-4.0277 -0.2446 -2.1506 93.8680  1.8430 -1.7349  2.2224  -1.3282 
-0.2854 -2.0149  0.7828 -4.3573 97.8139  3.4027  2.1352   4.0140 
-4.8376 -1.5943 -2.8278  5.6857 -5.6352 96.5384  2.9659   7.2542 
-2.6198  2.2492  2.4922 -2.4768  2.2011  4.0343 97.2620   0.8991 
 5.0497  4.9387  2.2054  3.5041  1.4787 -0.8500 -2.7019 102.5722 


e-=33:

Square matrix
Dimension: 8x8

 63.3932 -34.2985 -35.0650 -35.3758 -33.5580 -31.3384 -30.1017 -35.0451 
-31.6763  66.1399 -32.8991 -32.1042 -34.3622 -36.0673 -29.7285 -37.6969 
-25.8706 -36.5432  62.0881 -34.8825 -34.4804 -33.6559 -30.5290 -34.5360 
-37.0277 -33.2446 -35.1506  60.8680 -31.1570 -34.7349 -30.7776 -34.3282 
-33.2854 -35.0149 -32.2172 -37.3573  64.8139 -29.5973 -30.8648 -28.9860 
-37.8376 -34.5943 -35.8278 -27.3143 -38.6352  63.5384 -30.0341 -25.7458 
-35.6198 -30.7508 -30.5078 -35.4768 -30.7989 -28.9657  64.2620 -32.1009 
-27.9503 -28.0613 -30.7946 -29.4959 -31.5213 -33.8500 -35.7019  69.5722 


e+=Matrix(e.dim):

Square matrix
Dimension: 8x8

 64.2701 -34.0335 -34.8300 -34.5261 -33.4080 -31.1774 -29.2448 -34.3550 
-31.0686  66.7055 -32.7276 -31.5284 -34.1497 -35.3585 -29.0914 -37.5045 
-25.6394 -36.2212  63.0510 -34.6853 -33.6451 -32.6938 -29.7627 -34.1610 
-36.7698 -32.5808 -34.9116  61.6332 -31.1172 -34.4061 -30.1742 -33.9131 
-32.8918 -34.2567 -31.5742 -36.4408  65.0316 -28.8648 -30.7799 -28.6040 
-37.0435 -34.5466 -35.7107 -27.2974 -37.9388  64.4514 -29.2113 -24.8023 
-34.6756 -30.1369 -29.6965 -35.0448 -29.8679 -28.1132  65.0893 -31.9027 
-27.7894 -27.3962 -30.1746 -28.5756 -31.2007 -33.5232 -34.8479  70.2050 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Square matrix
Dimension: 8x8

128.5403 -34.0335 -34.8300 -17.2630 -6.6816 -0.0094 -29.2448 -103.0651 
-62.1372  66.7055 -32.7276 -15.7642 -6.8299 -0.0106 -29.0914 -112.5136 
-51.2787 -36.2212  63.0510 -17.3427 -6.7290 -0.0098 -29.7627 -102.4831 
-73.5395 -32.5808 -34.9116  30.8166 -6.2234 -0.0103 -30.1742 -101.7392 
-65.7837 -34.2567 -31.5742 -18.2204 13.0063 -0.0087 -30.7799  -85.8120 
-74.0871 -34.5466 -35.7107 -13.6487 -7.5878  0.0193 -29.2113  -74.4070 
-69.3513 -30.1369 -29.6965 -17.5224 -5.9736 -0.0084  65.0893  -95.7080 
-55.5788 -27.3962 -30.1746 -14.2878 -6.2401 -0.0101 -34.8479  210.6150 

e%=[2,2,2,2,1,1,1,1]

Square matrix
Dimension: 8x8

3.5403 0.9665 0.1700 2.7370 2.3184 2.9906 0.7552 0.9349 
2.8628 1.7055 2.2724 4.2358 2.1701 2.9894 0.9086 0.4864 
3.7213 3.7788 3.0510 2.6573 2.2710 2.9902 0.2373 0.5169 
1.4605 2.4192 0.0884 0.8166 2.7766 2.9897 0.8258 0.2608 
4.2163 0.7433 3.4258 1.7796 1.0063 2.9913 0.2201 0.1880 
0.9129 0.4534 4.2893 1.3513 1.4122 0.0193 0.7887 0.5930 
0.6487 4.8631 0.3035 2.4776 0.0264 2.9916 0.0893 0.2920 
4.4212 2.6038 4.8254 0.7122 2.7599 2.9899 0.1521 0.6150 

################

c%j

Dimension: 2x4

1.1074 5.8550 5.3139 0.7365 
1.0699 0.9127 2.4702 2.2919 


bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3

34.0000 -52.0000 33.0000 
 9.0000  88.0000 -3.0000 

################
validStr2:

Dimension: 1x10

312.0000 45.0000 12.0000 44.0000 352.0000 45.0000 12.0000 44.0000 3.0000 -5.0000 

################
validStr3:

Dimension: 1x4

34.0000 5.0000 44.0000 659.0000 

################
validStr4:

Dimension: 22x3

  Height    Weight      Age  
     130        30       10  
     125        36       11  
     135        34       10  
     133        30        9  
     129        38       12  
     180        90       30  
     190        80       25  
     175        90       35  
     177        60       22  
     185       105       33  
     165        55       27  
     155        50       44  
     160        58       39  
     162        59       41  
     167        62       55  
     174        70       47  
     193        90       23  
     187        80       27  
     183        88       28  
     159        40       29  
     164        66       32  
     166        56       42  

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 20.592464320155067, 'Weight': 21.774245534462064, 'Age': 12.68996154316246}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.freq()
{'Height': {130: 1, 125: 1, 135: 1, 133: 1, 129: 1, 180: 1, 190: 1, 175: 1, 177: 1, 185: 1, 165: 1, 155: 1, 160: 1, 162: 1, 167: 1, 174: 1, 193: 1, 187: 1, 183: 1, 159: 1, 164: 1, 166: 1}, 'Weight': {30: 2, 36: 1, 34: 1, 38: 1, 90: 3, 80: 2, 60: 1, 105: 1, 55: 1, 50: 1, 58: 1, 59: 1, 62: 1, 70: 1, 88: 1, 40: 1, 66: 1, 56: 1}, 'Age': {10: 2, 11: 1, 9: 1, 12: 1, 30: 1, 25: 1, 35: 1, 22: 1, 33: 1, 27: 2, 44: 1, 39: 1, 41: 1, 55: 1, 47: 1, 23: 1, 28: 1, 29: 1, 32: 1, 42: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {90: 3}, 'Age': {(10, 27): 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.var()
{'Height': 424.0495867768595, 'Weight': 474.1177685950411, 'Age': 161.03512396694214}

################
Linear model for validStr4:

validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("Model range:",var.ranged()["Weight"])
print("Average error:",err.mean()["Difference"])



Square matrix
Dimension: 3x3

1.0000 0.8992 0.5087 
0.8992 1.0000 0.4233 
0.5087 0.4233 1.0000 

Height=110.5244538162 + 0.850374553976*Weight

Model range: [30, 105]

Average error: 3.4473087980173164e-08
"""
# =============================================================================

