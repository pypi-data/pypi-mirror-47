# -*- coding: utf-8 -*-
"""
Created on Wed Oct 31 17:38:28 2018

@author: Semih
"""
from MatricesM.matrix import Matrix
from MatricesM.constructors.matrices import Identity
from random import random,randint,uniform,triangular,gauss,seed

try:
    plotting=bool(int(input("Enable plotting ?(0/1) (Requires matplotlib)")))
except:
    plotting=0
# =============================================================================
"""Example Inputs"""      
# =============================================================================
projectGrid="""08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48"""

# =============================================================================
# Valid Matrices
# =============================================================================
o=Matrix(8,fill=0)
b=Matrix(1)
c=Matrix(dim=[2,4],ranged=[-50,50])
d=Matrix([4,3],dtype="float")
e=Matrix(8,fill=gauss,ranged=[0,3])
f=Matrix(dim=6,ranged=[-1250,1250],dtype="float")
g=Matrix(dim=[3,6],ranged=[2,10])
p=Matrix(5,ranged=[0,100])
q=Matrix(4,dtype="float")
q1=Matrix(9,decimal=2,dtype="float")
q2=Matrix(6,decimal=6,dtype="float")
y=Matrix(3,listed=[3,5,7,8,3,4,5,2,5])
c1=Matrix(5,dtype="complex")
c2=Matrix([7,3],ranged=[-10,10],dtype="complex")
# =============================================================================
# String inputs Matrices
# =============================================================================
proj=Matrix(20,listed=projectGrid,dtype="integer")
validStr1=Matrix(dim=[2,3],listed=" 34-52\n33a c9d88 hello\n--3-")
validStr2=Matrix(listed="312as45\ndid12,,,44\ncc352as45\ndid12,,,44\ncc3-5")
validStr3=Matrix(listed="\n\n\ndd34 5\n\n44\nn659")
validStr4=Matrix(dim=[22,3],listed="""ulke,boy,kilo,yas,cinsiyet
tr,130,30,10,e
tr,125,36,11,e
tr,135,34,10,k
tr,133,30,9,k
tr,129,38,12,e
tr,180,90,30,e
tr,190,80,25,e
tr,175,90,35,e
tr,177,60,22,k
us,185,105,33,e
us,165,55,27,k
us,155,50,44,k
us,160,58,39,k
us,162,59,41,k
us,167,62,55,k
fr,174,70,47,e
fr,193,90,23,e
fr,187,80,27,e
fr,183,88,28,e
fr,159,40,29,k
fr,164,66,32,k
fr,166,56,42,k
""",features=["Height","Weight","Age"],dtype="dataframe",coldtypes=[int]*3)
# =============================================================================
# Identity Matrices
# =============================================================================
id1=Matrix(listed=Identity())
id2=Matrix(listed=Identity(5))
id3=id2[:3,:3]
id4=Matrix(listed=Identity(6))

# =============================================================================
"""PRINT THE MATRICES """
# =============================================================================
print('################################') 
print("Matrices created by giving dimensions")
l=[proj,o,b,c,d,e,f,g,p,q,q1,q2,y,c1,c2]
for matrix in l:
    print(matrix)
print('################################')     
# =============================================================================
"""PRINT THE IDENTITY MATRICES """
# =============================================================================
print('################################') 
print("Identity matrices")
for i in [id1,id2,id3,id4]:
    print(i)
print('################################')     
# =============================================================================
"""PROPERTIES, METHODS CALLS"""   
# =============================================================================
print('################################')  
print("Attribute call outputs\n")
print('################\n')
      
print("d:")
print(d)
print("d.matrix:\n")
print(d.matrix)

print('\n################\n')
      
print("f[:4,1:3]:\n",f[:4,1:3],"\n")
print(f)
print("f.delDim(2)")
f.delDim(2)
print(f)
print("[L,U]=f.LU")
[L,U]=f.LU
print("L.p")
L.p
print("U.p")
U.p
print("f-(L@U)")
print(f-(L@U))
print("[Q,R]=f.QR")
[Q,R]=f.QR
print("Q.p")
Q.p
print("R.p")
R.p
print("f-(Q@R)")
print(f-(Q@R))
print('################')
      
print("g.dim:\n",g.dim)
print("g.ranged():\n",g.ranged())
print("g:",g)      
print("g.remove(3):")
g.remove(3)
print(g)

print('################')
print("q1.decimal",q1.decimal)
q1.p
print("q1.decimal=5")
q1.decimal=5
q1.p
print('################')      
h=proj[11:18,4:11]
print("h=proj[11:18,4:11]:\n",h)
print("h.mean():",h.mean())
print("\nh.det:",h.det)
print("\nh.rank:",h.rank)
print("\nh.rrechelon:",h.rrechelon)
print("\nh.inv:")
print(h.inv)
print("h.minor(3,4,returndet=False):\n",h.minor(3,4,returndet=False),"\n")
print("h.minor(3,4):\n",h.minor(3,4),"\n")
print('################')
      
j=g[:2,:4]
print("j=g.[:2,:4]:\n",j,"\n")
print("j.obj:\n",j.obj)

print('\n################')
      
print("proj=proj[:5,:15]:\n")
proj=proj[:5,:15]
print(proj)

print('################')
      
print("p:",p)
print("p.det:\n",p.det)
print("\np.adj:\n",p.adj)
print("p.inv:\n")
print(p.inv)

print('################')
      
print("p:")
print(p)
print("p.remove(2,1)\np.p")
p.remove(2,1)
p.p
print("p.add(col=2,lis=[55]*4):")
p.add(col=2,lis=[55]*4)
print(p)
print("p.sdev()")
print(p.sdev())

print('################\n')

print("proj.find(40)")
print(proj.find(40))
print("\nproj.find(40,0)")
print(proj.find(40,0))
print("\nproj.find(111)")
proj.find(111)

print("################\n")

print("r=p.t")
r=p.t
print("r.remove(2):")
r.remove(2)
print(r)
print("r.rank:",r.rank)
print("\nr.matrix[0]=r.matrix[1][:]")
r.matrix[0]=r.matrix[1][:]
print(r)
print("r.rank:",r.rank)    

      
# =============================================================================
"""OPERATIONS ON ELEMENTS"""    
# =============================================================================

print("################################")   
print("Operator examples")
print("################")
      
print("\nc.dim=",c.dim," d.dim:",d.dim)
print("\nmMulti=c@d:")
mMulti=c@d
print(mMulti)
print("\n((((mMulti)+125)**3)%2):")
print(((((mMulti)+125)**3)%2))

print("################\n")
      
print("f:\n",f)
print("f1=f.intForm")
f1=f.intForm
print(f1)
print("f2=f.roundForm(3)")
f2=f.roundForm(2)
print(f2)
print("f2-f1")
f3=f2-f1
print(f3)

print("################")
      
print("e+=Matrix(listed=Identity(e.dim[0]))*99")
e+=Matrix(listed=Identity(e.dim[0]))*99
print(e)
print("\ne-=33:")
e-=33
print(e)
print("\ne+=Matrix(e.dim):")
e+=Matrix(e.dim,dtype="float")
print(e)
print("\ne*=[2,1,1,0.5,0.2,0.0003,1,3]:")
e*=[2,1,1,0.5,0.2,0.0003,1,3]
print(e)
print("e%=[2,2,2,2,1,1,1,1]")
e%=[5,5,5,5,3,3,1,1]
print(e)

print("################")
      
print("\nc%j")
print(c%j)

print("\nbool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):")
print(bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)))
# =============================================================================
""" STRING MATRICES' OUTPUTS"""
# =============================================================================
print("\n################################")
print("Strings' matrices:")
print("################\n")
      
for numb,strings in enumerate([validStr1,validStr2,validStr3,validStr4]):
    print("validStr"+str(numb+1)+":")
    print(strings)         
    print('################')
print("")
# =============================================================================
"""Basic statistical properties"""
# =============================================================================
print("validStr4.ranged()")
print(validStr4.ranged())
print("")

print("validStr4.mean()")
print(validStr4.mean())
print("")

print("validStr4.sdev()")
print(validStr4.sdev())
print("")

print("validStr4.median()")
print(validStr4.median())
print("")

print("validStr4.freq()")
print(validStr4.freq())
print("")

print("validStr4.mode()")
print(validStr4.mode())
print("")

print("validStr4.iqr()")
print(validStr4.iqr())
print("")

print("validStr4.iqr(as_quartiles=True)")
print(validStr4.iqr(as_quartiles=True))
print("")

print("validStr4.var()")
print(validStr4.var())
print("")

print('################')
print("Linear model for validStr4:")
print("""
validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("Model range:",var.ranged()["Weight"])
print("Average error:",err.mean()["Difference"])

""")

validStr4.corr().p

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("\nModel range:",var.ranged()["Weight"])
print("\nAverage error:",err.mean()["Difference"])

if plotting:
    try:
        from matplotlib import pyplot as plt
    except ImportError:
        print("Couldn't import matplotlib")
    else:
        model = plt.figure()
        
        #Data in a scatter plot
        plt.scatter(var.col(2,0),out.col(1,0))
        
        #Linear model to predict
        plt.plot(var.col(2,0),preds.col(1,0),c="red")
        
        #Titles
        plt.xlabel(validStr4.features[1])
        plt.ylabel(validStr4.features[0])
        plt.legend(["Linear model","Data points"],loc=4)
        model.suptitle("Height prediction")
        plt.show()

# =============================================================================
""" Expected Outputs """
# =============================================================================
"""
################################
Matrices created by giving dimensions

Square matrix
Dimension: 20x20

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 12 50 77 91  8 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48  4 56 62  0 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30  3 49 13 36 65 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 71 37  2 36 91 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80 
24 47 32 60 99  3 45  2 44 75 33 53 78 36 84 20 35 17 12 50 
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70 
67 26 20 68  2 62 12 20 95 63 94 39 63  8 40 91 66 49 94 21 
24 55 58  5 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72 
21 36 23  9 75  0 76 44 20 45 35 14  0 61 33 97 34 31 33 95 
78 17 53 28 22 75 31 67 15 94  3 80  4 62 16 14  9 53 56 92 
16 39  5 42 96 35 31 47 55 58 88 24  0 17 54 24 36 29 85 57 
86 56  0 48 35 71 89  7  5 44 44 37 44 60 21 58 51 54 17 58 
19 80 81 68  5 94 47 69 28 73 92 13 86 52 17 77  4 89 55 40 
 4 52  8 83 97 35 99 16  7 97 57 32 16 26 26 79 33 27 98 66 
88 36 68 87 57 62 20 72  3 46 33 67 46 55 12 32 63 93 53 69 
 4 42 16 73 38 25 39 11 24 94 72 18  8 46 29 32 40 62 76 36 
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74  4 36 16 
20 73 35 29 78 31 90  1 74 31 49 71 48 86 81 16 23 57  5 54 
 1 70 54 71 83 51 54 69 16 92 33 48 61 43 52  1 89 19 67 48 


Square matrix
Dimension: 8x8

0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 


Square matrix
Dimension: 1x1

0.7245 


Dimension: 2x4

6.0940 29.6545 10.4945  27.3099 
2.7668  2.2967 43.9833 -44.4150 


Dimension: 4x3

0.1440 0.0070 0.0578 
0.7009 0.7424 0.1347 
0.6192 0.0445 0.0443 
0.9826 0.5597 0.5385 


Square matrix
Dimension: 8x8

 0.2747  1.9338 -3.9860  4.5596 -1.6287  5.1044 -4.0796 -0.7885 
 4.8065  0.7753  1.3731 -0.6213  1.3150  1.0682 -1.3885 -4.4514 
 2.7112 -4.7452 -4.9193  0.7137 -8.8818  5.9217  0.6418 -6.6299 
-1.9657 -1.4947 -4.9600 -1.1232  1.8790  1.0317  1.8014  2.6097 
 0.9057  0.7777  2.9360 -1.8309 -3.9927  1.0530 -0.1297 -0.6930 
 3.0247 -0.9142 -1.9238  0.5559  3.0781 -3.7672  3.0039  4.9143 
-2.4373 -3.6334 -2.0143 -4.7610  0.4011 -3.8899  6.4427  3.9573 
 0.0183  4.1968 -1.9783 -2.0975  1.1344  4.0358 -0.5899 -1.8061 


Square matrix
Dimension: 6x6

 196.2262  703.1318   569.1312  -47.5223   618.6912 -270.4103 
-666.8684 -447.9916  -326.8886  197.8416   549.2928  444.4060 
 787.5052 -639.0741 -1122.6978 -476.5671   134.0840 -847.9895 
 257.2353  150.5850  -808.2987  181.1582  -837.0553  855.5854 
  74.1694 -830.6279  -402.7191  371.0719 -1096.0530 -289.0565 
1002.4939  638.7035  -905.3253  787.5851  -921.3551  676.5138 


Dimension: 3x6

3.0266 3.8547 5.0476 6.4942 5.5228 4.4999 
5.7220 6.9542 9.7616 3.2332 4.3397 2.3596 
3.6405 2.8738 7.5869 6.8307 4.0530 2.1615 


Square matrix
Dimension: 5x5

82.8928 75.9218 16.9799 88.6994 65.4274 
74.9643 42.7023 59.3148 37.9874 69.8967 
68.6446 75.9174 58.0075  2.2981 61.4602 
30.9897 50.5856 30.2273  7.2190 21.0591 
72.1417 91.7415 91.0610 99.6732 37.2732 


Square matrix
Dimension: 4x4

0.7711 0.0045 0.9949 0.4047 
0.1747 0.9396 0.6992 0.9214 
0.2612 0.1945 0.1198 0.9177 
0.0548 0.7965 0.3750 0.9395 


Square matrix
Dimension: 9x9

0.24 0.60 0.96 0.04 0.38 0.88 0.67 0.30 0.10 
0.00 0.83 0.02 0.12 0.27 0.81 0.67 0.74 0.87 
0.09 0.16 0.56 0.56 0.27 0.55 0.41 0.42 0.99 
0.85 0.04 0.37 0.48 0.93 0.49 0.72 0.94 0.15 
0.45 0.69 0.32 0.55 0.67 0.92 0.66 0.37 0.58 
0.02 0.82 0.77 0.36 0.21 0.41 0.28 0.51 0.05 
0.00 0.13 0.15 0.32 0.41 0.88 0.18 0.04 0.87 
0.41 0.44 0.72 0.35 0.87 0.07 0.79 0.42 0.45 
0.16 0.36 0.06 0.73 0.97 0.20 0.91 0.47 0.66 


Square matrix
Dimension: 6x6

0.481948 0.356456 0.692526 0.430128 0.606342 0.531144 
0.034761 0.275246 0.043214 0.540056 0.340251 0.489029 
0.630451 0.235511 0.454939 0.825007 0.732780 0.146641 
0.420820 0.769097 0.557054 0.159246 0.561419 0.907834 
0.172308 0.080355 0.913083 0.259499 0.641316 0.868954 
0.658284 0.599597 0.169347 0.813471 0.716941 0.311350 


Square matrix
Dimension: 3x3

3.0000 5.0000 7.0000 
8.0000 3.0000 4.0000 
5.0000 2.0000 5.0000 


Square matrix
Dimension: 5x5

 0.6617+0.0906j   0.1644+0.9475j    0.303+0.6482j   0.7234+0.8999j    0.8119+0.186j  
 0.9398+0.4165j   0.1764+0.0537j   0.4752+0.4121j   0.8531+0.0912j   0.9754+0.7972j  
 0.8464+0.2907j     0.95+0.9913j   0.7058+0.2013j    0.401+0.4943j   0.4468+0.5731j  
 0.8257+0.4942j   0.4903+0.0945j   0.7932+0.0255j   0.5352+0.2478j   0.8188+0.8605j  
  0.055+0.3047j    0.889+0.0484j    0.618+0.4075j   0.7055+0.1837j   0.1706+0.6581j  


Dimension: 7x3

 -5.2381-2.0624j   -2.6068+0.9604j   -7.4699+6.5432j  
  6.5046+7.0667j   -8.8475+0.9631j      8.27+5.4145j  
 -2.0022-9.7656j   -4.6562-7.9512j     7.397+2.9521j  
 -1.6962+3.3941j    2.7628-7.5114j    2.8428+2.7491j  
  8.8811-7.2698j    2.5747+5.8704j    2.7802-8.4476j  
  5.5066+6.1056j   -2.7924-8.3527j    5.6474-8.1846j  
  1.4678+0.6488j    3.1145+6.4216j    5.5802-6.4021j  

################################
################################
Identity matrices

Square matrix
Dimension: 1x1

1.0000 


Square matrix
Dimension: 5x5

1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 


Square matrix
Dimension: 3x3

1.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 
0.0000 0.0000 1.0000 


Square matrix
Dimension: 6x6

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 

################################
################################
Attribute call outputs

################

d:

Dimension: 4x3

0.1440 0.0070 0.0578 
0.7009 0.7424 0.1347 
0.6192 0.0445 0.0443 
0.9826 0.5597 0.5385 

d.matrix:

[[0.14404736472670676, 0.006988738670003357, 0.05777153843806269], [0.7008575701162755, 0.7424237800225837, 0.1347392193365276], [0.6191595202490311, 0.0445265053254799, 0.04425183874019593], [0.9825739310892057, 0.5597094637897885, 0.5384990997039705]]

################

f[:4,1:3]:
 
Dimension: 4x2

 703.1318   569.1312 
-447.9916  -326.8886 
-639.0741 -1122.6978 
 150.5850  -808.2987 
 


Square matrix
Dimension: 6x6

 196.2262  703.1318   569.1312  -47.5223   618.6912 -270.4103 
-666.8684 -447.9916  -326.8886  197.8416   549.2928  444.4060 
 787.5052 -639.0741 -1122.6978 -476.5671   134.0840 -847.9895 
 257.2353  150.5850  -808.2987  181.1582  -837.0553  855.5854 
  74.1694 -830.6279  -402.7191  371.0719 -1096.0530 -289.0565 
1002.4939  638.7035  -905.3253  787.5851  -921.3551  676.5138 

f.delDim(2)

Square matrix
Dimension: 4x4

 196.2262  703.1318   569.1312  -47.5223 
-666.8684 -447.9916  -326.8886  197.8416 
 787.5052 -639.0741 -1122.6978 -476.5671 
 257.2353  150.5850  -808.2987  181.1582 

[L,U]=f.LU
L.p

Square matrix
Dimension: 4x4

 1.0000  0.0000 0.0000 0.0000 
-3.3985  1.0000 0.0000 0.0000 
 4.0133 -1.7825 1.0000 0.0000 
 1.3109 -0.3972 1.6909 1.0000 

U.p

Square matrix
Dimension: 4x4

196.2262  703.1318  569.1312  -47.5223 
  0.0000 1941.5797 1607.2858   36.3385 
  0.0000    0.0000 -541.7335 -221.0736 
  0.0000    0.0000    0.0000  631.6935 

f-(L@U)

Square matrix
Dimension: 4x4

 0.0000 0.0000  0.0000 0.0000 
 0.0000 0.0000  0.0000 0.0000 
 0.0000 0.0000  0.0000 0.0000 
 0.0000 0.0000  0.0000 0.0000 

[Q,R]=f.QR
Q.p

Square matrix
Dimension: 4x4

 0.1814  0.6672 -0.0117 -0.7224 
-0.6166 -0.4372 -0.3504 -0.5530 
 0.7282 -0.5847  0.0121 -0.3573 
 0.2379  0.1477 -0.9365  0.2113 

R.p

Square matrix
Dimension: 4x4

1081.4586  -25.7191 -704.9583 -434.5596 
   0.0000 1060.9057 1059.7135  187.2165 
   0.0000    0.0000  851.2372 -244.1741 
   0.0000    0.0000    0.0000  133.4956 

f-(Q@R)

Square matrix
Dimension: 4x4

0.0000  0.0000  0.0000  0.0000 
0.0000  0.0000  0.0000  0.0000 
0.0000  0.0000  0.0000  0.0000 
0.0000  0.0000  0.0000  0.0000 

################
g.dim:
 [3, 6]
g.ranged():
 {'Col 1': [3.026642361493419, 5.721955598297655], 'Col 2': [2.873758271375757, 6.954185563129809], 'Col 3': [5.047551469908529, 9.761632511069], 'Col 4': [3.2331976030910425, 6.830738784302369], 'Col 5': [4.053000532595523, 5.5228190188861035], 'Col 6': [2.1614913768520525, 4.499935244038061]}
g: 
Dimension: 3x6

3.0266 3.8547 5.0476 6.4942 5.5228 4.4999 
5.7220 6.9542 9.7616 3.2332 4.3397 2.3596 
3.6405 2.8738 7.5869 6.8307 4.0530 2.1615 

g.remove(3):

Dimension: 2x6

3.0266 3.8547 5.0476 6.4942 5.5228 4.4999 
5.7220 6.9542 9.7616 3.2332 4.3397 2.3596 

################
q1.decimal 2

Square matrix
Dimension: 9x9

0.24 0.60 0.96 0.04 0.38 0.88 0.67 0.30 0.10 
0.00 0.83 0.02 0.12 0.27 0.81 0.67 0.74 0.87 
0.09 0.16 0.56 0.56 0.27 0.55 0.41 0.42 0.99 
0.85 0.04 0.37 0.48 0.93 0.49 0.72 0.94 0.15 
0.45 0.69 0.32 0.55 0.67 0.92 0.66 0.37 0.58 
0.02 0.82 0.77 0.36 0.21 0.41 0.28 0.51 0.05 
0.00 0.13 0.15 0.32 0.41 0.88 0.18 0.04 0.87 
0.41 0.44 0.72 0.35 0.87 0.07 0.79 0.42 0.45 
0.16 0.36 0.06 0.73 0.97 0.20 0.91 0.47 0.66 

q1.decimal=5

Square matrix
Dimension: 9x9

0.24116 0.59581 0.96255 0.03876 0.37602 0.88089 0.67345 0.30345 0.10269 
0.00000 0.83441 0.01727 0.11502 0.26881 0.80779 0.66601 0.73785 0.86770 
0.08798 0.15940 0.56221 0.56078 0.26981 0.55150 0.41118 0.42454 0.98758 
0.84805 0.04126 0.36750 0.48106 0.93356 0.48708 0.72207 0.94498 0.14841 
0.45424 0.69005 0.31736 0.54808 0.66790 0.92279 0.66420 0.37446 0.58214 
0.01737 0.81570 0.77227 0.35725 0.21024 0.41084 0.28007 0.51079 0.04898 
0.00638 0.12842 0.14841 0.32435 0.40669 0.87567 0.18159 0.04270 0.87014 
0.41292 0.43739 0.72140 0.34925 0.86953 0.06738 0.78710 0.41987 0.45003 
0.16144 0.35926 0.05625 0.73421 0.97314 0.19938 0.90802 0.47099 0.66222 

################
h=proj[11:18,4:11]:
 
Square matrix
Dimension: 7x7

96 35 31 47 55 58 88 
35 71 89  7  5 44 44 
 5 94 47 69 28 73 92 
97 35 99 16  7 97 57 
57 62 20 72  3 46 33 
38 25 39 11 24 94 72 
72 30 23 88 34 62 99 

h.mean(): {'Col 5': 57.142857142857146, 'Col 6': 50.285714285714285, 'Col 7': 49.714285714285715, 'Col 8': 44.285714285714285, 'Col 9': 22.285714285714285, 'Col 10': 67.71428571428571, 'Col 11': 69.28571428571429}

h.det: 1287494716522.8682

h.rank: 7

h.rrechelon: 
Square matrix
Dimension: 7x7

1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 0.0000 
0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 1.0000 


h.inv:

Square matrix
Dimension: 7x7

 0.0011  0.0229 -0.0279 -0.0196  0.0155  0.0175  0.0081 
 0.0015  0.0268 -0.0174 -0.0279  0.0197  0.0212 -0.0029 
 0.0048 -0.0282  0.0340  0.0407 -0.0241 -0.0400 -0.0096 
 0.0028 -0.0406  0.0363  0.0380 -0.0121 -0.0393 -0.0074 
 0.0398 -0.0745  0.0710  0.0630 -0.0317 -0.0622 -0.0487 
 0.0017 -0.0272  0.0178  0.0197  0.0007 -0.0011 -0.0167 
-0.0195  0.0605 -0.0501 -0.0545  0.0096  0.0471  0.0410 

h.minor(3,4,returndet=False):
 
Square matrix
Dimension: 6x6

96 35 31 55 58 88 
35 71 89  5 44 44 
97 35 99  7 97 57 
57 62 20  3 46 33 
38 25 39 24 94 72 
72 30 23 34 62 99 
 

h.minor(3,4):
 -46677834292.743515 

################
j=g.[:2,:4]:
 
Dimension: 2x4

3.0266 3.8547 5.0476 6.4942 
5.7220 6.9542 9.7616 3.2332 
 

j.obj:
 Matrix(dim=[2, 4],listed=[[3.026642361493419, 3.854701226134262, 5.047551469908529, 6.4941836175678], [5.721955598297655, 6.954185563129809, 9.761632511069, 3.2331976030910425]],ranged=[0, 1],fill=uniform,features=['Col 1', 'Col 2', 'Col 3', 'Col 4'],header=False,directory='',decimal=4,seed=None,dtype='float',coldtypes=[float, float, float, float])

################
proj=proj[:5,:15]:


Dimension: 5x15

 8  2 22 97 38 15  0 40  0 75  4  5  7 78 52 
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 
52 70 95 23  4 60 11 42 69 24 68 56  1 32 56 
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 

################
p: 
Square matrix
Dimension: 5x5

82.8928 75.9218 16.9799 88.6994 65.4274 
74.9643 42.7023 59.3148 37.9874 69.8967 
68.6446 75.9174 58.0075  2.2981 61.4602 
30.9897 50.5856 30.2273  7.2190 21.0591 
72.1417 91.7415 91.0610 99.6732 37.2732 

p.det:
 -17850360.010550644

p.adj:
 
Square matrix
Dimension: 5x5

1060092.7522 -10410198.8302  17113250.9651 -26771719.5928  4568562.7501 
-315267.9057   2415094.8076  -3638874.7128   5239185.8390  -935438.3654 
 149858.3437    723473.9317  -1449514.5052   2326664.4101  -544181.0041 
-267720.2018   1697509.0317  -2686470.4025   4552250.3680  -855561.1406 
-926013.2786   7897598.1090 -13440758.9736  21063425.0301 -3401522.0418 

p.inv:


Square matrix
Dimension: 5x5

-0.0594  0.5832 -0.9587  1.4998 -0.2559 
 0.0177 -0.1353  0.2039 -0.2935  0.0524 
-0.0084 -0.0405  0.0812 -0.1303  0.0305 
 0.0150 -0.0951  0.1505 -0.2550  0.0479 
 0.0519 -0.4424  0.7530 -1.1800  0.1906 

################
p:

Square matrix
Dimension: 5x5

82.8928 75.9218 16.9799 88.6994 65.4274 
74.9643 42.7023 59.3148 37.9874 69.8967 
68.6446 75.9174 58.0075  2.2981 61.4602 
30.9897 50.5856 30.2273  7.2190 21.0591 
72.1417 91.7415 91.0610 99.6732 37.2732 

p.remove(2,1)
p.p

Square matrix
Dimension: 4x4

75.9218 16.9799 88.6994 65.4274 
75.9174 58.0075  2.2981 61.4602 
50.5856 30.2273  7.2190 21.0591 
91.7415 91.0610 99.6732 37.2732 

p.add(col=2,lis=[55]*4):

Dimension: 4x5

75.9218 55.0000 16.9799 88.6994 65.4274 
75.9174 55.0000 58.0075  2.2981 61.4602 
50.5856 55.0000 30.2273  7.2190 21.0591 
91.7415 55.0000 91.0610 99.6732 37.2732 

p.sdev()
{'Col 2': 14.74383232007648, 'Col': 0.0, 'Col 3': 28.407503900948544, 'Col 4': 44.91558683638022, 'Col 5': 18.126454454340077}
################

proj.find(40)
[(1, 8), (2, 4), (2, 12), (3, 11), (5, 14), (5, 15)]

proj.find(40,0)
[(0, 7), (1, 3), (1, 11), (2, 10), (4, 13), (4, 14)]

proj.find(111)
################

r=p.t
r.remove(2):

Square matrix
Dimension: 4x4

75.9218 75.9174 50.5856 91.7415 
16.9799 58.0075 30.2273 91.0610 
88.6994  2.2981  7.2190 99.6732 
65.4274 61.4602 21.0591 37.2732 

r.rank: 4

r.matrix[0]=r.matrix[1][:]

Square matrix
Dimension: 4x4

16.9799 58.0075 30.2273 91.0610 
16.9799 58.0075 30.2273 91.0610 
88.6994  2.2981  7.2190 99.6732 
65.4274 61.4602 21.0591 37.2732 

r.rank: 3
################################
Operator examples
################

c.dim= [2, 4]  d.dim: [4, 3]

mMulti=c@d:

Dimension: 2x3

 54.9932  37.8117  19.5184 
-14.4001 -21.1766 -21.5018 


((((mMulti)+125)**3)%2):

Dimension: 2x3

0.5597 1.2508 1.3745 
0.2176 0.1767 0.3878 

################

f:
 
Square matrix
Dimension: 4x4

 196.2262  703.1318   569.1312  -47.5223 
-666.8684 -447.9916  -326.8886  197.8416 
 787.5052 -639.0741 -1122.6978 -476.5671 
 257.2353  150.5850  -808.2987  181.1582 

f1=f.intForm

Square matrix
Dimension: 4x4

 196  703   569  -47 
-666 -447  -326  197 
 787 -639 -1122 -476 
 257  150  -808  181 

f2=f.roundForm(3)

Square matrix
Dimension: 4x4

 196.2300  703.1300   569.1300  -47.5200 
-666.8700 -447.9900  -326.8900  197.8400 
 787.5100 -639.0700 -1122.7000 -476.5700 
 257.2400  150.5900  -808.3000  181.1600 

f2-f1

Square matrix
Dimension: 4x4

 0.2300  0.1300  0.1300 -0.5200 
-0.8700 -0.9900 -0.8900  0.8400 
 0.5100 -0.0700 -0.7000 -0.5700 
 0.2400  0.5900 -0.3000  0.1600 

################
e+=Matrix(listed=Identity(e.dim[0]))*99

Square matrix
Dimension: 8x8

99.2747  1.9338 -3.9860  4.5596 -1.6287  5.1044  -4.0796 -0.7885 
 4.8065 99.7753  1.3731 -0.6213  1.3150  1.0682  -1.3885 -4.4514 
 2.7112 -4.7452 94.0807  0.7137 -8.8818  5.9217   0.6418 -6.6299 
-1.9657 -1.4947 -4.9600 97.8768  1.8790  1.0317   1.8014  2.6097 
 0.9057  0.7777  2.9360 -1.8309 95.0073  1.0530  -0.1297 -0.6930 
 3.0247 -0.9142 -1.9238  0.5559  3.0781 95.2328   3.0039  4.9143 
-2.4373 -3.6334 -2.0143 -4.7610  0.4011 -3.8899 105.4427  3.9573 
 0.0183  4.1968 -1.9783 -2.0975  1.1344  4.0358  -0.5899 97.1939 


e-=33:

Square matrix
Dimension: 8x8

 66.2747 -31.0662 -36.9860 -28.4404 -34.6287 -27.8956 -37.0796 -33.7885 
-28.1935  66.7753 -31.6269 -33.6213 -31.6850 -31.9318 -34.3885 -37.4514 
-30.2888 -37.7452  61.0807 -32.2863 -41.8818 -27.0783 -32.3582 -39.6299 
-34.9657 -34.4947 -37.9600  64.8768 -31.1210 -31.9683 -31.1986 -30.3903 
-32.0943 -32.2223 -30.0640 -34.8309  62.0073 -31.9470 -33.1297 -33.6930 
-29.9753 -33.9142 -34.9238 -32.4441 -29.9219  62.2328 -29.9961 -28.0857 
-35.4373 -36.6334 -35.0143 -37.7610 -32.5989 -36.8899  72.4427 -29.0427 
-32.9817 -28.8032 -34.9783 -35.0975 -31.8656 -28.9642 -33.5899  64.1939 


e+=Matrix(e.dim):

Square matrix
Dimension: 8x8

 66.4322 -30.1168 -36.5947 -28.0487 -34.0530 -27.4179 -36.1983 -33.3627 
-27.4171  67.2984 -31.4947 -33.1002 -30.7685 -31.0192 -34.1172 -36.4787 
-29.7066 -36.7712  61.6362 -31.4988 -40.9630 -26.8072 -31.5667 -39.0805 
-34.3041 -33.8568 -37.1001  65.8503 -31.0230 -31.5518 -30.5760 -30.0845 
-31.6027 -31.9140 -29.0661 -34.6051  62.0092 -31.2060 -32.6480 -33.2866 
-29.3464 -33.7531 -34.0258 -32.0561 -29.7081  62.3876 -29.3380 -27.1609 
-35.4092 -35.8270 -34.7019 -37.3043 -31.6170 -36.6910  73.1157 -28.1787 
-31.9998 -28.3398 -34.6880 -34.9336 -31.3932 -28.6804 -33.0250  64.4938 


e*=[2,1,1,0.5,0.2,0.0003,1,3]:

Square matrix
Dimension: 8x8

132.8643 -30.1168 -36.5947 -14.0244 -6.8106 -0.0082 -36.1983 -100.0882 
-54.8341  67.2984 -31.4947 -16.5501 -6.1537 -0.0093 -34.1172 -109.4362 
-59.4133 -36.7712  61.6362 -15.7494 -8.1926 -0.0080 -31.5667 -117.2415 
-68.6081 -33.8568 -37.1001  32.9251 -6.2046 -0.0095 -30.5760  -90.2535 
-63.2055 -31.9140 -29.0661 -17.3025 12.4018 -0.0094 -32.6480  -99.8599 
-58.6927 -33.7531 -34.0258 -16.0280 -5.9416  0.0187 -29.3380  -81.4826 
-70.8184 -35.8270 -34.7019 -18.6522 -6.3234 -0.0110  73.1157  -84.5360 
-63.9997 -28.3398 -34.6880 -17.4668 -6.2786 -0.0086 -33.0250  193.4815 

e%=[2,2,2,2,1,1,1,1]

Square matrix
Dimension: 8x8

2.8643 4.8832 3.4053 0.9756 2.1894 2.9918 0.8017 0.9118 
0.1659 2.2984 3.5053 3.4499 2.8463 2.9907 0.8828 0.5638 
0.5867 3.2288 1.6362 4.2506 0.8074 2.9920 0.4333 0.7585 
1.3919 1.1432 2.8999 2.9251 2.7954 2.9905 0.4240 0.7465 
1.7945 3.0860 0.9339 2.6975 0.4018 2.9906 0.3520 0.1401 
1.3073 1.2469 0.9742 3.9720 0.0584 0.0187 0.6620 0.5174 
4.1816 4.1730 0.2981 1.3478 2.6766 2.9890 0.1157 0.4640 
1.0003 1.6602 0.3120 2.5332 2.7214 2.9914 0.9750 0.4815 

################

c%j

Dimension: 2x4

0.0407 2.6716 0.3994 1.3332 
2.7668 2.2967 4.9368 0.8498 


bool((f.lowtri@f.uptri).roundForm(4)==f.roundForm(4)):
True

################################
Strings' matrices:
################

validStr1:

Dimension: 2x3

34.0000 -52.0000 33.0000 
 9.0000  88.0000 -3.0000 

################
validStr2:

Dimension: 1x10

312.0000 45.0000 12.0000 44.0000 352.0000 45.0000 12.0000 44.0000 3.0000 -5.0000 

################
validStr3:

Dimension: 1x4

34.0000 5.0000 44.0000 659.0000 

################
validStr4:

Dimension: 22x3

  Height    Weight      Age  
     130        30       10  
     125        36       11  
     135        34       10  
     133        30        9  
     129        38       12  
     180        90       30  
     190        80       25  
     175        90       35  
     177        60       22  
     185       105       33  
     165        55       27  
     155        50       44  
     160        58       39  
     162        59       41  
     167        62       55  
     174        70       47  
     193        90       23  
     187        80       27  
     183        88       28  
     159        40       29  
     164        66       32  
     166        56       42  

################

validStr4.ranged()
{'Height': [125, 193], 'Weight': [30, 105], 'Age': [9, 55]}

validStr4.mean()
{'Height': 163.36363636363637, 'Weight': 62.13636363636363, 'Age': 28.681818181818183}

validStr4.sdev()
{'Height': 20.592464320155067, 'Weight': 21.774245534462064, 'Age': 12.68996154316246}

validStr4.median()
{'Height': 166, 'Weight': 60, 'Age': 29}

validStr4.freq()
{'Height': {130: 1, 125: 1, 135: 1, 133: 1, 129: 1, 180: 1, 190: 1, 175: 1, 177: 1, 185: 1, 165: 1, 155: 1, 160: 1, 162: 1, 167: 1, 174: 1, 193: 1, 187: 1, 183: 1, 159: 1, 164: 1, 166: 1}, 'Weight': {30: 2, 36: 1, 34: 1, 38: 1, 90: 3, 80: 2, 60: 1, 105: 1, 55: 1, 50: 1, 58: 1, 59: 1, 62: 1, 70: 1, 88: 1, 40: 1, 66: 1, 56: 1}, 'Age': {10: 2, 11: 1, 9: 1, 12: 1, 30: 1, 25: 1, 35: 1, 22: 1, 33: 1, 27: 2, 44: 1, 39: 1, 41: 1, 55: 1, 47: 1, 23: 1, 28: 1, 29: 1, 32: 1, 42: 1}}

validStr4.mode()
{'Height': {'All': 1}, 'Weight': {90: 3}, 'Age': {(10, 27): 2}}

validStr4.iqr()
{'Height': 25, 'Weight': 40, 'Age': 17}

validStr4.iqr(as_quartiles=True)
{'Height': [155, 166, 180], 'Weight': [40, 60, 80], 'Age': [22, 29, 39]}

validStr4.var()
{'Height': 424.0495867768595, 'Weight': 474.1177685950411, 'Age': 161.03512396694214}

################
Linear model for validStr4:

validStr4.corr().p #First and second columns have strong positive correlation. Let's choose first column to be predicted

var = validStr4["Weight"]
var.add([1]*22,col=1,feature="bias")

out = validStr4["Height"]

coefs = (((var.t@var).inv)@var.t)@out

preds = var@coefs
err = out-preds
err.features=["Difference"]

print("Height={0} + {1}*{2}".format(coefs[0,0],coefs[1,0],"Weight"))
print("Model range:",var.ranged()["Weight"])
print("Average error:",err.mean()["Difference"])



Dimension: 3x4

Feature  Height  Weight     Age  
 Height  1.0000  0.8992  0.5087  
 Weight  0.8992  1.0000  0.4233  
    Age  0.5087  0.4233  1.0000  

Height=110.52445381620008 + 0.8503745538689572*Weight

Model range: [30, 105]

Average error: 4.11242601992192e-08
"""
# =============================================================================

