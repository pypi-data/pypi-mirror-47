Metadata-Version: 2.1
Name: pyDbOracle
Version: 0.3
Summary: Standard Oracle Using (queries, updates, inserts)
Home-page: https://github.com/wgalleti/pyDbOracle
Author: William Galleti
Author-email: william.galleti@gmail.com
License: BSD
Description: # pyDbOracle
        
        EstÃ¡ lib foi desenvolvida para facilitar o dia a dia de quem precisa martelar comandos a moda antiga (SELECT, UPDATE, INSERT) em bancos oracle.
        
        ## InstalaÃ§Ã£o
        
        ```
        pip install pyDbOracle
        ```
        
        ## UtilizaÃ§Ã£o
        
        Alguns exemplos de uso.
        
        ### ConexÃ£o bÃ¡sica
        
        ```Python
        from pyDbOracle.database import Database
        str_conn = 'oracle://<USER>:<PASS>@<HOST>:<PORT>/<INSTANCE>'
        db = Database(str_conn)
        db.info()
        ```
        
        
        ### ConexÃ£o em banco com RAC
        
        ```Python
        from pyDbOracle.database import Database
        str_conn = 'oracle://<USER>:<PASS>@<HOST>:<PORT>/<INSTANCE>?threaded=True'
        db = Database(str_conn)
        db.info()
        ```
        
        ### Executando queries
        
        ```Python
        from pyDbOracle.database import Database
        str_conn = 'oracle://<USER>:<PASS>@<HOST>:<PORT>/<INSTANCE>'
        db = Database(str_conn)
        command = 'SELECT INSTANCE_NAME FROM V$INSTANCE'
        data = db.get(command=command)
        print(data)
        # {'instance_name': 'PROD'}
        ```
        
        ### Executando queries com filtros
        
        ```Python
        from pyDbOracle.database import Database
        str_conn = 'oracle://<USER>:<PASS>@<HOST>:<PORT>/<INSTANCE>'
        db = Database(str_conn)
        command = 'SELECT INSTANCE_NAME FROM V$INSTANCE WHERE HOST = :host'
        params = dict(host='MEUHOST')
        data = db.get(command=command, params=params)
        print(data)
        # {'instance_name': 'PROD'}
        ```
        
        ### Executandos Inserts, Updates ou Deletes
        
        Quando precisar executar um comando do tipo insert, update ou delete, rodar o metodo `run` 
        
        ```Python
        from pyDbOracle.database import Database
        str_conn = 'oracle://<USER>:<PASS>@<HOST>:<PORT>/<INSTANCE>'
        db = Database(str_conn)
        command = 'INSERT INTO TABELA (COLUNA1, COLUNA2) VALUES (:valor1, :valor2)'
        params = dict(valor1='ABC', valor2=123)
        data = db.run(command=command, params=params)
        print(data)
        # 1
        ```
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3.6
Classifier: Framework :: Pytest
Description-Content-Type: text/markdown
